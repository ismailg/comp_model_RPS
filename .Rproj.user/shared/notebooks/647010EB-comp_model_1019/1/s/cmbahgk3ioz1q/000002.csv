"0","# FIXED STRATEGIES (level-k) "
"0","# create a function which computes the -2 log Likelihood over the three games for a particular strategy"
"0","# modelLL <- function(par,data,strategy, return_value=c(""-2logLik"",""likelihood_by_trial"")) {"
"0","#   # par = parameter vector (just has one element here) "
"0","#   # dat = data subset for one participant"
"0","#   # strategy = c(""level1"",""level2"",""level3"",""WSLS"")"
"0","#   # return = -2logLik (default, for use in optimization) or ""likelihood_by_trial"" (for later plotting, etc)"
"0","#   return_value <- match.arg(return_value)"
"0","#   "
"0","#   # count the number of supplied parameters. If 1, it is a _1 model, "
"0","#   # if 3, it is a _3 model. For the _3 model we will use unbounded"
"0","#   # optimization (transforming parameters from a logit scale back to 0 to 1)"
"0","#   n_theta <- length(par)"
"0","#   if(n_theta == 3) par <-my_logistic(par)"
"0","#   theta <- par[1]"
"0","#   # set up a vector to store the likelihood"
"0","#   lik <- rep(0.0,nrow(data))"
"0","#   for(t in 1:nrow(data)) {"
"0","#     t_game <- data[t,""game""]"
"0","#     pred_file <- switch(as.character(t_game),rps=rps_predict,fwg = fwg_predict, numbers = numbers_predict)"
"0","#     if(n_theta == 3) {"
"0","#       theta <- switch(as.character(t_game),rps=par[1],fwg = par[2], numbers = par[3])"
"0","#     }"
"0","#     if(t_game == ""numbers"") nopts <- 5 else nopts <- 3"
"0","#     if(data[t,""round""] == 1) {"
"0","#       # first round is uniform prediction"
"0","#       pred <- NA"
"0","#       lik[t] <- 1/nopts"
"0","#     } else {"
"0","#       # get prediction from file"
"0","#       pred <- as.character(filter(pred_file,human_previous == as.character(data[t-1,""h_action""]) & computer_previous == as.character(data[t-1,""a_action""]))[strategy][1,])"
"0","#       if(as.character(data[t,""h_action""]) == pred) {"
"0","#         lik[t] <- theta + (1-theta)/nopts"
"0","#       } else {"
"0","#         lik[t] <- (1-theta)/nopts"
"0","#       }"
"0","#     }"
"0","#     # for debugging uncomment the line below"
"0","#     # cat(as.character(pred),as.character(data[t,""h_action""]),lik[t],""\n"")"
"0","#   }"
"0","#   if(return_value == ""-2logLik"") {"
"0","#     ret <- -2*sum(log(lik))"
"0","#     if(ret == Inf) {"
"0","#       return(1e+300)"
"0","#     } else {"
"0","#       return(ret)"
"0","#     }"
"0","#   }"
"0","#   if(return_value == ""likelihood_by_trial"") return(lik)"
"0","# }"
"0","# "
"0","# all_modelling <- list()"
"0","# for(id in unique(dat$human_id)) {"
"0","#   all_modelling[[id]] <- list()"
"0","#   tdat <- subset(dat,human_id == id)"
"0","#   # level 1"
"0","#   all_modelling[[id]]$level1_1 <- optimize(modelLL,interval=c(0,1),data=tdat,strategy=""level1"")"
"0","#   all_modelling[[id]]$level1_3 <- optim(my_logit(rep(all_modelling[[id]]$level1_1$minimum,3)),fn=modelLL,data=tdat,strategy=""level1"")"
"0","#   # level 2"
"0","#   all_modelling[[id]]$level2_1 <- optimize(modelLL,interval=c(0,1),data=tdat,strategy=""level2"")"
"0","#   all_modelling[[id]]$level2_3 <- optim(my_logit(rep(all_modelling[[id]]$level2_1$minimum,3)),fn=modelLL,data=tdat,strategy=""level2"")"
"0","#   # level 3"
"0","#   all_modelling[[id]]$level3_1 <- optimize(modelLL,interval=c(0,1),data=tdat,strategy=""level3"")"
"0","#   all_modelling[[id]]$level3_3 <- optim(my_logit(rep(all_modelling[[id]]$level3_1$minimum,3)),fn=modelLL,data=tdat,strategy=""level3"")"
"0","#   # WSLS"
"0","#   all_modelling[[id]]$WSLS_1 <- optimize(modelLL,interval=c(0,1),data=tdat,strategy=""WSLS"")"
"0","#   all_modelling[[id]]$WSLS_3 <- optim(my_logit(rep(all_modelling[[id]]$WSLS_1$minimum,3)),fn=modelLL,data=tdat,strategy=""WSLS"")"
"0","# }"
"0","# "
"0","# save(all_modelling,file=""all_modelling.RData"")"
"0",""
