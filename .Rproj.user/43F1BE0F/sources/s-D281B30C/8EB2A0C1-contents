---
output:
  html_document: default
  word_document: default
---
--
title: "opponent modelling"
author: "Ismail Guennouni"
date: "30 July 2018"
output: html_document
---

```{r setup, include=FALSE}
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
```


```{r}
dat <- read.csv("data20180719.csv")
```

```{r}
# using some functions dplyr, ggpubr, PairedData and sjPlot. Need to be loaded. 
library(tidyr)
library(dplyr)
library(ggpubr)
library(PairedData)
library(multcompView)


# transform 'winner' variable in numeric score
dat$score <- recode(dat$winner, human = 1, tie = 0, ai = -1)
# create a new variable 'block' with round 1...25 = block 1 and round 26...50 as block 2
dat$block <- factor(as.numeric(cut(dat$round,2)),labels =c("first half", "second half"))

# create a new variable "game.f" as a factor variable of games
dat$game.f <- factor(dat$game, labels = c("RPS","FWG","NUM"),levels=c("rps","fwg","numbers"))


#Group data by human_id and calculate mean score per block of each game.
dat2 <- dat %>% 
  group_by(human_id,condition,game,block,game.f) %>% 
      summarize(block_score = mean(score))

# Group data by game and ID
dat3 <- group_by(dat2, human_id,game.f,game) %>% summarise(game_score = mean(block_score))
# head(dat3,6)

# Subsetting scores data by game
rps <- subset(dat3,  game.f == "RPS",game_score)
fwg <- subset(dat3,  game.f == "FWG",game_score)
num <- subset(dat3,  game.f == "NUM",game_score)
# head(rps,6)
```


```{r}
# Look at some summary statistics of group means #############################

group_by(dat2, game.f) %>%
  summarise(
    mean = mean(block_score, na.rm = TRUE),
    sd = sd(block_score, na.rm = TRUE)
  )



group_by(dat2, game.f, block) %>%
  summarise(
    count = n(),
    mean = mean(block_score, na.rm = TRUE),
    sd = sd(block_score, na.rm = TRUE)
  )


group_by(dat2, game.f, condition,block) %>%
  summarise(
    count = n(),
    mean = mean(block_score, na.rm = TRUE),
    sd = sd(block_score, na.rm = TRUE)
  )
```


```{r}
# PLOTS  #############################

# Plot scores per game 

ggboxplot(dat3, x = "game.f", y = "game_score", group = 1, add ="jitter", color="game.f", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score", xlab = "Games") 


# Plot paired scores between games
#pd <- paired(rps,fwg)
#pd2 <- paired(fwg,num)
#head(pd)
#plot(pd, type = "profile")
#plot(pd2, type = "profile")
ggpaired(dat3, x = "game.f", y = "game_score",color = "game.f", id = "human_id", line.color = "gray", line.size = 0.4, palette = "npg")

# Plot results by game and block (for all 3 games, learning is happening) 
ggboxplot(dat2, x = "game", y = "block_score", palette = c("#00AFBB", "#E7B800"),order = c("rps", "fwg","numbers"), fill="block",ylab = "Percentage score", xlab = "Games")


# Group data by game and ID
dat4 <- group_by(dat2, human_id,condition,game.f) %>% summarise(game_score = mean(block_score))

# Level 2 is harder to win against than level 1
ggboxplot(dat2, x = "condition", y = "block_score", palette = c("#00AFBB", "#E7B800"), fill="condition",ylab = "Percentage score", xlab = "Conditions")

# Breaking it down by game (seems to be true for RPS and FWG, less so for Numbers )
ggboxplot(dat4, x = "game.f", y = "game_score", palette = c("#00AFBB","#E7B800","#FC4E07"), fill="condition",order = c("RPS", "FWG","NUM"),ylab = "Game Score", xlab = "Conditions")

```



```{r}
# Testing score against hypothesis of random play  ######################################

# Normality of scores 
shapiro.test(dat3$game_score)

# Testing Scores against random play (expected 0 average score)
wilcox.test(as.numeric(rps$game_score), mu = 0, alternative = "two.sided")
wilcox.test(as.numeric(fwg$game_score), mu = 0, alternative = "two.sided")
wilcox.test(as.numeric(num$game_score), mu = 0, alternative = "two.sided")
```


```{r}
# AFEX PACKAGE FOR RUNNING RM ANOVA AND POST HOC TESTS ############################
library(afex)
a1 <- aov_car( block_score ~ game.f*block*condition + Error(human_id/(game.f*block)), dat2)
summary(a1)

## Note to Self: no need to worry abour the HF warning. You don't have pb with sphericity according to Mauchly tests, and the warning only applies to Huynh-Feldt corrections for violations of sphericity. 
```

```{r}
#Pair waise comparison and post hoc tests for the interaction: Game * Block using lsmeans 

# game score differences statistically significant?
(ls0 <- lsmeans(a1, "game.f"))
(lsm0 <- update(pairs(ls0, reverse = TRUE), by=NULL, adjust = "holm"))

# Pairwise comparison of first halves by game ( first half RPS vs first half WFG scores....)
(ls1 <- lsmeans(a1, "game.f", by="block"))
(lsm1 <- update(pairs(ls1, reverse = TRUE), by=NULL, adjust = "holm"))
plot(lsm1,by="block")
lsmip(a1, game.f ~ block)


# Pairwise comparison of each game score by block (first half RPS vs second half RPS....) + Control for family wise error:
ls2 <- lsmeans(a1, "block", by="game.f")
(lsm2 <- update(pairs(ls2, reverse = TRUE), by=NULL, adjust = "holm"))
plot(lsm2,by="game.f")
lsmip(a1, block ~ game.f)
lsmip(a1, ~ block * game.f)


# Pairwise comparison of scores facing the two types of players by game: 
lsc <- lsmeans(a1, "condition", by="game.f")
(lsmc <- update(pairs(lsc), by=NULL, adjust = "holm"))
plot(lsmc,by="game.f")
lsmip(a1, condition ~ game.f)


```

```{r}
#Pair waise comparison and post hoc tests : Game by Block and Condition



#library(multcompView)
#use cld to check for comparison pairs belonging to same group, meaning not significantly different from each other...
#cld(lsm4)


#plots
ls4 <- lsmeans(a1, "block",c("condition","game.f"))
ls4
(lsm4 <- update(pairs(ls4, reverse = TRUE), by=NULL, adjust = "holm"))
plot(lsm4,by="game.f")
lsmip(a1, game.f ~ condition | block)


# Interaction plot of game and block by condition 
lsmip(a1, game.f ~ block | condition)
lsmip(a1, condition ~ block * game.f)
```


```{r}
# Transfer harder for level2 opponent than when facing level 1 opponent? 
# learning to specifiy contrasts - 
# the below compares the score on each block and game for each type and tells me which scores belong to same group
# the idea is that if transfer is harder vs lvl2 player, then fwg first half score for lvl2 facing player should be sig lower than fwg first-half score vs lvl1 agent.not the case here as thye belong to same group.

(means.int <- lsmeans(a1, specs = c("game.f","block","condition")))
# compare first half (H1) scores in FWG for lvl 1 and lvl2 / same for NUM
con1 <- contrast(means.int, list(G1vG2forH1 = c(0,1,0,0,0,0,0,-1,0,0,0,0), G2vG3forh1=c(0,0,1,0,0,0,0,0,-1,0,0,0)))
summary(con1, adjust ="holm")

# Within game learning harder for level2 opponent than when facing level 1 opponent? compare differences between block for each game and type
con2 <- contrast(means.int, list(L2vL1forRPS = c(1,0,0,-1,0,0,-1,0,0,1,0,0), L2vL1forFWG=c(0,1,0,0,-1,0,0,-1,0,0,1,0), L2vL1forNUM=c(0,0,1,0,0,-1,0,0,-1,0,0,1)))
summary(con2, adjust ="holm")

```






```{r}

#looking at TRIALS 2 to 6 to test robustness of evidence for transfer of learning of opponent strategy #########

dat_26 <- subset(dat,round >1 & round <7, drop =TRUE)
dat2_6 <- dat_26 %>% 
  group_by(human_id,condition,game.f,confidence,difficulty) %>% 
      summarise(early_score = mean(score))

# Check group means and SDs
group_by(dat2_6, game.f) %>%
  summarise(
    count = n(),
    mean = mean(early_score, na.rm = TRUE),
    sd = sd(early_score, na.rm = TRUE)
    )

# testing differences between early scores across games 
library(afex)
aov_early <- aov_car(early_score ~ game.f*condition + Error(human_id/(game.f)),data=dat2_6)
summary(aov_early)

(ls4 <- lsmeans(aov_early, "game.f"))

(means.int2 <- lsmeans(aov_early, specs = c("game.f","condition")))

# compare early scores in FWG for lvl 1 and lvl2 / same for NUM

contrast(means.int2, list(G1vG2for26 = c(0,1,0,0,-1,0), G2vG3for26=c(0,0,1,0,0,-1)))
         
# Plot interactions for early rouns, condition by game

lsmip(aov_early, condition ~ game.f)


# plots overall effect by game :
ggboxplot(dat2_6,"game.f", "early_score", fill = "game.f",palette = c("#00AFBB", "#E7B800", "#FC4E07"),order = c("RPS","FWG","NUM"))

# Note to Self: possible future work exstension is to pick the guys who scored highly on the first rounds of the second game and fit the various learning models to them only. 
# Two ways to test learning: compare first half between games for different conditions 
# compare early score between games for different conditions 
# Check whteher confidence and difficulty  -> add them as covariates in big anova and early score anova *confidence*difficulty.... --> too hard to interpret 

# do a model comparison with model without confidence and difficulty -> start witn ANCOVA (try and see what happens with various interactions).  
```


```{r}
# adding confidence and difficulty feedback 
datcd <- dat %>% 
  group_by(human_id,condition,game.f,block,confidence,difficulty) %>% 
      summarise(block_score = mean(score))

# Transforming confidence into 2 lvl factor
datcd$confidence.f <- factor(as.numeric(cut(datcd$confidence,2)),labels =c("low conf", "high conf"))
summary(datcd$confidence.f)
table(datcd$confidence.f,datcd$condition)

# run RM anova using afex library (ran anova including difficulty as well but wasn't significant)
acd <- aov_car( block_score ~ game.f*block*condition + confidence.f + Error(human_id/(game.f*block)), datcd)
summary(acd)


(lsm6 <- lsmeans(acd, c("confidence.f","condition")))
update(pairs(lsm6, reverse = TRUE, adjust = "holm"), by=NULL)
plot(lsm6, by ="condition")
plot(lsm6, by ="confidence.f")
lsmip(acd, confidence.f ~ condition)

#  explore interaction block confidence
(lsm7 <- lsmeans(acd, c("confidence.f","block")))
(update(pairs(lsm7, reverse = TRUE, adjust = "holm"), by=NULL))
plot(lsm7, by ="confidence.f")
lsmip(acd, confidence.f ~ block)

#
(lsm8 <- lsmeans(acd, c("confidence.f","block","game.f")))
lsmip(acd, confidence.f ~ block*game.f)
# checking that low confidence NUMBERS play is not different from random play
con3 <- contrast(lsm8, list(G1vG2forconf = c(0,0,0,0,0,0,0,0,0,0,1,0)))
summary(con3, adjust ="holm")

# low and high confidence players have similar initial score in RPS
con4 <- contrast(lsm8, list(HCvLCforRPS = c(-1,1,0,0,0,0,0,0,0,0,0,0)))
summary(con4, adjust="holm")


```












