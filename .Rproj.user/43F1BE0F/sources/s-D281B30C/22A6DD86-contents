---
title: "opponent modelling"
author: "Maarten Speekenbrink"
date: "24 July 2018"
output: html_document
---

```{r setup, include=FALSE}
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
```

## Reading data

```{r}
dat <- read.csv("data20180719.csv")
```

## Preprosessing and transforming data

```{r}
# using some functions from the 'tidyverse' (also for me to get use to them ;-)
library(tidyr)
library(dplyr)
# transform 'winner' variable in numeric score
dat$score <- recode(dat$winner, human = 1, tie = 0, ai = -1)
# create a new variable 'block' with round 1...25 = block 1 and round 26...50 as block 2
dat$block <- as.numeric(cut(dat$round,2))
# create a new data.frame in a 'wide format'
widedata <- dat %>% 
  unite(game_block,game,block) %>% # this creates a new variable which combines game and block
    group_by(human_id,condition,game_block) %>% # let the functions know you want to separate things by ID, condition, and game_block
      summarize(mean_score = mean(score)) %>% # compute average score (i.e wins - losses)
        spread(game_block,mean_score) # reformat in the 'wide' format
# save the data file as a .csv to use in e.g. SPSS
write.csv(widedata,row.names=FALSE,file="scores_wide.csv")

```

## Modelling

```{r estimate-models, cache=TRUE}
# read in the various files which 
rps_predict <- read.csv("rps_predict.csv")
fwg_predict <- read.csv("fwg_predict.csv")
numbers_predict <- read.csv("numbers_predict.csv")

# recode actions to make them equal to the codes in these files
dat$h_action <- recode(dat$human_action,"rock" = "R", "paper" = "P", "scissors" = "S", "fire" = "F", "water" = "W", "grass" = "G", "one" = "1", "two" = "2", "three" = "3", "four" = "4", "five" = "5")
dat$a_action <- recode(dat$ai_action,"rock" = "R", "paper" = "P", "scissors" = "S", "fire" = "F", "water" = "W", "grass" = "G", "one" = "1", "two" = "2", "three" = "3", "four" = "4", "five" = "5")

# logit tranformation
my_logit <- function(x) {
  ret <- log(x/(1-x))
  ret[x==0] <- -Inf
  ret[x==1] <- Inf 
  return(ret)
}

# inverse logit transformation
my_logistic <- function(x) {
  ret <- 1/(1+exp(-x))
  ret[x == -Inf] <- 0.0
  ret[x == Inf] <- 1.0
  return(ret)
}
  

# create a function which computes the -2 log Likelihood over the three games for a particular strategy
modelLL <- function(par,data,strategy, return_value=c("-2logLik","likelihood_by_trial")) {
  # par = parameter vector (just has one element here) 
  # dat = data subset for one participant
  # strategy = c("level1","level2","level3","WSLS")
  # return = -2logLik (default, for use in optimization) or "likelihood_by_trial" (for later plotting, etc)
  return_value <- match.arg(return_value)
  
  # count the number of supplied parameters. If 1, it is a _1 model, 
  # if 3, it is a _3 model. For the _3 model we will use unbounded
  # optimization (transforming parameters from a logit scale back to 0 to 1)
  n_theta <- length(par)
  if(n_theta == 3) par <-my_logistic(par)
  theta <- par[1]
  # set up a vector to store the likelihood
  lik <- rep(0.0,nrow(data))
  for(t in 1:nrow(data)) {
    t_game <- data[t,"game"]
    pred_file <- switch(as.character(t_game),rps=rps_predict,fwg = fwg_predict, numbers = numbers_predict)
    if(n_theta == 3) {
      theta <- switch(as.character(t_game),rps=par[1],fwg = par[2], numbers = par[3])
    }
    if(t_game == "numbers") nopts <- 5 else nopts <- 3
    if(data[t,"round"] == 1) {
      # first round is uniform prediction
      pred <- NA
      lik[t] <- 1/nopts
    } else {
      # get prediction from file
      pred <- as.character(filter(pred_file,human_previous == as.character(data[t-1,"h_action"]) & computer_previous == as.character(data[t-1,"a_action"]))[strategy][1,])
      if(as.character(data[t,"h_action"]) == pred) {
        lik[t] <- theta + (1-theta)/nopts
      } else {
        lik[t] <- (1-theta)/nopts
      }
    }
    # for debugging uncomment the line below
    # cat(as.character(pred),as.character(data[t,"h_action"]),lik[t],"\n")
  }
  if(return_value == "-2logLik") {
    ret <- -2*sum(log(lik))
    if(ret == Inf) {
      return(1e+300)
    } else {
      return(ret)
    }
  }
  if(return_value == "likelihood_by_trial") return(lik)
}

all_modelling <- list()
for(id in unique(dat$human_id)) {
  all_modelling[[id]] <- list()
  tdat <- subset(dat,human_id == id)
  # level 1
  all_modelling[[id]]$level1_1 <- optimize(modelLL,interval=c(0,1),data=tdat,strategy="level1")
  all_modelling[[id]]$level1_3 <- optim(my_logit(rep(all_modelling[[id]]$level1_1$minimum,3)),fn=modelLL,data=tdat,strategy="level1")
  # level 2
  all_modelling[[id]]$level2_1 <- optimize(modelLL,interval=c(0,1),data=tdat,strategy="level2")
  all_modelling[[id]]$level2_3 <- optim(my_logit(rep(all_modelling[[id]]$level2_1$minimum,3)),fn=modelLL,data=tdat,strategy="level2")
  # level 3
  all_modelling[[id]]$level3_1 <- optimize(modelLL,interval=c(0,1),data=tdat,strategy="level3")
  all_modelling[[id]]$level3_3 <- optim(my_logit(rep(all_modelling[[id]]$level3_1$minimum,3)),fn=modelLL,data=tdat,strategy="level3")
  # WSLS
  all_modelling[[id]]$WSLS_1 <- optimize(modelLL,interval=c(0,1),data=tdat,strategy="WSLS")
  all_modelling[[id]]$WSLS_3 <- optim(my_logit(rep(all_modelling[[id]]$WSLS_1$minimum,3)),fn=modelLL,data=tdat,strategy="WSLS")
}

save(all_modelling,file="all_modelling.RData")

```

```{r}
# create a table with BIC
BIC_results <- data.frame()
for(id in unique(dat$human_id)) {
    BIC_results <- rbind(BIC_results,
                         data.frame(
                           "id" = id,
                           "condition" = dat[dat$human_id==id,"condition"][1],
                           "random_BIC" = -2*(100*log(1/3) + 50*log(1/5)), 
                           "level1_1_theta" = all_modelling[[id]]$level1_1$minimum,
                           "level1_1_BIC" = all_modelling[[id]]$level1_1$objective + 1*log(150),
                           "level1_3_theta1" = my_logistic(all_modelling[[id]]$level1_3$par[1]),
                           "level1_3_theta2" = my_logistic(all_modelling[[id]]$level1_3$par[2]),
                           "level1_3_theta3" = my_logistic(all_modelling[[id]]$level1_3$par[3]),
                           "level1_3_BIC" = all_modelling[[id]]$level1_3$value + 3*log(150),
                           "level2_1_theta" = all_modelling[[id]]$level2_1$minimum,
                           "level2_1_BIC" = all_modelling[[id]]$level2_1$objective + 1*log(150),
                           "level2_3_theta1" = my_logistic(all_modelling[[id]]$level2_3$par[1]),
                           "level2_3_theta2" = my_logistic(all_modelling[[id]]$level2_3$par[2]),
                           "level2_3_theta3" = my_logistic(all_modelling[[id]]$level2_3$par[3]),
                           "level2_3_BIC" = all_modelling[[id]]$level2_3$value + 3*log(150),
                           "level3_1_theta" = all_modelling[[id]]$level3_1$minimum,
                           "level3_1_BIC" = all_modelling[[id]]$level3_1$objective + 1*log(150),
                           "level3_3_theta1" = my_logistic(all_modelling[[id]]$level3_3$par[1]),
                           "level3_3_theta2" = my_logistic(all_modelling[[id]]$level3_3$par[2]),
                           "level3_3_theta3" = my_logistic(all_modelling[[id]]$level3_3$par[3]),
                           "level3_3_BIC" = all_modelling[[id]]$level3_3$value + 3*log(150),
                           "WSLS_1_theta" = all_modelling[[id]]$WSLS_1$minimum,
                           "WSLS_1_BIC" = all_modelling[[id]]$WSLS_1$objective + 1*log(150),
                           "WSLS_3_theta1" = my_logistic(all_modelling[[id]]$WSLS_3$par[1]),
                           "WSLS_3_theta2" = my_logistic(all_modelling[[id]]$WSLS_3$par[2]),
                           "WSLS_3_theta3" = my_logistic(all_modelling[[id]]$WSLS_3$par[3]),
                           "WSLS_3_BIC" = all_modelling[[id]]$WSLS_3$value + 3*log(150)
                         ))
}
write.csv(BIC_results,file="BIC_result.csv",row.names = FALSE)
kable(BIC_results)
```

```{r}

# create a table with best fitting models by condition
table(dat$condition[dat$round==1 & dat$game == "rps"],c("random","level1_1","level2_1","level3_1","WSLS_1","level1_3","level2_3","level3_3","WSLS_3")[apply(BIC_results[,c("random_BIC","level1_1_BIC","level2_1_BIC","level3_1_BIC","WSLS_1_BIC","level1_3_BIC","level2_3_BIC","level3_3_BIC","WSLS_3_BIC")],1,which.min)])

## treat 1 theta and 3 theta versions the same
# create a table with best fitting models by condition
table(dat$condition[dat$round==1 & dat$game == "rps"],c("random","level1","level2","level3","WSLS","level1","level2","level3","WSLS")[apply(BIC_results[,c("random_BIC","level1_1_BIC","level2_1_BIC","level3_1_BIC","WSLS_1_BIC","level1_3_BIC","level2_3_BIC","level3_3_BIC","WSLS_3_BIC")],1,which.min)])



```


## Likelihood of the different models by trial

This plot ks based on the three parameter versions of each strategy, and shows the average probability according to each model of participants' choices. It can be seen that, compared to the RPS game, where the fit grows slowly over trials, the fit in the later games increases much more rapidly.

```{r}
long_likelihood_by_trial <- data.frame()
for(id in unique(dat$human_id)) {
  tdat <- subset(dat,human_id == id)
  for(strategy in c("level1","level2","level3","WSLS")) {
    long_likelihood_by_trial <- rbind(long_likelihood_by_trial,
                                      data.frame(id = id,
                                                 condition = dat[dat$human_id==id,"condition"][1],
                                                 strategy = strategy,
                                                 round = 1:50,
                                                 game = rep(c("rps","fwg","numbers"),each=50),
                                                 likelihood = modelLL(all_modelling[[id]][[paste(strategy,"_3",sep="")]]$par,
                                                                      data=tdat,
                                                                      strategy = strategy,
                                                                      return_value = "likelihood_by_trial")
                                      )
                                )
  }
}
library(ggplot2)
plot_dat <- long_likelihood_by_trial %>% group_by(condition,game,round,strategy) %>%
      summarize(probability = mean(likelihood))
# make sure the different games are ordered in the way they were played
plot_dat$game <- factor(plot_dat$game,levels=c("rps","fwg","numbers"))
ggplot(plot_dat,aes(x=round,y=probability,colour=strategy)) + geom_line() + facet_grid(game~condition)
```