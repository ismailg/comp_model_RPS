# create a new variable "game.f" as a factor variable of games
dat1$game.f <- factor(dat1$game, labels = c("RPS","FWG","Numbers"),levels=c("rps","fwg","numbers"))
#Group data by human_id and calculate mean score per block of each game.
dat2 <- dat1 %>%
group_by(human_id,condition,game,block,game.f) %>%
summarize(block_score = mean(score))
dat2 %>%
mutate(game = factor(game)) %>%
mutate(game = forcats::fct_recode(game, RPS = "rps", FWG = "fwg", Numbers = "numbers")) %>%
mutate(game = factor(game, levels = c("RPS", "FWG", "Numbers"))) %>%
mutate(condition = factor(condition, levels = c("Level1", "Level2"))) %>%
mutate(condition = forcats::fct_recode(condition, "Level 1" = "Level1", "Level 2" = "Level2")) %>%
ggplot(aes(x = game, y = block_score, colour = block)) + stat_summary(fun.data = "mean_ci", position = position_dodge2(width=.8), geom = "crossbar")  + geom_point(position=position_jitterdodge(), alpha=.4) + ylab("Score") + xlab("Game") + facet_grid(. ~ condition) + theme_apa() + geom_hline(yintercept = 0, lty=2)
dat2 %>%
mutate(game = forcats::fct_recode(as.factor(game), RPS = "rps", FWG = "fwg", Numbers = "numbers")) %>%
mutate(condition = factor(condition, levels = c("Level1", "Level2"))) %>%
mutate(condition = forcats::fct_recode(condition, "Level 1" = "Level1", "Level 2" = "Level2")) %>%
ggboxplot(x = "game", y = "block_score", palette = c("#00AFBB", "#E7B800"),order = c("RPS", "FWG","Numbers"), fill="block", ylab = "Percentage score", xlab = "Games") +  facet_grid(. ~ condition)
mod1 <- mixed(block_score ~ game.f*condition*block + (1 | human_id),data=dat2,check_contrasts = FALSE, type = 3, method = "KR")
summary(mod1)
mod1
mod1 <- mixed(block_score ~ game.f*condition*block + (1 | human_id),data=dat2,check_contrasts = FALSE, type = 3, method = "KR")
summary(mod1)
mod1
# Get effect sizes from F values
F_to_eta2(12.9, 2, 250)
# Get effect sizes from F values
library(lmerTest)
F_to_eta2(12.9, 2, 250)
library(effectsize)
install.packages(effectsize)
install.packages("effectsize")
library(effectsize)
F_to_eta2(12.9, 2, 250)
F_to_eta2(5.44, 1, 50)
F_to_eta2(15.16, 1, 250)
F_to_eta2(4.52, 2, 250)
mod1 <- mixed(block_score ~ game.f*condition*block + (1 | human_id),data=dat2,check_contrasts = FALSE, type = 3, method = "KR")
summary(mod1)
mod1
# Get effect sizes from F values
library(effectsize)
F_to_eta2(12.9, 2, 250)
F_to_eta2(5.44, 1, 50)
F_to_eta2(15.16, 1, 250)
F_to_eta2(4.52, 2, 250)
mod1 <- mixed(block_score ~ game.f*condition*block + (1 | human_id),data=dat2,check_contrasts = FALSE, type = 3, method = "KR")
#summary(mod1)
mod1
# Get effect sizes from F values
library(effectsize)
F_to_eta2(12.9, 2, 250)
F_to_eta2(5.44, 1, 50)
F_to_eta2(15.16, 1, 250)
F_to_eta2(4.52, 2, 250)
mod2 <- mixed(int_score ~ game.f*interaction_lvl*condition.f*opp_type + (1 | human_id),data=dat_int,check_contrasts = FALSE, type = 3, method = "KR")
#summary(mod1)
mod2
mod2 <- mixed(int_score ~ game.f*interaction_lvl*condition.f*opp_type + (1 | human_id),data=dat_int,check_contrasts = FALSE, type = 3, method = "KR")
#summary(mod2)
mod2
F_to_eta2(15.32,2,528)
F_to_eta2(5.78,2,528)
# Plot results by game and block (for all 3 games, learning is happening)
dat2 %>%
mutate(game = forcats::fct_recode(as.factor(game), RPS = "rps", FWG = "fwg", Numbers = "numbers")) %>%
mutate(condition = factor(condition, levels = c("Level1", "Level2"))) %>%
mutate(condition = forcats::fct_recode(condition, "Level 1" = "Level1", "Level 2" = "Level2")) %>%
ggboxplot(x = "game", y = "block_score", palette = c("#00AFBB", "#E7B800"),order = c("RPS", "FWG","Numbers"), fill="block", ylab = "Percentage score", xlab = "Games") +  facet_grid(. ~ condition)
dat_26 <- subset(dat1,round >1 & round <7, drop =TRUE)
exp1_dat2_6 <- dat_26 %>%
group_by(human_id,condition,game.f,confidence,difficulty) %>%
summarise(early_score = mean(score))
# Check group means and SDs by game and condition
group_by(exp1_dat2_6, game.f,condition) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
library(afex)
# setting contrast to compare early score between games across levels
contrasts(exp1_dat2_6$game.f) <- cbind(c(1,-1,0),c(0,-1,1))
contrasts(exp1_dat2_6$condition) <- c(1,-1)
# Mixed effects Model: Random intercept for participants
lme_early <- mixed(early_score ~ game.f*condition + (1 | human_id),data=exp1_dat2_6,check_contrasts = FALSE, type = 3, method = "KR")
summary(lme_early)
lme_early
library(afex)
# setting contrast to compare early score between games across levels
contrasts(exp1_dat2_6$game.f) <- cbind(c(1,-1,0),c(0,-1,1))
contrasts(exp1_dat2_6$condition) <- c(1,-1)
# Mixed effects Model: Random intercept for participants
lme_early <- mixed(early_score ~ game.f*condition + (1 | human_id),data=exp1_dat2_6,check_contrasts = FALSE, type = 3, method = "KR")
summary(lme_early)
lme_early
install.packages("rmarkdown", repos = "https://packagemanager.rstudio.com/all/latest")
install.packages("rmarkdown", repos = "https://packagemanager.rstudio.com/all/latest")
install.packages("rmarkdown", repos = "https://packagemanager.rstudio.com/all/latest")
install.packages("rmarkdown", repos = "https://packagemanager.rstudio.com/all/latest")
install.packages("rmarkdown", repos = "https://packagemanager.rstudio.com/all/latest")
install.packages("rmarkdown", repos = "https://packagemanager.rstudio.com/all/latest")
install.packages("rmarkdown", repos = "https://packagemanager.rstudio.com/all/latest")
devtools::install_github("crsh/papaja")
library(papaja)
library(kableExtra)
require(knitr)
require(citr)
require(bookdown)
# using some functions dplyr, ggpubr, PairedData and sjPlot. Need to be loaded.
library(plyr)
library(tidyr)
library(dplyr)
library(MASS)
library(ggpubr)
library(afex)
library(PairedData)
library(multcompView)
library(lsmeans)
library(magick)
library(depmixS4)
# Seed for random number generation
set.seed(42)
options(tinytex.verbose = TRUE)
#add_wordcount_filter(NULL, error = FALSE)
knitr::include_graphics("images/feedback_rps.png")
dat1 <- read.csv("../data20180719.csv")
# transform 'winner' variable in numeric score
dat1$score <- recode(dat1$winner, human = 1, tie = 0, ai = -1)
# create a new variable 'block' with round 1...25 = block 1 and round 26...50 as block 2
dat1$block <- factor(as.numeric(cut(dat1$round,2)),labels =c("first half", "second half"))
# create a new variable "game.f" as a factor variable of games
dat1$game.f <- factor(dat1$game, labels = c("RPS","FWG","Numbers"),levels=c("rps","fwg","numbers"))
#Group data by human_id and calculate mean score per block of each game.
dat2 <- dat1 %>%
group_by(human_id,condition,game,block,game.f) %>%
summarize(block_score = mean(score))
# Group data by game and ID
dat3 <- group_by(dat2, human_id,game.f,game) %>% summarise(game_score = mean(block_score))
# head(dat3,6)
# Subsetting scores data by game
rps <- subset(dat3,  game.f == "RPS",game_score)
fwg <- subset(dat3,  game.f == "FWG",game_score)
num <- subset(dat3,  game.f == "Numbers",game_score)
# head(rps,6)
# Plot average  scores per game
dat2 %>%
mutate(game = factor(game)) %>%
mutate(game = forcats::fct_recode(game, RPS = "rps", FWG = "fwg", Numbers = "numbers")) %>%
mutate(game = factor(game, levels = c("RPS", "FWG", "Numbers"))) %>%
mutate(condition = factor(condition, levels = c("Level1", "Level2"))) %>%
mutate(condition = forcats::fct_recode(condition, "Level 1" = "Level1", "Level 2" = "Level2")) %>%
ggplot(aes(x = game, y = block_score, colour = block)) + stat_summary(fun.data = "mean_ci", position = position_dodge2(width=.8), geom = "crossbar")  + geom_point(position=position_jitterdodge(), alpha=.4) + ylab("Score") + xlab("Game") + facet_grid(. ~ condition) + theme_apa() + geom_hline(yintercept = 0, lty=2)
# Plot results by game and block (for all 3 games, learning is happening)
dat2 %>%
mutate(game = forcats::fct_recode(as.factor(game), RPS = "rps", FWG = "fwg", Numbers = "numbers")) %>%
mutate(condition = factor(condition, levels = c("Level1", "Level2"))) %>%
mutate(condition = forcats::fct_recode(condition, "Level 1" = "Level1", "Level 2" = "Level2")) %>%
ggboxplot(x = "game", y = "block_score", palette = c("#00AFBB", "#E7B800"),order = c("RPS", "FWG","Numbers"), fill="block", ylab = "Percentage score", xlab = "Games") +  facet_grid(. ~ condition)
# tmp <- afex::aov_car(
#   block_score ~ game.f*condition*block + Error(human_id/(game.f*block))
#   , data=dat2
#   , type = 3)
mod1 <- mixed(block_score ~ game.f*condition*block + (1 | human_id),data=dat2,check_contrasts = FALSE, type = 3, method = "KR")
#summary(mod1)
mod1
# Get effect sizes from F values of mixed effect model
library(effectsize)
F_to_eta2(12.9, 2, 250)
F_to_eta2(5.44, 1, 50)
F_to_eta2(15.16, 1, 250)
F_to_eta2(4.52, 2, 250)
#apa_lm1 <- apa_print(exp1_early_anova)
#means.int2 <- lsmeans(exp1_early_anova, specs = c("game.f","condition"))
#trans26 <- summary(means.int2, infer = c(TRUE,TRUE),level = .95, adjust = "holm",ref=c("FWG","Numbers"))
mod1
lsmeans(mod1, pairwise~game.f*condition, adjust="tukey")
library(emmeans)
emm = emmeans(mod1, ~ game.f*condition)
pairs(emm)
lme_early2
# tmp <- afex::aov_car(
#   block_score ~ game.f*condition*block + Error(human_id/(game.f*block))
#   , data=dat2
#   , type = 3)
#apa_lm1 <- apa_print(exp1_early_anova)
#means.int2 <- lsmeans(exp1_early_anova, specs = c("game.f","condition"))
#trans26 <- summary(means.int2, infer = c(TRUE,TRUE),level = .95, adjust = "holm",ref=c("FWG","Numbers"))
mod1 <- mixed(block_score ~ game.f*condition*block + (1 | human_id),data=dat2,check_contrasts = FALSE, type = 3, method = "KR")
#summary(mod1)
mod1
lsmeans(mod1, pairwise~game.f*condition, adjust="tukey")
library(emmeans)
emm = emmeans(mod1, ~ game.f*condition)
pairs(emm)
# Get effect sizes from F values of mixed effect model
library(effectsize)
F_to_eta2(12.9, 2, 250)
F_to_eta2(5.44, 1, 50)
F_to_eta2(15.16, 1, 250)
F_to_eta2(4.52, 2, 250)
lsmeans(mod1, pairwise~game.f*condition, adjust="tukey")
lsmeans(lme_early2, pairwise~game.f*opp_type, adjust="tukey")
lme_early2
summary(lme_early2)
lsmeans(lme_early2, pairwise~game.f*opp_type, adjust="holm")
lsmeans(lme_early2, pairwise~game.f*opp_type, adjust="holm")
lsmeans(lme_early2, pairwise~game.f*opp_type, adjust="tukey")
lsmeans(lme_early2, pairwise~game.f*opp_type, adjust="holm")
lsmeans(lme_early2, pairwise~game.f, adjust="holm")
lsmeans(lme_early2, pairwise~game.f*opp_type, adjust="holm")
library(emmeans)
emm = emmeans(mod1, ~ game.f*condition)
pairs(emm)
lsmeans(mod1, ~ game.f |condition, adjust="tukey")
mod.lsm <- lsmeans(mod1, ~ game.f |condition, adjust="tukey")
pairs(mod.lsm)
pairs(mod.lsm)
contrast(mod.lsm, method = "poly", by = "condition")
contrast(mod.lsm,  by = "condition")
contrast(mod.lsm,  by = "game.f")
contrast(mod.lsm,  by = "condition")
contrast(mod.lsm, simple = "each")
contrast(mod.lsm, "consec",simple = "each",combine = TRUE, adjust = "mvt")
IC_st <- contrast(mod.lsm, interaction = c("game.f", "condition"), by = NULL)
contrast(emm_s.t[[1]], interaction = c("game.f", "condition"), by = NULL)
contrast(mod.lsm, interaction = c("game.f", "condition"), by = NULL)
contrast(mod.lsm, interaction = c("game.f", "condition"), by = NULL)
contrast(mod.lsm, "consec",simple = "each",combine = TRUE, adjust = "mvt")
contrast(mod.lsm, interaction = c("game.f", "condition"), by = NULL)
emmeans(mod1, pairwise~game.f*condition, adjust="tukey")
mod.lsm <- emmeans(mod1, ~ game.f |condition, adjust="tukey")
contrast(mod.lsm, interaction = c("game.f", "condition"), by = NULL)
mod.lsm <- emmeans(mod1, ~ game.f |condition, adjust="tukey")
pairs(mod.lsm)
contrast(mod.lsm, "consec",simple = "each",combine = TRUE, adjust = "mvt")
contrast(mod.lsm, interaction = c("game.f", "condition"), by = NULL)
mod.lsm <- lsmeans(mod1, ~ game.f |condition, adjust="tukey")
pairs(mod.lsm)
contrast(mod.lsm, "consec",simple = "each",combine = TRUE, adjust = "mvt")
contrast(mod.lsm, interaction = c("game.f", "condition"), by = NULL)
contrast(mod.lsm, interaction = c("game.f", "condition"))
mod.lsm <- lsmeans(mod1, ~ game.f |condition, adjust="tukey")
pairs(mod.lsm)
contrast(mod.lsm, interaction = c("game.f", "condition"))
mod.lsm <- lsmeans(mod1, ~ game.f*condition, adjust="tukey")
contrast(mod.lsm, interaction = c("game.f", "condition"))
contrast(mod.lsm, "consec",simple = "each",combine = TRUE, adjust = "mvt")
contrast(mod.lsm, "consec",simple = "each",combine = TRUE, adjust = "tukey")
update(pairs(mod.lsm, by = "condition"), by = NULL)
"
update(pairs(mod.lsm, by = c("condition", "game.f"), by = NULL))
update(pairs(mod.lsm, by = c("condition", "game.f"), by = NULL))
update(pairs(mod.lsm, by = c("condition"), by = NULL))
update(pairs(mod.lsm, by = "condition", by = NULL))
update(pairs(mod.lsm, by = "condition", by = NULL))
mod.lsm <- lsmeans(mod1, ~ game.f*condition, adjust="tukey")
update(pairs(mod.lsm, by = "condition", by = NULL))
update(pairs(mod.lsm, by = "condition"), by = NULL)
cld(org.vardiff)
?cld
??cld
library(multicomp)
istall.packages("multicomp")
install.packages("multicomp")
library(papaja)
library(kableExtra)
require(knitr)
require(citr)
require(bookdown)
# using some functions dplyr, ggpubr, PairedData and sjPlot. Need to be loaded.
library(plyr)
library(tidyr)
library(dplyr)
library(MASS)
library(ggpubr)
library(afex)
library(PairedData)
library(multcompView)
library(multicomp)
library(multicomp)
install.packages("multicomp")
install.packages("multcomp")
library(papaja)
library(kableExtra)
require(knitr)
require(citr)
require(bookdown)
# using some functions dplyr, ggpubr, PairedData and sjPlot. Need to be loaded.
library(plyr)
library(tidyr)
library(dplyr)
library(MASS)
library(ggpubr)
library(afex)
library(PairedData)
library(multcompView)
library(multcomp)
library(lsmeans)
library(magick)
library(depmixS4)
cld(org.vardiff)
diff <- update(pairs(mod.lsm, by = "condition"), by = NULL)
cld(diff)
diff <- update(pairs(mod.lsm, by = "condition"), by = NULL)
cld(diff)
diff <- update(pairs(mod.lsm, by = "condition"), by = NULL)
cld(diff)
diff <- update(pairs(mod.lsm, by = "condition"), by = NULL)
diff <- update(pairs(mod.lsm, by = "condition"), by = NULL)
diff
mod.lsm <- lsmeans(mod1, ~ game.f*condition, adjust="holm")
mod.lsm <- lsmeans(mod1, ~ game.f*condition, adjust="holm")
#contrast(mod.lsm, "consec",simple = "each",combine = TRUE, adjust = "tukey")
contrast(mod.lsm, interaction = c("game.f", "condition"))
install.packages("webshot")
webshot::install_phantomjs()
install.packages("webshot")
knitr::opts_chunk$set(echo = TRUE)
df <- data.fram( "Human action t-1" = c("Rock","Paper"), "Agent action t-1" = c("Paper","Scissors"))
df <- data.frame( "Human action t-1" = c("Rock","Paper"), "Agent action t-1" = c("Paper","Scissors"))
kable(df)
df <- data.frame( "Human action t-1" = c("Rock","Paper"), "Agent action t-1" = c("Paper","Scissors"))
knitr::kable(df)
df <- data.frame( c("Rock","Paper"), c("Paper","Scissors"), colNames = c("Human action t-1","Agent action t-1"))
knitr::kable(df)
df
df <- data.frame( c("Rock","Paper"), c("Paper","Scissors"))
colNames(df) <- c("Human action t-1","Agent action t-1")
df <- data.frame( c("Rock","Paper"), c("Paper","Scissors"))
colnames(df) <- c("Human action t-1","Agent action t-1")
knitr::kable(df)
df <- data.frame( c("Paper","Scissors","Rock"),
c("Rock","Scissors","Paper"),
c("Scissors","Rock","Paper"),
c("Scissors","Paper","Rock"))
colnames(df) <- c("Human action t-1","Computer action t-1","Computer level-1 action t", "Human level-1 action t")
knitr::kable(df)
df <- data.frame( c("Paper","Scissors","Rock","..."),
c("Rock","Scissors","Paper","..."),
c("Scissors","Rock","Paper","..."),
c("Scissors","Paper","Rock","..."))
colnames(df) <- c("Human action t-1","Computer action t-1","Computer level-1 action t", "Human level-1 action t")
knitr::kable(df)
df <- data.frame( c("Paper","Scissors","Rock","..."),
c("Rock","Scissors","Paper","..."),
c("Scissors","Rock","Paper","..."),
c("Scissors","Paper","Rock","..."))
colnames(df) <- c("Human action t-1","Computer action t-1","Computer level-1 action t", "Human level-1 action t")
knitr::kable(df, caption = "Title of the table")
df <- data.frame( c("Paper","Scissors","Rock","..."),
c("Rock","Scissors","Paper","..."),
c("Scissors","Rock","Paper","..."),
c("Scissors","Paper","Rock","..."))
colnames(df) <- c("Human action t-1","Computer action t-1","Computer level-1 action t", "Human level-1 action t")
knitr::kable(df, caption = "Example of how a level-1 and level-2 computer agent plays in response to actions taken in the previous round")
df <- data.frame( c("Paper","Scissors","Rock","..."),
c("Rock","Scissors","Paper","..."),
c("Scissors","Rock","Paper","..."),
c("Scissors","Paper","Rock","..."))
colnames(df) <- c("Human action t-1","Computer action t-1","Computer level-1 action t", "Human level-1 action t")
knitr::kable(df, caption = "Example of how a level-1 and level-2 computer agent plays in response to actions taken in the previous round")
install.packages("flextable")
library(flextable)
df <- data.frame( c("Paper","Scissors","Rock","..."),
c("Rock","Scissors","Paper","..."),
c("Scissors","Rock","Paper","..."),
c("Scissors","Paper","Rock","..."))
colnames(df) <- c("Human action t-1","Computer action t-1","Computer level-1 action t", "Human level-1 action t")
df <- flextable(df)
ft <- autofit(ft)
library(flextable)
df <- data.frame( c("Paper","Scissors","Rock","..."),
c("Rock","Scissors","Paper","..."),
c("Scissors","Rock","Paper","..."),
c("Scissors","Paper","Rock","..."))
colnames(df) <- c("Human action t-1","Computer action t-1","Computer level-1 action t", "Human level-1 action t")
df <- flextable(df)
df <- autofit(df)
ft
library(flextable)
df <- data.frame( c("Paper","Scissors","Rock","..."),
c("Rock","Scissors","Paper","..."),
c("Scissors","Rock","Paper","..."),
c("Scissors","Paper","Rock","..."))
colnames(df) <- c("Human action t-1","Computer action t-1","Computer level-1 action t", "Human level-1 action t")
df <- flextable(df)
df <- autofit(df)
df
knitr::kable(df, caption = "Example of how a level-1 and level-2 computer agent plays in response to actions taken in the previous round")
knitr::opts_chunk$set(echo = FALSE)
library(flextable)
df <- data.frame( c("Paper","Scissors","Rock","..."),
c("Rock","Scissors","Paper","..."),
c("Scissors","Rock","Paper","..."),
c("Scissors","Paper","Rock","..."))
colnames(df) <- c("Human action t-1","Computer action t-1","Computer level-1 action t", "Human level-1 action t")
df <- flextable(df)
df <- autofit(df)
df
#knitr::kable(df, caption = "Example of how a level-1 and level-2 computer agent plays in response to actions taken in the previous round")
library(flextable)
df <- data.frame( c("Paper","Scissors","Rock","..."),
c("Rock","Scissors","Paper","..."),
c("Scissors","Rock","Paper","..."),
c("Scissors","Paper","Rock","..."))
colnames(df) <- c("Human action t-1","Computer action t-1","Computer level-1 action t", "Human level-1 action t")
df <- flextable(df)
df <- autofit(df)
library(flextable)
df <- data.frame( c("Paper","Scissors","Rock","..."),
c("Rock","Scissors","Paper","..."),
c("Scissors","Rock","Paper","..."),
c("Scissors","Paper","Rock","..."))
colnames(df) <- c("Human action t-1","Computer action t-1","Computer level-1 action t", "Human level-1 action t")
df <- flextable(df)
df <- autofit(df)
library(flextable)
df <- data.frame( c("Paper","Scissors","Rock","..."),
c("Rock","Scissors","Paper","..."),
c("Scissors","Rock","Paper","..."),
c("Scissors","Paper","Rock","..."))
colnames(df) <- c("Human action t-1","Computer action t-1","Computer level-1 action t", "Human level-1 action t")
df <- flextable(df)
df <- autofit(df)
df
install.packages("rticles")
knitr::opts_knit$set(root.dir = '../Report')
94/143
set_flextable_defaults(fonts_ignore=TRUE)
knitr::opts_knit$set(root.dir = '../Report')
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(out.width = "\\textwidth")
library(flextable)
df <- data.frame( c("Paper","Scissors","Rock","..."),
c("Rock","Scissors","Paper","..."),
c("Scissors","Rock","Paper","..."),
c("Scissors","Paper","Rock","..."))
colnames(df) <- c("Human action t-1","Computer action t-1","Computer level-1 action t", "Computer level-2 action t")
knitr::kable(df,booktabs = TRUE,
caption = 'A table of the first 10 rows of the mtcars data.')
# df <- flextable(df)
# df <- set_caption(df, "Example of how a level-1 and level-2 computer agent plays in response to actions taken in the previous round")
#   autonum = run_autonum(seq_id = "tab", bkm = "actions"))
# df <- autofit(df)
# df
library(flextable)
df <- data.frame( c("Paper","Scissors","Rock","..."),
c("Rock","Scissors","Paper","..."),
c("Scissors","Rock","Paper","..."),
c("Scissors","Paper","Rock","..."))
colnames(df) <- c("Human action t-1","Computer action t-1","Computer level-1 action t", "Computer level-2 action t")
knitr::kable(df,booktabs = TRUE,
caption = 'A table of the first 10 rows of the mtcars data.')
df2 <- flextable(df)
# df <- set_caption(df, "Example of how a level-1 and level-2 computer agent plays in response to actions taken in the previous round")
#   autonum = run_autonum(seq_id = "tab", bkm = "actions"))
# df <- autofit(df)
df2
library(flextable)
df <- data.frame( c("Paper","Scissors","Rock","..."),
c("Rock","Scissors","Paper","..."),
c("Scissors","Rock","Paper","..."),
c("Scissors","Paper","Rock","..."))
colnames(df) <- c("Human action t-1","Computer action t-1","Computer level-1 action t", "Computer level-2 action t")
knitr::kable(df,booktabs = TRUE,
caption = 'A table of the first 10 rows of the mtcars data.')
# df <- flextable(df)
# df <- set_caption(df, "Example of how a level-1 and level-2 computer agent plays in response to actions taken in the previous round")
#   autonum = run_autonum(seq_id = "tab", bkm = "actions"))
# df <- autofit(df)
# df
?kable
library(flextable)
df <- data.frame( c("Paper","Scissors","Rock","..."),
c("Rock","Scissors","Paper","..."),
c("Scissors","Rock","Paper","..."),
c("Scissors","Paper","Rock","..."))
colnames(df) <- c("Human action t-1","Computer action t-1","Computer level-1 action t", "Computer level-2 action t")
knitr::kable(df,booktabs = TRUE,
caption = 'Example of how a level-1 and level-2 computer agent plays in response to actions taken in the previous round', ) %>% kable_styling(latex_options="scale_down")
library(papaja)
library(kableExtra)
require(knitr)
require(citr)
require(bookdown)
# using some functions dplyr, ggpubr, PairedData and sjPlot. Need to be loaded.
library(plyr)
library(tidyr)
library(dplyr)
library(MASS)
library(ggpubr)
library(afex)
library(PairedData)
library(multcompView)
library(lsmeans)
library(magick)
library(depmixS4)
library(flextable)
library(flextable)
df <- data.frame( c("Paper","Scissors","Rock","..."),
c("Rock","Scissors","Paper","..."),
c("Scissors","Rock","Paper","..."),
c("Scissors","Paper","Rock","..."))
colnames(df) <- c("Human action t-1","Computer action t-1","Computer level-1 action t", "Computer level-2 action t")
knitr::kable(df,booktabs = TRUE,
caption = 'Example of how a level-1 and level-2 computer agent plays in response to actions taken in the previous round', ) %>% kable_styling(latex_options="scale_down")
# df <- flextable(df)
# df <- set_caption(df, "Example of how a level-1 and level-2 computer agent plays in response to actions taken in the previous round")
#   autonum = run_autonum(seq_id = "tab", bkm = "actions"))
# df <- autofit(df)
# df
