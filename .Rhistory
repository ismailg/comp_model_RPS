# overall score to pay bonuses
dat_score <- dat %>%
group_by(prolific_id, condition) %>%
summarize(overall_score = sum(score))
dat_score$avg_bonus <- floor(dat_score$overall_score)*0.02
write.csv(dat_score,row.names=FALSE,file="bonus_payment.csv")
#Average bonus per participant
#bonus_to_be_paid <- mean(dat_score$avg_bonus)
# check num level 1 and level 2 facing players
group_by(dat_score, condition) %>%
summarise(count_conditions = n())
#Group data by human_id and calculate mean score per stage of each game.
dat$interaction_lvl <- recode(dat$stage, "1" = 1, "2" = 1, "3" = 2, "4" = 2) %>% factor(levels = c(1,2), labels = c("first interaction", "second interaction"))
# Create factor variable that determines type of opponent
dat$opp_type <- factor(dat$round_condition, labels=c("Level_1", "Level_2"), levels = c("Level1", "Level2"))
# Create factor variable coding condition (which opponent was faced first)
dat$condition.f <- factor(dat$condition, labels = c("lvl_1 first", "lvl_2 first"), levels = c("Level1","Level2"))
#Adjust shootout score tor eflect easier game
dat$adj_score <- recode(dat$score, ifelse(dat$game.f =="SHOOT", dat$score -0.33,dat$score))
# Create summarised dataset by interaction (all of first/second  opponent interactions by game)
dat_int <- dat %>%
group_by(human_id,game.f,opp_type,interaction_lvl,condition.f) %>%
summarize(int_score = mean(adj_score))
write.csv(dat, file = "dat_exp2.csv")
write.csv(dat_int, file = "dat_int_exp2.csv")
# correlation between score vs levels 1 and 2
dat_opps <- dat_int %>%
group_by(human_id, opp_type) %>%
summarize(opp_score = mean(int_score))
data_opps_wide <- spread(dat_opps,opp_type, opp_score)
ggscatter(data_opps_wide, x = "Level_1", y = "Level_2", add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",
xlab = "scores against Level1", ylab = "scores against Level2")
# Create summarised dataset by stage
dat_stages <- dat %>%
group_by(human_id,game.f,stage.f,opp_type) %>%
summarize(stage_score = mean(adj_score))
# Group data by game and ID
dat_games <- group_by(dat, human_id,game.f) %>% summarise(game_score = mean(adj_score))
# head(dat3,6)
# Subsetting scores data by game
rps <- subset(dat_games,  game.f == "RPS",game_score)
fwg <- subset(dat_games,  game.f == "FWG",game_score)
shoot <- subset(dat_games,  game.f == "SHOOT",game_score)
# head(rps,6)
# Look at some summary statistics of group means #############################
group_by(dat_int, game.f) %>%
summarise(
mean = mean(int_score, na.rm = TRUE),
sd = sd(int_score, na.rm = TRUE)
)
group_by(dat_int, game.f, opp_type,interaction_lvl) %>%
summarise(
count = n(),
mean = mean(int_score, na.rm = TRUE),
sd = sd(int_score, na.rm = TRUE)
)
# PLOTS  #############################
# Plot scores per game
#ggboxplot(dat_games, x = "game.f", y = "game_score", group = 1, add =c("mean_ci","jitter"), color="game.f", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","SHOOT"), ylab = "Average score per round", xlab = "Games")
#ggerrorplot(dat_games, x = "game.f", y = "game_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","SHOOT"), ylab = "Average score per round", xlab = "Games")
# Plot paired scores between games
#ggpaired(dat3, x = "game.f", y = "game_score",color = "game.f", id = "human_id", line.color = "gray", line.size = 0.4, palette = "npg")
# Plot results by game and stage (for all 3 games, learning is happening)
#ggboxplot(dat_stages, x = "game.f", y = "stage_score", palette = c("#00AFBB", "#E7B800","#FC4E07"), order = c("RPS", "FWG","SHOOT"), fill="game.f", ylab = "Percentage score", xlab = "Games")
# Group data by game, condition and ID
#dat4 <- group_by(dat_block, human_id,condition,game.f) %>% summarise(game_score = mean(block_opp_score))
#ggerrorplot(dat4, x = "game.f", y = "game_score", desc_stat = "mean_ci" , palette =c("#00AFBB","#E7B800","#FC4E07"),color = "game.f", ylab = "Game score", xlab = "Games")
# Facing Level 2 first is harder than facing level 1 first?
#ggboxplot(dat2, x = "condition", y = "stage_score", palette = c("#00AFBB", "#E7B800"), fill="condition",ylab = "Percentage score", xlab = "Conditions")
#ggerrorplot(dat2, x = "condition", y = "stage_score", desc_stat = "mean_ci" , palette = c("#00AFBB", "#E7B800"), color="condition",ylab = "Percentage score", xlab = "Conditions")
# Main effect of Stage
#ggerrorplot(dat2, x = "stage", y = "stage_score", desc_stat = "mean_ci" , palette = c("blue", "red", "purple", "orange"), color="stage",ylab = "Percentage score", xlab = "stage")
# Breaking it down by game (seems to be true for RPS and FWG, less so for Numbers )
#ggboxplot(dat4, x = "game.f", y = "game_score", palette = c("#00AFBB","#E7B800","#FC4E07"),order = c("RPS", "FWG","SHOOT"), ylab = "Game Score", xlab = "Conditions")
# Testing score against hypothesis of random play  ######################################
# Normality of scores
shapiro.test(dat_games$game_score)
# Testing Scores against random play (expected 0 average score)
t.test(as.numeric(rps$game_score), mu = 0, alternative = "two.sided")
t.test(as.numeric(fwg$game_score), mu = 0, alternative = "two.sided")
t.test(as.numeric(shoot$game_score), mu = 0, alternative = "two.sided")
# AFEX PACKAGE FOR RUNNING RM ANOVA AND POST HOC TESTS ############################
#citation(package = "afex", lib.loc = NULL, auto = NULL)
library(afex)
a1 <- aov_car(int_score ~ game.f*interaction_lvl*condition.f*opp_type + Error(human_id/(game.f*interaction_lvl*opp_type)), dat_int)
summary(a1)
(a1_nice <- nice(a1, es = attr(a1$anova_table, "es"),
observed = attr(a1$anova_table, "observed"),
correction = attr(a1$anova_table, "correction"), MSE = NULL,
intercept = NULL, p_adjust_method = attr(a1$anova_table,
"p_adjust_method"), sig_symbols = attr(a1$anova_table, "sig_symbols")))
write.table(a1_nice,file = "a1.txt", sep = ",", quote = FALSE, row.names = F)
## Note to Self: no need to worry abour the HF warning. You don't have pb with sphericity according to Mauchly tests, and the warning only applies to Huynh-Feldt corrections for violations of sphericity.
#Pair waise comparison and post hoc tests for the interactions
library(lsmeans)
# game score differences statistically significant? by opponent type?
(ls0 <- lsmeans(a1, "game.f", by = "opp_type"))
(ls0 <- update(pairs(ls0, reverse = TRUE), by=NULL, adjust = "holm"))
# Interaction effect by game for within game learning
(ls01 <- lsmeans(a1, "game.f", by = "interaction_lvl"))
(lsm01 <- update(pairs(ls01, reverse = TRUE), by=NULL, adjust = "holm"))
lsmip(a1, game.f ~ interaction_lvl |opp_type)
# Pairwise comparison of first halves by game ( first interaction RPS vs first interaction WFG scores....)
(ls1 <- lsmeans(a1, "opp_type", by="game.f"))
(lsm1 <- update(pairs(ls1, reverse = TRUE), by=NULL, adjust = "holm"))
#plot(lsm1,by="opp_type")
#Pairwise comparison of each game score by block (first opponent RPS vs second opponent RPS....) + Control for family wise error:
(ls2 <- lsmeans(a1, c("interaction_lvl","game.f"), by="opp_type"))
# Test differences  between first and second ineractions by game and opponent type
(contr_g1_12 <- contrast(ls2, list(G1_I1vsG1_I2 = c(-1,1,0,0,0,0))))
(contr_g2_12 <- contrast(ls2, list(G2_I1vsG2_I2 = c(0,0,-1,1,0,0))))
(contr_g3_12 <- contrast(ls2, list(G3_I1vsG3_I2 = c(-1,1,0,0,0,0))))
# Learning transfer: compare first interaction by game and type of opponent
(contr4 <- contrast(ls2, list(G1_I1vsG2_I1 = c(-1,0,1,0,0,0))))
(contr5 <- contrast(ls2, list(G3_I1vsG2_I1 = c(0,0,-1,0,1,0))))
(contr6 <- contrast(ls2, list(G3_I1vsG1_I1 = c(-1,0,0,0,1,0))))
#plots
lsmip(a1, interaction_lvl ~ game.f)
lsmip(a1, interaction_lvl ~ game.f| opp_type)
# Pairwise comparison of scores facing the two types of players by game:
#lsc <- lsmeans(a1, "condition", by="game.f")
#(lsmc <- update(pairs(lsc), by=NULL, adjust = "holm"))
#plot(lsmc,by="game.f")
#lsmip(a1, condition ~ game.f)
#Pair waise comparison and post hoc tests : Game by Block and Condition
dat_s12 = subset(dat, (stage < 3 ), drop =TRUE)
dat_S12 <- dat_s12 %>%
group_by(human_id,stage,condition,game.f) %>%
summarise(avg_score_12 = mean(score))
a2 <- aov_car( avg_score_12 ~ game.f*stage*condition + Error(human_id/(game.f*stage)), dat_S12)
#library(multcompView)
#use cld to check for comparison pairs belonging to same group, meaning not significantly different from each other...
#cld(lsm4)
#plots
ls4 <- lsmeans(a2, "stage",c("condition","game.f"))
#(lsm4 <- update(pairs(ls4, reverse = TRUE), by=NULL, adjust = "holm"))
#plot(lsm4,by="game.f")
lsmip(a2, stage ~ game.f )
# Interaction plot of game and block by condition
lsmip(a2, stage ~ game.f | condition)
lsmip(a2, condition ~ stage * game.f)
# Transfer harder for level2 opponent than when facing level 1 opponent?
# learning to specifiy contrasts -
# the below compares the score on each block and game for each type and tells me which scores belong to same group
# the idea is that if transfer is harder vs lvl2 player, then fwg first half score for lvl2 facing player should be sig lower than fwg first-half score vs lvl1 agent.not the case here as thye belong to same group.
(means.int <- lsmeans(a1, specs = c("game.f","stage"), by="condition"))
View(dat2_6)
#looking at TRIALS 2 to 6 to test robustness of evidence for transfer of learning of opponent strategy #########
dat_26 <- subset(dat,(round >1 & round < 7) & (interaction_lvl == "first interaction" ), drop =TRUE)
dat2_6 <- dat_26 %>%
group_by(human_id,condition.f,game.f,opp_type,confidence,difficulty) %>%
summarise(early_score = mean(adj_score))
# Check group means and SDs
group_by(dat2_6, game.f) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
group_by(dat2_6, game.f,opp_type) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
# plot scores per game
ggerrorplot(dat2_6, x = "game.f", y = "early_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","SHOOT"), ylab = "Score", xlab = "Games")
#looking at TRIALS 2 to 6 to test robustness of evidence for transfer of learning of opponent strategy #########
dat <- read.csv("MyData.csv")
dat_26 <- subset(dat,(round >1 & round < 7) & (interaction_lvl == "first interaction" ), drop =TRUE)
dat <- read.csv("MyData.csv")
# using some functions dplyr, ggpubr, PairedData and sjPlot. Need to be loaded.
library(tidyr)
library(dplyr)
library(MASS)
library(ggpubr)
library(PairedData)
library(multcompView)
# transform 'winner' variable in numeric score
dat$score <- recode(dat$winner, human = 1, tie = 0, AI = -1)
# Create a new variable stage.f as a factor for the stages 1,2 ,3 4 in game
dat$stage.f <- factor(dat$stage, labels = c("Stage 1","Stage 2","Stage 3", "Stage 4"),levels=c(1,2,3,4))
# create a new variable "game.f" as a factor variable of games
dat$game.f <- factor(dat$game, labels = c("RPS","FWG","SHOOT"),levels=c("rps","fwg","shootout"))
# overall score to pay bonuses
dat_score <- dat %>%
group_by(prolific_id, condition) %>%
summarize(overall_score = sum(score))
dat_score$avg_bonus <- floor(dat_score$overall_score)*0.02
write.csv(dat_score,row.names=FALSE,file="bonus_payment.csv")
#Average bonus per participant
#bonus_to_be_paid <- mean(dat_score$avg_bonus)
# check num level 1 and level 2 facing players
group_by(dat_score, condition) %>%
summarise(count_conditions = n())
#Group data by human_id and calculate mean score per stage of each game.
dat$interaction_lvl <- recode(dat$stage, "1" = 1, "2" = 1, "3" = 2, "4" = 2) %>% factor(levels = c(1,2), labels = c("first interaction", "second interaction"))
# Create factor variable that determines type of opponent
dat$opp_type <- factor(dat$round_condition, labels=c("Level_1", "Level_2"), levels = c("Level1", "Level2"))
# Create factor variable coding condition (which opponent was faced first)
dat$condition.f <- factor(dat$condition, labels = c("lvl_1 first", "lvl_2 first"), levels = c("Level1","Level2"))
#Adjust shootout score tor eflect easier game
dat$adj_score <- recode(dat$score, ifelse(dat$game.f =="SHOOT", dat$score -0.33,dat$score))
# Create summarised dataset by interaction (all of first/second  opponent interactions by game)
dat_int <- dat %>%
group_by(human_id,game.f,opp_type,interaction_lvl,condition.f) %>%
summarize(int_score = mean(adj_score))
write.csv(dat, file = "dat_exp2.csv")
write.csv(dat_int, file = "dat_int_exp2.csv")
dat2_6 <- dat_26 %>%
group_by(human_id,condition.f,game.f,opp_type,confidence,difficulty) %>%
summarise(early_score = mean(adj_score))
lme_early <- mixed(early_score ~ game.f*opp_type*condition.f + (1 | human_id),data=dat2_6,check_contrasts = FALSE, type = 3, method = "KR")
summary(lme_early)
lme_early
lme_early <- mixed(early_score ~ game.f*opp_type*condition.f + (1 | human_id),data=dat2_6,check_contrasts = FALSE, type = 3, method = "KR")
summary(lme_early)
lme_early
aov_early <- aov_car(early_score ~ game.f*opp_type*condition.f + Error(human_id/(game.f*opp_type)),data=dat2_6)
summary(aov_early)
lme_early <- mixed(early_score ~ game.f*opp_type*condition.f + (1 | human_id),data=dat2_6,check_contrasts = FALSE, type = 3, method = "KR")
summary(lme_early)
lme_early
lme_early <- mixed(early_score ~ game.f*condition + (1 | human_id),data=dat2_6,check_contrasts = FALSE, type = 3, method = "KR")
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
dat1 <- read.csv("data20180719.csv")
# using some functions dplyr, ggpubr, PairedData and sjPlot. Need to be loaded.
library(tidyr)
library(dplyr)
library(MASS)
library(ggpubr)
library(PairedData)
library(multcompView)
library(lsmeans)
# transform 'winner' variable in numeric score
dat1$score <- recode(dat1$winner, human = 1, tie = 0, ai = -1)
# create a new variable 'block' with round 1...25 = block 1 and round 26...50 as block 2
dat1$block <- factor(as.numeric(cut(dat1$round,2)),labels =c("first half", "second half"))
# create a new variable "game.f" as a factor variable of games
dat1$game.f <- factor(dat1$game, labels = c("RPS","FWG","NUM"),levels=c("rps","fwg","numbers"))
# overall score to pay bonuses
dat_score <- dat1 %>%
group_by(human_id) %>%
summarize(overall_score = sum(score))
(avg_bonus <- floor(mean(abs(dat_score$overall_score))))*0.02
#Group data by human_id and calculate mean score per block of each game.
dat2 <- dat1 %>%
group_by(human_id,condition,game,block,game.f) %>%
summarize(block_score = mean(score))
# Group data by game and ID
dat3 <- group_by(dat2, human_id,game.f,game) %>% summarise(game_score = mean(block_score))
# head(dat3,6)
# Subsetting scores data by game
rps <- subset(dat3,  game.f == "RPS",game_score)
fwg <- subset(dat3,  game.f == "FWG",game_score)
num <- subset(dat3,  game.f == "NUM",game_score)
# head(rps,6)
# Look at some summary statistics of group means #############################
group_by(dat2, game.f) %>%
summarise(
mean = mean(block_score, na.rm = TRUE),
sd = sd(block_score, na.rm = TRUE)
)
group_by(dat2, game.f, block) %>%
summarise(
count = n(),
mean = mean(block_score, na.rm = TRUE),
sd = sd(block_score, na.rm = TRUE)
)
group_by(dat2, game.f, condition,block) %>%
summarise(
count = n(),
mean = mean(block_score, na.rm = TRUE),
sd = sd(block_score, na.rm = TRUE)
)
# PLOTS  #############################
# Plot scores per game
ggboxplot(dat3, x = "game.f", y = "game_score", group = 1, add =c("mean_ci","jitter"), color="game.f", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score", xlab = "Games")
ggerrorplot(dat3, x = "game.f", y = "game_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score", xlab = "Games")
# Plot paired scores between games
#pd <- paired(rps,fwg)
#pd2 <- paired(fwg,num)
#head(pd)
#plot(pd, type = "profile")
#plot(pd2, type = "profile")
ggpaired(dat3, x = "game.f", y = "game_score",color = "game.f", id = "human_id", line.color = "gray", line.size = 0.4, palette = "npg")
# Plot results by game and block (for all 3 games, learning is happening)
ggboxplot(dat2, x = "game", y = "block_score", palette = c("#00AFBB", "#E7B800"),order = c("rps", "fwg","numbers"), fill="block",ylab = "Percentage score", xlab = "Games")
# Group data by game and ID
dat4 <- group_by(dat2, human_id,condition,game.f) %>% summarise(game_score = mean(block_score))
# Level 2 is harder to win against than level 1
ggboxplot(dat2, x = "condition", y = "block_score", palette = c("#00AFBB", "#E7B800"), fill="condition",ylab = "Percentage score", xlab = "Conditions")
ggerrorplot(dat2, x = "condition", y = "block_score", desc_stat = "mean_ci" , palette = c("#00AFBB", "#E7B800"), color="condition",ylab = "Percentage score", xlab = "Conditions")
# Main effect of block
ggerrorplot(dat2, x = "block", y = "block_score", desc_stat = "mean_ci" , palette = c("#00AFBB", "#E7B800"), color="block",ylab = "Percentage score", xlab = "Block")
# Breaking it down by game (seems to be true for RPS and FWG, less so for Numbers )
ggboxplot(dat4, x = "game.f", y = "game_score", palette = c("#00AFBB","#E7B800","#FC4E07"), fill="condition",order = c("RPS", "FWG","NUM"),ylab = "Game Score", xlab = "Conditions")
# Testing score against hypothesis of random play  ######################################
# Normality of scores
shapiro.test(dat3$game_score)
# Testing Scores against random play (expected 0 average score)
t.test(as.numeric(rps$game_score), mu = 0, alternative = "two.sided")
t.test(as.numeric(fwg$game_score), mu = 0, alternative = "two.sided")
t.test(as.numeric(num$game_score), mu = 0, alternative = "two.sided")
# AFEX PACKAGE FOR RUNNING RM ANOVA AND POST HOC TESTS ############################
citation(package = "afex", lib.loc = NULL, auto = NULL)
library(afex)
a1 <- aov_car( block_score ~ game.f*block*condition + Error(human_id/(game.f*block)), dat2)
summary(a1)
(a1_nice <- nice(a1, es = attr(a1$anova_table, "es"),
observed = attr(a1$anova_table, "observed"),
correction = attr(a1$anova_table, "correction"), MSE = NULL,
intercept = NULL, p_adjust_method = attr(a1$anova_table,
"p_adjust_method"), sig_symbols = attr(a1$anova_table, "sig_symbols")))
write.table(a1_nice,file = "a1.txt", sep = ",", quote = FALSE, row.names = F)
## Note to Self: no need to worry abour the HF warning. You don't have pb with sphericity according to Mauchly tests, and the warning only applies to Huynh-Feldt corrections for violations of sphericity.
#Pair waise comparison and post hoc tests for the interaction: Game * Block using lsmeans
# game score differences statistically significant?
(ls0 <- lsmeans(a1, "game.f"))
(lsm0 <- update(pairs(ls0, reverse = TRUE), by=NULL, adjust = "holm"))
# Main effect of block
(ls01 <- lsmeans(a1, "block"))
(lsm01 <- update(pairs(ls01, reverse = TRUE), by=NULL, adjust = "holm"))
lsmip(a1, ~block)
# Main effect of condition
(ls02 <- lsmeans(a1, "condition"))
(lsm02 <- update(pairs(ls02, reverse = TRUE), by=NULL, adjust = "holm"))
# Pairwise comparison of first halves by game ( first half RPS vs first half WFG scores....)
(ls1 <- lsmeans(a1, "block" , by="game.f"))
(lsm1 <- update(pairs(ls1, reverse = TRUE), by=NULL, adjust = "holm"))
lsmip(a1, game.f ~ block)
# Pairwise comparison of each game score by block (first half RPS vs second half RPS....) + Control for family wise error:
ls2 <- lsmeans(a1, c("block","game.f"))
(lsm2 <- update(pairs(ls2, reverse = TRUE), by=NULL, adjust = "holm"))
(contr2 <- contrast(ls2, list(G1H2vG2H1 = c(0,1,-1,0,0,0))))
(contr3 <- contrast(ls2, list(G1H1vs0 = c(1,0,0,0,0,0))))
lsmip(a1, block ~ game.f)
lsmip(a1, ~ block * game.f)
# Pairwise comparison of scores facing the two types of players by game:
lsc <- lsmeans(a1, "condition", by="game.f")
(lsmc <- update(pairs(lsc), by=NULL, adjust = "holm"))
plot(lsmc,by="game.f")
lsmip(a1, condition ~ game.f)
#Pair waise comparison and post hoc tests : Game by Block and Condition
#library(multcompView)
#use cld to check for comparison pairs belonging to same group, meaning not significantly different from each other...
#cld(lsm4)
#plots
ls4 <- lsmeans(a1, "block",c("condition","game.f"))
ls4
(lsm4 <- update(pairs(ls4, reverse = TRUE), by=NULL, adjust = "holm"))
plot(lsm4,by="game.f")
lsmip(a1, game.f ~ block | condition)
# Interaction plot of game and block by condition
lsmip(a1, game.f ~ block | condition)
lsmip(a1, condition ~ block * game.f)
# Transfer harder for level2 opponent than when facing level 1 opponent?
# learning to specifiy contrasts -
# the below compares the score on each block and game for each type and tells me which scores belong to same group
# the idea is that if transfer is harder vs lvl2 player, then fwg first half score for lvl2 facing player should be sig lower than fwg first-half score vs lvl1 agent.not the case here as thye belong to same group.
(means.int <- lsmeans(a1, specs = c("game.f","block","condition")))
# Transfer level1: compare H1FWG with H1RPS
con1  <- contrast(means.int, list(H1_G2vsH1_G1forlvl1 = c(-1,1,0,0,0,0,0,0,0,0,0,0), H1_G3vsH1_G1forlvl1=c(-1,0,1,0,0,0,0,0,0,0,0,0)))
summary(con1, adjust = "holm")
# Transfer level2: compare H1FWG with H1RPS
con2  <- contrast(means.int, list(H1_G2vsH1_G1forlvl2 = c(0,0,0,0,0,0,-1,1,0,0,0,0), H1_G3vsH1_G1forlvl2=c(0,0,0,0,0,0,-1,0,1,0,0,0)))
summary(con2, adjust = "holm")
# compare first half (H1) scores between level 1 and level 2 players in FWG and NUM
con3 <- contrast(means.int, list(G1vG2forH1 = c(0,1,0,0,0,0,0,-1,0,0,0,0), G2vG3forh1=c(0,0,1,0,0,0,0,0,-1,0,0,0)))
summary(con3, adjust ="holm")
# Within game learning harder for level2 opponent than when facing level 1 opponent? compare differences between block for each game and type
con4 <- contrast(means.int, list(L2vL1forRPS = c(1,0,0,-1,0,0,-1,0,0,1,0,0), L2vL1forFWG=c(0,1,0,0,-1,0,0,-1,0,0,1,0), L2vL1forNUM=c(0,0,1,0,0,-1,0,0,-1,0,0,1)))
summary(con4, adjust ="holm")
#looking at TRIALS 2 to 6 to test robustness of evidence for transfer of learning of opponent strategy #########
dat_26 <- subset(dat1,round >1 & round <7, drop =TRUE)
dat2_6 <- dat_26 %>%
group_by(human_id,condition,game.f,confidence,difficulty) %>%
summarise(early_score = mean(score))
write.csv(dat2_6,"exp1_early_rounds.csv")
# Check group means and SDs
group_by(dat2_6, game.f) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
group_by(dat2_6, game.f,condition) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
# plot early scores per game
ggerrorplot(dat2_6, x = "game.f", y = "early_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score", xlab = "Games")
# set contrasts for factors in dataset for condition and game
# setting contrast to compare early score between games across levels
contrasts(dat2_6$game.f) <- cbind(c(1,-1,0),c(0,-1,1))
contrasts(dat2_6$condition) <- c(1,-1)
# testing differences between early scores across games
library(afex)
aov_early <- aov_car(early_score ~ game.f*condition + Error(human_id/(game.f)),data=dat2_6,check_contrasts = FALSE)
summary(aov_early)
# Random intercecprt for participants
lme_early <- mixed(early_score ~ game.f*condition + (1 | human_id),data=dat2_6,check_contrasts = FALSE, type = 3, method = "KR")
summary(lme_early)
lme_early
aov_ear_nice <- nice(aov_early, es = attr(aov_early$anova_table, "es"),
observed = attr(aov_early$anova_table, "observed"),
correction = attr(aov_early$anova_table, "correction"), MSE = NULL,
intercept = NULL, p_adjust_method = attr(aov_early$anova_table,
"p_adjust_method"), sig_symbols = attr(aov_early$anova_table, "sig_symbols"))
write.table(aov_ear_nice,file = "aov_ear.txt", sep = ",", quote = FALSE, row.names = F)
# including confidence
#aov_conf_26 <- aov_car(early_score ~ game.f*condition*difficulty + Error(human_id/(game.f)),data=dat2_6)
#summary(aov_conf_26)
View(dat2_6)
lme_early <- mixed(early_score ~ game.f*opp_type*condition.f + (1 | human_id),data=dat2_6,check_contrasts = FALSE, type = 3, method = "KR")
library(afex)
# Set contrasts
contrasts(dat2_6$game.f) <- cbind(c(1,-1,0),c(0,-1,1))
contrasts(dat2_6$opp_type) <- c(1,-1)
View(dat2_6)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv("MyData.csv")
# using some functions dplyr, ggpubr, PairedData and sjPlot. Need to be loaded.
library(tidyr)
library(dplyr)
library(MASS)
library(ggpubr)
library(PairedData)
library(multcompView)
# transform 'winner' variable in numeric score
dat$score <- recode(dat$winner, human = 1, tie = 0, AI = -1)
# Create a new variable stage.f as a factor for the stages 1,2 ,3 4 in game
dat$stage.f <- factor(dat$stage, labels = c("Stage 1","Stage 2","Stage 3", "Stage 4"),levels=c(1,2,3,4))
# create a new variable "game.f" as a factor variable of games
dat$game.f <- factor(dat$game, labels = c("RPS","FWG","SHOOT"),levels=c("rps","fwg","shootout"))
# overall score to pay bonuses
dat_score <- dat %>%
group_by(prolific_id, condition) %>%
summarize(overall_score = sum(score))
dat_score$avg_bonus <- floor(dat_score$overall_score)*0.02
write.csv(dat_score,row.names=FALSE,file="bonus_payment.csv")
#Average bonus per participant
#bonus_to_be_paid <- mean(dat_score$avg_bonus)
# check num level 1 and level 2 facing players
group_by(dat_score, condition) %>%
summarise(count_conditions = n())
#Group data by human_id and calculate mean score per stage of each game.
dat$interaction_lvl <- recode(dat$stage, "1" = 1, "2" = 1, "3" = 2, "4" = 2) %>% factor(levels = c(1,2), labels = c("first interaction", "second interaction"))
# Create factor variable that determines type of opponent
dat$opp_type <- factor(dat$round_condition, labels=c("Level_1", "Level_2"), levels = c("Level1", "Level2"))
# Create factor variable coding condition (which opponent was faced first)
dat$condition.f <- factor(dat$condition, labels = c("lvl_1 first", "lvl_2 first"), levels = c("Level1","Level2"))
#Adjust shootout score tor eflect easier game
dat$adj_score <- recode(dat$score, ifelse(dat$game.f =="SHOOT", dat$score -0.33,dat$score))
# Create summarised dataset by interaction (all of first/second  opponent interactions by game)
dat_int <- dat %>%
group_by(human_id,game.f,opp_type,interaction_lvl,condition.f) %>%
summarize(int_score = mean(adj_score))
write.csv(dat, file = "dat_exp2.csv")
write.csv(dat_int, file = "dat_int_exp2.csv")
library(afex)
# Set contrasts
contrasts(dat2_6$game.f) <- cbind(c(1,-1,0),c(0,-1,1))
contrasts(dat2_6$opp_type) <- c(1,-1)
View(dat2_6)
#looking at TRIALS 2 to 6 to test robustness of evidence for transfer of learning of opponent strategy #########
dat_26 <- subset(dat,(round >1 & round < 7) & (interaction_lvl == "first interaction" ), drop =TRUE)
dat2_6 <- dat_26 %>%
group_by(human_id,condition.f,game.f,opp_type,confidence,difficulty) %>%
summarise(early_score = mean(adj_score))
# Check group means and SDs
group_by(dat2_6, game.f) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
group_by(dat2_6, game.f,opp_type) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
# plot scores per game
ggerrorplot(dat2_6, x = "game.f", y = "early_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","SHOOT"), ylab = "Score", xlab = "Games")
# testing differences between early scores across games
library(afex)
# Set contrasts
contrasts(dat2_6$game.f) <- cbind(c(1,-1,0),c(0,-1,1))
contrasts(dat2_6$opp_type) <- c(1,-1)
contrasts(dat2_6$condition.f) <- c(1,-1)
aov_early <- aov_car(early_score ~ game.f*opp_type*condition.f + Error(human_id/(game.f*opp_type)),data=dat2_6)
summary(aov_early)
# Random intercecprt for participants
lme_early <- mixed(early_score ~ game.f*opp_type*condition.f + (1 | human_id),data=dat2_6,check_contrasts = FALSE, type = 3, method = "KR")
summary(lme_early)
lme_early
(aov_ear_nice <- nice(aov_early, es = attr(aov_early$anova_table, "es"),
observed = attr(aov_early$anova_table, "observed"),
correction = attr(aov_early$anova_table, "correction"), MSE = NULL,
intercept = NULL, p_adjust_method = attr(aov_early$anova_table,
"p_adjust_method"), sig_symbols = attr(aov_early$anova_table, "sig_symbols")))
write.table(aov_ear_nice,file = "aov_ear.txt", sep = ",", quote = FALSE, row.names = F)
# Post hoc analyses : Checking early score by opponent and game
(ls4 <- lsmeans(aov_early, "game.f", by="opp_type"))
lme_early <- mixed(early_score ~ game.f*opp_type*condition.f + (1 | human_id),data=dat2_6,check_contrasts = FALSE, type = 3, method = "KR")
summary(lme_early)
lme_early
