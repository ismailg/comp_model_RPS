Qlearn(reward = reward, state = state, act = act, act_mask = act_mask, opponent_id = opponent_id, ntimes=rep(sum(ntrial),nsubject))
)
)
trstart <- matrix(c(0.8,0.1,0.1,0.1,0.8,0.1,.1,.1,.8),ncol=3)
transition <- list()
transition[[1]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[1,],family=multinomial("identity"))
transition[[2]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[2,],family=multinomial("identity"))
transition[[3]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[3,],family=multinomial("identity"))
instart <- c(1/3,1/3,1/3)
inMod <- transInit(~1,nstates=3,pstart=instart,family=multinomial("identity"),data=data.frame(rep(1,nsubject*ngame)))
mod <- makeDepmix(response=rModels,transition=transition,prior=inMod,ntimes=rep(ntrial,nsubject))
# fmod <- fit(mod, emcontrol=em.control(random.start=FALSE))
conr <- matrix(0,nrow=3,ncol=15)
conr[1,13] <- 1
conr[2,14] <- 1
conr[3,15] <- 1
conr.l <- conr.u <- rep(0,15)
conr.l[c(13,14,15)] <- 0
conr.u[c(13,14,15)] <- 1
conr.l <- conr.u <- rep(0,3)
conr.l[c(1,2,3)] <- 0
conr.l[1] <- .5
conr.u[c(1,2,3)] <- 1
conr.u[3] <- 1000
pars <- getpars(mod)
pars[13] <- .2
mod <- setpars(mod,pars)
fmod <- fit(mod, method="donlp",conrows=conr,conrows.lower=conr.l,conrows.upper=conr.u)
summary(fmod)
fmod_all <- fmod
pars <- getpars(fmod)
pars[4:6] <- c(1,0,0)
pars[7:9] <- c(0,1,0)
pars[10:12] <- c(0,0,1)
fixed <- c(rep(FALSE,3),rep(TRUE,9),rep(FALSE,3))
mod_noswitch <- setpars(mod,pars)
fmod_all_noswitch <- fit(mod_noswitch, method="donlp",conrows=conr,conrows.lower=conr.l,conrows.upper=conr.u, fixed=fixed)
save(fmod_all,fmod_all_noswitch, file="HMM/newHMMs-exp2.RData")
c(multinomial()$linkinv(c(0,.1,3,5),base=1), 0, .5, 2, 5)
fmod_ind <- list()
fmod_ind_noswitch <- list()
dat_save <- dat
for(id in unique(dat_save$human_id)) {
dat <- subset(dat_save, human_id == id)
# vars for Qlearn
reward <- as.numeric(dat$winner == "human")
reward[dat$winner == "ai"] <- -1
state <- as.numeric(dat$state)
act <- as.numeric(factor(dat$human_action,levels=c("rock","paper","scissors","fire","water","grass","left","center","right")))
act_mask <- matrix(0,nrow=nrow(dat),ncol=3+3+3)
act_mask[dat$game == "rps",1:3] <- 1
act_mask[dat$game == "fwg",4:6] <- 1
act_mask[dat$game == "shootout",7:9] <- 1
# vars to ToM
dat$ai_action_num <- recode(dat$ai_action,"rock" = 1, "paper" = 2, "scissors" = 3, "fire" = 1, "water" = 2, "grass" = 3, "left" = 1, "center" = 2, "right" = 3)
dat$human_action_num <- recode(dat$human_action,"rock" = 1, "paper" = 2, "scissors" = 3, "fire" = 1, "water" = 2, "grass" = 3, "left" = 1, "center" = 2, "right" = 3)
act_num <- dat$human_action_num
opp_act_num <- dat$ai_action_num
pred <- array(0.0,dim=c(nrow(dat),3,3))
pred[,1,1] <- dat$pred_a1_level0
pred[,2,1] <- dat$pred_a2_level0
pred[,3,1] <- dat$pred_a3_level0
pred[,1,2] <- dat$pred_a1_level1
pred[,2,2] <- dat$pred_a2_level1
pred[,3,2] <- dat$pred_a3_level1
pred[,1,3] <- dat$pred_a1_level2
pred[,2,3] <- dat$pred_a2_level2
pred[,3,3] <- dat$pred_a3_level2
n_act <- 3
nsubject <- length(unique(dat$human_id)) # number of participants
ngame <- 3 # number of games
ntrial <- c(50,50,50) # number of trials in each game
rModels <- list(
list(
dummyResponse(1/n_act)
),
list(
ToM(act = act_num, opp_act = opp_act_num, pred = pred, n_act = n_act, ntimes=rep(sum(ntrial),nsubject))
),
list(
Qlearn(reward = reward, state = state, act = act, act_mask = act_mask, ntimes=rep(sum(ntrial),nsubject))
)
)
trstart <- matrix(c(0.8,0.1,0.1,0.1,0.8,0.1,.1,.1,.8),ncol=3)
transition <- list()
transition[[1]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[1,],family=multinomial("identity"))
transition[[2]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[2,],family=multinomial("identity"))
transition[[3]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[3,],family=multinomial("identity"))
instart <- c(1/3,1/3,1/3)
inMod <- transInit(~1,nstates=3,pstart=instart,family=multinomial("identity"),data=data.frame(rep(1,nsubject*ngame)))
mod <- makeDepmix(response=rModels,transition=transition,prior=inMod,ntimes=rep(ntrial,nsubject))
# fmod <- fit(mod, emcontrol=em.control(random.start=FALSE))
conr <- matrix(0,nrow=3,ncol=15)
conr[1,13] <- 1
conr[2,14] <- 1
conr[3,15] <- 1
conr.l <- conr.u <- rep(0,15)
conr.l[c(13,14,15)] <- 0
conr.u[c(13,14,15)] <- 1
conr.l <- conr.u <- rep(0,3)
conr.l[c(1,2,3)] <- 0
conr.l[1] <- .5
conr.u[c(1,2,3)] <- 1
conr.u[3] <- 1000
pars <- getpars(mod)
pars[13] <- .2
mod <- setpars(mod,pars)
fmod_ind[[id]] <- fit(mod, method="donlp",conrows=conr,conrows.lower=conr.l,conrows.upper=conr.u)
pars <- getpars(fmod)
pars[4:6] <- c(1,0,0)
pars[7:9] <- c(0,1,0)
pars[10:12] <- c(0,0,1)
fixed <- c(rep(FALSE,3),rep(TRUE,9),rep(FALSE,3))
mod_noswitch <- setpars(mod,pars)
fmod_ind_noswitch[[id]] <- fit(mod_noswitch, method="donlp",conrows=conr,conrows.lower=conr.l,conrows.upper=conr.u, fixed=fixed)
cat(id, "done\n")
save(fmod_all, fmod_all_noswitch, fmod_ind, fmod_ind_noswitch, file="HMM/newHMMs-exp2.RData")
}
load("HMM/newHMMs-exp2.RData")
fmod_ind <- list()
fmod_ind_noswitch <- list()
dat_save <- dat
for(id in unique(dat_save$human_id)) {
dat <- subset(dat_save, human_id == id)
# vars for Qlearn
reward <- as.numeric(dat$winner == "human")
reward[dat$winner == "ai"] <- -1
state <- as.numeric(dat$state)
act <- as.numeric(factor(dat$human_action,levels=c("rock","paper","scissors","fire","water","grass","left","center","right")))
act_mask <- matrix(0,nrow=nrow(dat),ncol=3+3+3)
act_mask[dat$game == "rps",1:3] <- 1
act_mask[dat$game == "fwg",4:6] <- 1
act_mask[dat$game == "shootout",7:9] <- 1
opponent_id <- dplyr::recode(dat$round_condition, Level1 = 1, Level2 = 2)
game_id <- dplyr::recode(dat$game, rps = 1, fwg = 2, shootout = 3)
# vars to ToM
dat$ai_action_num <- recode(dat$ai_action,"rock" = 1, "paper" = 2, "scissors" = 3, "fire" = 1, "water" = 2, "grass" = 3, "left" = 1, "center" = 2, "right" = 3)
dat$human_action_num <- recode(dat$human_action,"rock" = 1, "paper" = 2, "scissors" = 3, "fire" = 1, "water" = 2, "grass" = 3, "left" = 1, "center" = 2, "right" = 3)
act_num <- dat$human_action_num
opp_act_num <- dat$ai_action_num
pred <- array(0.0,dim=c(nrow(dat),3,3))
pred[,1,1] <- dat$pred_a1_level0
pred[,2,1] <- dat$pred_a2_level0
pred[,3,1] <- dat$pred_a3_level0
pred[,1,2] <- dat$pred_a1_level1
pred[,2,2] <- dat$pred_a2_level1
pred[,3,2] <- dat$pred_a3_level1
pred[,1,3] <- dat$pred_a1_level2
pred[,2,3] <- dat$pred_a2_level2
pred[,3,3] <- dat$pred_a3_level2
n_act <- 3
nsubject <- length(unique(dat$human_id)) # number of participants
ngame <- 3 # number of games
ntrial <- c(60,60,60) # number of trials in each game
rModels <- list(
list(
dummyResponse(1/n_act)
),
list(
ToM(act = act_num, opp_act = opp_act_num, pred = pred, n_act = n_act, opponent_id = opponent_id, game_id = game_id, ntimes=rep(sum(ntrial),nsubject))
),
list(
Qlearn(reward = reward, state = state, act = act, act_mask = act_mask, opponent_id = opponent_id, ntimes=rep(sum(ntrial),nsubject))
)
)
trstart <- matrix(c(0.8,0.1,0.1,0.1,0.8,0.1,.1,.1,.8),ncol=3)
transition <- list()
transition[[1]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[1,],family=multinomial("identity"))
transition[[2]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[2,],family=multinomial("identity"))
transition[[3]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[3,],family=multinomial("identity"))
instart <- c(1/3,1/3,1/3)
inMod <- transInit(~1,nstates=3,pstart=instart,family=multinomial("identity"),data=data.frame(rep(1,nsubject*ngame)))
mod <- makeDepmix(response=rModels,transition=transition,prior=inMod,ntimes=rep(ntrial,nsubject))
conr <- matrix(0,nrow=3,ncol=15)
conr[1,13] <- 1
conr[2,14] <- 1
conr[3,15] <- 1
conr.l <- conr.u <- rep(0,15)
conr.l[c(13,14,15)] <- 0
conr.u[c(13,14,15)] <- 1
conr.l <- conr.u <- rep(0,3)
conr.l[c(1,2,3)] <- 0
conr.l[1] <- .5
conr.u[c(1,2,3)] <- 1
conr.u[3] <- 1000
pars <- getpars(mod)
pars[13] <- .2
mod <- setpars(mod,pars)
fmod_ind[[id]] <- fit(mod, method="donlp",conrows=conr,conrows.lower=conr.l,conrows.upper=conr.u)
pars <- getpars(fmod)
pars[4:6] <- c(1,0,0)
pars[7:9] <- c(0,1,0)
pars[10:12] <- c(0,0,1)
fixed <- c(rep(FALSE,3),rep(TRUE,9),rep(FALSE,3))
mod_noswitch <- setpars(mod,pars)
fmod_ind_noswitch[[id]] <- fit(mod_noswitch, method="donlp",conrows=conr,conrows.lower=conr.l,conrows.upper=conr.u, fixed=fixed)
cat(id, "done\n")
save(fmod_all, fmod_all_noswitch, fmod_ind, fmod_ind_noswitch, file="HMM/newHMMs-exp2.RData")
}
str(fmod_ind)
nrow(dat_save)
library(dplyr)
library(depmixS4)
source("HMM/Qlearn-HMM-exp2.R")
source("HMM/ToM-HMM-exp2.R")
source("HMM/dummy-HMM.R")
dat <- read.csv("Experiment_2/MyData.csv")
dat <- as_tibble(dat) %>% group_by(human_id,game)
dat <- dat %>%
mutate(ai_action_prev = lag(ai_action,1), human_action_prev = lag(human_action,1)) %>%
mutate(state = interaction(ai_action_prev,human_action_prev))
dat <- dat %>% mutate(pred_a1_level0 = case_when(
game == "rps" & ai_action_prev == "rock" ~ 1,
game == "fwg" & ai_action_prev == "fire" ~ 1,
game == "shootout" & ai_action_prev == "left" ~ 1,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a2_level0 = case_when(
game == "rps" & ai_action_prev == "paper" ~ 1,
game == "fwg" & ai_action_prev == "water" ~ 1,
game == "shootout" & ai_action_prev == "center" ~ 1,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a3_level0 = case_when(
game == "rps" & ai_action_prev == "scissors" ~ 1,
game == "fwg" & ai_action_prev == "grass" ~ 1,
game == "shootout" & ai_action_prev == "right" ~ 1,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
## level 1 predictions
dat <- dat %>% mutate(pred_a1_level1 = case_when(
game == "rps" & human_action_prev == "scissors" ~ 1,
game == "fwg" & human_action_prev == "grass" ~ 1,
game == "shootout" & human_action_prev == "left" ~ 1,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a2_level1 = case_when(
game == "rps" & human_action_prev == "rock" ~ 1,
game == "fwg" & human_action_prev == "fire" ~ 1,
game == "shootout" & human_action_prev == "center" ~ 1,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a3_level1 = case_when(
game == "rps" & human_action_prev == "paper" ~ 1,
game == "fwg" & human_action_prev == "water" ~ 1,
game == "shootout" & human_action_prev == "right" ~ 1,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
## level 2 predictions
dat <- dat %>% mutate(pred_a1_level2 = case_when(
game == "rps" & ai_action_prev == "paper" ~ 1,
game == "fwg" & ai_action_prev == "water" ~ 1,
game == "shootout" & ai_action_prev == "left" ~ 1/2,
game == "shootout" & ai_action_prev == "right" ~ 1/2,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a2_level2 = case_when(
game == "rps" & ai_action_prev == "scissors" ~ 1,
game == "fwg" & ai_action_prev == "grass" ~ 1,
game == "shootout" & ai_action_prev == "left" ~ 1/2,
game == "shootout" & ai_action_prev == "right" ~ 1/2,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a3_level2 = case_when(
game == "rps" & ai_action_prev == "rock" ~ 1,
game == "fwg" & ai_action_prev == "fire" ~ 1,
game == "shootout" & ai_action_prev == "left" ~ 1/2,
game == "shootout" & ai_action_prev == "right" ~ 1/2,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
fmod_ind <- list()
fmod_ind_noswitch <- list()
dat_save <- dat
for(id in unique(dat_save$human_id)) {
dat <- subset(dat_save, human_id == id)
# vars for Qlearn
reward <- as.numeric(dat$winner == "human")
reward[dat$winner == "ai"] <- -1
state <- as.numeric(dat$state)
act <- as.numeric(factor(dat$human_action,levels=c("rock","paper","scissors","fire","water","grass","left","center","right")))
act_mask <- matrix(0,nrow=nrow(dat),ncol=3+3+3)
act_mask[dat$game == "rps",1:3] <- 1
act_mask[dat$game == "fwg",4:6] <- 1
act_mask[dat$game == "shootout",7:9] <- 1
opponent_id <- dplyr::recode(dat$round_condition, Level1 = 1, Level2 = 2)
game_id <- dplyr::recode(dat$game, rps = 1, fwg = 2, shootout = 3)
# vars to ToM
dat$ai_action_num <- recode(dat$ai_action,"rock" = 1, "paper" = 2, "scissors" = 3, "fire" = 1, "water" = 2, "grass" = 3, "left" = 1, "center" = 2, "right" = 3)
dat$human_action_num <- recode(dat$human_action,"rock" = 1, "paper" = 2, "scissors" = 3, "fire" = 1, "water" = 2, "grass" = 3, "left" = 1, "center" = 2, "right" = 3)
act_num <- dat$human_action_num
opp_act_num <- dat$ai_action_num
pred <- array(0.0,dim=c(nrow(dat),3,3))
pred[,1,1] <- dat$pred_a1_level0
pred[,2,1] <- dat$pred_a2_level0
pred[,3,1] <- dat$pred_a3_level0
pred[,1,2] <- dat$pred_a1_level1
pred[,2,2] <- dat$pred_a2_level1
pred[,3,2] <- dat$pred_a3_level1
pred[,1,3] <- dat$pred_a1_level2
pred[,2,3] <- dat$pred_a2_level2
pred[,3,3] <- dat$pred_a3_level2
n_act <- 3
nsubject <- length(unique(dat$human_id)) # number of participants
ngame <- 3 # number of games
ntrial <- c(60,60,60) # number of trials in each game
rModels <- list(
list(
dummyResponse(1/n_act)
),
list(
ToM(act = act_num, opp_act = opp_act_num, pred = pred, n_act = n_act, opponent_id = opponent_id, game_id = game_id, ntimes=rep(sum(ntrial),nsubject))
),
list(
Qlearn(reward = reward, state = state, act = act, act_mask = act_mask, opponent_id = opponent_id, ntimes=rep(sum(ntrial),nsubject))
)
)
trstart <- matrix(c(0.8,0.1,0.1,0.1,0.8,0.1,.1,.1,.8),ncol=3)
transition <- list()
transition[[1]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[1,],family=multinomial("identity"))
transition[[2]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[2,],family=multinomial("identity"))
transition[[3]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[3,],family=multinomial("identity"))
instart <- c(1/3,1/3,1/3)
inMod <- transInit(~1,nstates=3,pstart=instart,family=multinomial("identity"),data=data.frame(rep(1,nsubject*ngame)))
mod <- makeDepmix(response=rModels,transition=transition,prior=inMod,ntimes=rep(ntrial,nsubject))
conr <- matrix(0,nrow=3,ncol=15)
conr[1,13] <- 1
conr[2,14] <- 1
conr[3,15] <- 1
conr.l <- conr.u <- rep(0,15)
conr.l[c(13,14,15)] <- 0
conr.u[c(13,14,15)] <- 1
conr.l <- conr.u <- rep(0,3)
conr.l[c(1,2,3)] <- 0
conr.l[1] <- .5
conr.u[c(1,2,3)] <- 1
conr.u[3] <- 1000
pars <- getpars(mod)
pars[13] <- .2
mod <- setpars(mod,pars)
fmod_ind[[id]] <- fit(mod, method="donlp",conrows=conr,conrows.lower=conr.l,conrows.upper=conr.u)
pars <- getpars(fmod)
pars[4:6] <- c(1,0,0)
pars[7:9] <- c(0,1,0)
pars[10:12] <- c(0,0,1)
fixed <- c(rep(FALSE,3),rep(TRUE,9),rep(FALSE,3))
mod_noswitch <- setpars(mod,pars)
fmod_ind_noswitch[[id]] <- fit(mod_noswitch, method="donlp",conrows=conr,conrows.lower=conr.l,conrows.upper=conr.u, fixed=fixed)
cat(id, "done\n")
save(fmod_all, fmod_all_noswitch, fmod_ind, fmod_ind_noswitch, file="HMM/newHMMs-exp2.RData")
}
load("HMM/newHMMs-exp1.RData")
summary(fmod_all)
BIC(fmod_all)
BIC(fmod_all_noswitch)
logLik(fmod_all)
llratio(fmod_all, fmod_all_noswitch)
logLik(fmod_all)
logLik(fmod_all_noswitch)
getpars(fmod_all_noswitch)
getpars(fmod_all_noswitch, "free")
getpars(fmod_all_noswitch, which="free")
summary(fmod_all_noswitch)
fmod_all_noswitch@message
fmod_all_noswitch@init
fmod_all_noswitch@prior@fixed
fmod_all_noswitch@transition[[1]]@fixed
fmod_all_noswitch@transition[[2]]@fixed
fmod_all_noswitch@transition[[3]]@fixed
fmod_all_noswitch@response[[3]]@fixed
fmod_all_noswitch@response[[3]][[1]]@fixed
fmod_all_noswitch@response[[2]][[1]]@fixed
fmod_all_noswitch@response[[1]][[1]]@fixed
getpars(fmod_all)
tmp <- forwardbackward(fmod_all)
str(tmp)
dat <- read.csv("data20180719.csv")
str(dat)
library(tidyr)
dat %>%
select(human_id, condition, game, pS1, pS2, pS3) %>%
group_by(human_id, condition, game) %>%
pivot_longer()
dat <- read.csv("../data20180719.csv")
tmp <- forwardbackward(fmod_all)
dat$pS1 <- tmp$gamma[,1]
dat$pS2 <- tmp$gamma[,2]
dat$pS3 <- tmp$gamma[,1]
dat %>%
select(human_id, condition, game, pS1, pS2, pS3) %>%
group_by(human_id, condition, game) %>%
pivot_longer()
tmp <- forwardbackward(fmod_all)
dat$pS1 <- tmp$gamma[,1]
dat$pS2 <- tmp$gamma[,2]
dat$pS3 <- tmp$gamma[,1]
dat %>%
select(human_id, condition, game, pS1, pS2, pS3) %>%
group_by(human_id, condition, game) %>%
pivot_longer()
?select
dat %>%
dplyr::select(human_id, condition, game, pS1, pS2, pS3) %>%
group_by(human_id, condition, game) %>%
pivot_longer()
dat %>%
dplyr::select(human_id, condition, game, pS1, pS2, pS3) %>%
group_by(human_id, condition, game)
dat %>%
dplyr::select(human_id, condition, game, pS1, pS2, pS3) %>%
group_by(human_id, condition, game) %>%
pivot_longer(cols=starts_with("pS"))
dat %>%
dplyr::select(human_id, condition, game, pS1, pS2, pS3) %>%
group_by(human_id, condition, game) %>%
pivot_longer(cols=starts_with("pS"), names_to = "strategy", values_to = "probability")
str(dat)
dat %>%
dplyr::select(human_id, condition, game, round, pS1, pS2, pS3) %>%
group_by(human_id, condition, game, round) %>%
pivot_longer(cols=starts_with("pS"), names_to = "strategy", values_to = "probability") %>%
ggplot(aes(x=round, y = probability, groups=strategy)) + geom_line() + facet_wrap(~game)
library(ggplot2)
dat %>%
dplyr::select(human_id, condition, game, round, pS1, pS2, pS3) %>%
group_by(human_id, condition, game, round) %>%
pivot_longer(cols=starts_with("pS"), names_to = "strategy", values_to = "probability") %>%
ggplot(aes(x=round, y = probability, groups=strategy)) + geom_line() + facet_wrap(~game)
dat <- read.csv("../data20180719.csv")
tmp <- forwardbackward(fmod_all)
dat$pS1 <- tmp$gamma[,1]
dat$pS2 <- tmp$gamma[,2]
dat$pS3 <- tmp$gamma[,1]
dat %>%
dplyr::select(human_id, condition, game, round, pS1, pS2, pS3) %>%
group_by(human_id, condition, game, round) %>%
pivot_longer(cols=starts_with("pS"), names_to = "strategy", values_to = "probability")
tmp <- forwardbackward(fmod_all)
dat$pS1 <- tmp$gamma[,1]
dat$pS2 <- tmp$gamma[,2]
dat$pS3 <- tmp$gamma[,1]
dat %>%
dplyr::select(human_id, condition, game, round, pS1, pS2, pS3) %>%
group_by(human_id, condition, game, round) %>%
pivot_longer(cols=starts_with("pS"), names_to = "strategy", values_to = "probability") %>%
ggplot(aes(x=round, y = probability, groups=strategy))
dat <- read.csv("../data20180719.csv")
tmp <- forwardbackward(fmod_all)
dat$pS1 <- tmp$gamma[,1]
dat$pS2 <- tmp$gamma[,2]
dat$pS3 <- tmp$gamma[,1]
dat %>%
dplyr::select(human_id, condition, game, round, pS1, pS2, pS3) %>%
group_by(human_id, condition, game, round) %>%
pivot_longer(cols=starts_with("pS"), names_to = "strategy", values_to = "probability") %>%
ggplot(aes(x=round, y = probability, group=strategy))
tmp <- forwardbackward(fmod_all)
dat$pS1 <- tmp$gamma[,1]
dat$pS2 <- tmp$gamma[,2]
dat$pS3 <- tmp$gamma[,1]
dat %>%
dplyr::select(human_id, condition, game, round, pS1, pS2, pS3) %>%
group_by(human_id, condition, game, round) %>%
pivot_longer(cols=starts_with("pS"), names_to = "strategy", values_to = "probability") %>%
ggplot(aes(x=round, y = probability, group=strategy)) + geom_line() + facet_wrap(~game)
dat %>%
dplyr::select(human_id, condition, game, round, pS1, pS2, pS3) %>%
group_by(human_id, condition, game, round) %>%
pivot_longer(cols=starts_with("pS"), names_to = "strategy", values_to = "probability") %>%
ggplot(aes(x=round, y = probability, colour=strategy)) + geom_line() + facet_wrap(~game)
summarise?
?summarise
dat %>%
dplyr::select(human_id, condition, game, round, pS1, pS2, pS3) %>%
group_by(human_id, condition, game, round) %>%
pivot_longer(cols=starts_with("pS"), names_to = "strategy", values_to = "probability") %>%
group_by(strategy, condition, game, round) %>%
summarise(p = mean(probability)) %>%
ggplot(aes(x=round, y = p, colour=strategy)) + geom_line() + facet_wrap(~game)
dat %>%
dplyr::select(human_id, condition, game, round, pS1, pS2, pS3) %>%
group_by(human_id, condition, game, round) %>%
pivot_longer(cols=starts_with("pS"), names_to = "strategy", values_to = "probability") %>%
group_by(strategy, condition, game, round) %>%
summarise(p = mean(probability)) %>%
ggplot(aes(x=round, y = p, colour=strategy)) + geom_line() + facet_wrap(condition~game)
dat %>%
dplyr::select(human_id, condition, game, round, pS1, pS2, pS3) %>%
group_by(human_id, condition, game, round) %>%
pivot_longer(cols=starts_with("pS"), names_to = "strategy", values_to = "probability") %>%
group_by(strategy, condition, game, round) %>%
summarise(p = mean(probability))
tmp$gamma[1:10,]
dat$pS3 <- tmp$gamma[,1]
dat %>%
dplyr::select(human_id, condition, game, round, pS1, pS2, pS3) %>%
group_by(human_id, condition, game, round) %>%
pivot_longer(cols=starts_with("pS"), names_to = "strategy", values_to = "probability") %>%
group_by(strategy, condition, game, round) %>%
summarise(p = mean(probability)) %>%
ggplot(aes(x=round, y = p, group=strategy, colour=strategy)) + geom_line() + facet_wrap(condition~game)
dat <- read.csv("../data20180719.csv")
tmp <- forwardbackward(fmod_all)
dat$pS1 <- tmp$gamma[,1]
dat$pS2 <- tmp$gamma[,2]
dat$pS3 <- tmp$gamma[,3]
dat %>%
dplyr::select(human_id, condition, game, round, pS1, pS2, pS3) %>%
group_by(human_id, condition, game, round) %>%
pivot_longer(cols=starts_with("pS"), names_to = "strategy", values_to = "probability") %>%
group_by(strategy, condition, game, round) %>%
summarise(p = mean(probability)) %>%
ggplot(aes(x=round, y = p, group=strategy, colour=strategy)) + geom_line() + facet_wrap(condition~game)
