mean_lik_2$game <- factor(mean_lik_2$game,levels=c("rps","fwg","shootout"))
data_long2 <- gather(mean_lik_2, strategy, probability, mean_Nash_lik:mean_ToM_Tr_lik, factor_key=TRUE)
# make sure the different games are ordered in the way they were played
# data_long2$game <- factor(data_long$game,levels=c("rps","fwg","shootout"))
ggplot(data_long2,aes(x=round,y=probability,colour=strategy)) +
geom_line() +
facet_grid(game~stage) +
scale_colour_discrete(name = "Strategy", labels = c( "Nash", "Q_Learning + within Tr", "ToM + Tr"))
setClass("dummyResponse", contains="response")
setGeneric("dummyResponse", function(y, pstart = NULL, fixed = NULL, ...) standardGeneric("dummyResponse"))
setMethod("dummyResponse",
signature(y="ANY"),
function(y,pstart=NULL,fixed=NULL, ...) {
y <- matrix(y,length(y))
x <- matrix(1)
parameters <- list()
npar <- 0
mod <- new("dummyResponse",parameters=parameters,fixed=logical(0),x=x,y=y,npar=npar)
mod
}
)
setMethod("show","dummyResponse",
function(object) {
cat("Dummy for fixed likelihood Model \n")
}
)
setMethod("dens","dummyResponse",
function(object,log=FALSE) {
if(log) log(as.numeric(object@y)) else as.numeric(object@y)
}
)
setMethod("getpars","dummyResponse",
function(object,which="pars",...) {
switch(which,
"pars" = {
pars <- numeric(0)
},
"fixed" = {
pars <- logical(0)
}
)
return(pars)
}
)
setMethod("setpars","dummyResponse",
function(object, values, which="pars", ...) {
npar <- npar(object)
if(length(values)!=npar) stop("length of 'values' must be",npar)
# determine whether parameters or fixed constraints are being set
nms <- ""
switch(which,
"pars"= {
},
"fixed" = {
}
)
names(object@parameters) <- nms
return(object)
}
)
setMethod("fit","dummyResponse",
function(object,w) {
return(object)
}
)
setMethod("predict","dummyResponse",
function(object) {
ret <- object@y
return(ret)
}
)
## EXPERIMENT 1 Data
Nash_lik <- exp1_lik_by_trial$Nash_lik
QLS_lik <- exp1_lik_by_trial$QLS_lik
Bayes_Tr_lik <- exp1_lik_by_trial$Bayes_Tr_lik
# QLS_lik[which(QLS_lik == 0)] <- .001
# QLS_lik[is.na(QLS_lik)] <- .33 # this is a hack; there shouldn't be any missing values
nsubject <- length(unique(exp1_lik_by_trial$human_id)) # number of participants
ngame <- 3 # number of games
ntrial <- c(50,50,50) # numer of trials in each game
rModels <- list(
list(
dummyResponse(QLS_lik)
),
list(
dummyResponse(Nash_lik)
),
list(
dummyResponse(Bayes_Tr_lik)
)
)
trstart <- matrix(c(0.8,0.1,0.1,0.1,0.8,0.1,.1,.1,.8),ncol=3)
transition <- list()
transition[[1]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[1,],family=multinomial("identity"))
transition[[2]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[2,],family=multinomial("identity"))
transition[[3]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[3,],family=multinomial("identity"))
instart <- c(1/3,1/3,1/3)
inMod <- transInit(~1,nstates=3,pstart=instart,family=multinomial("identity"),data=data.frame(rep(1,nsubject*ngame)))
mod1 <- makeDepmix(response=rModels,transition=transition,prior=inMod,ntimes=rep(ntrial,nsubject))
fmod1 <- fit(mod1, emcontrol=em.control(random.start=FALSE))
# No switching. Force off diagonal initial elements of transtion matrix to 0
trstart <- matrix(c(1,0,0,0,1,0,0,0,1),ncol=3)
transition <- list()
transition[[1]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[1,],family=multinomial("identity"))
transition[[2]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[2,],family=multinomial("identity"))
transition[[3]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[3,],family=multinomial("identity"))
mod1_noswitch <- makeDepmix(response=rModels,transition=transition,prior=inMod,ntimes=rep(ntrial,nsubject))
fmod1_noswitch <- fit(mod1_noswitch, emcontrol=em.control(random.start=FALSE))
# p-value for comparison between a model with strategy switches and one without:
1-pchisq(-2*as.numeric(logLik(fmod1_noswitch)) - (-2*as.numeric(logLik(fmod1))),df=6)
exp1_lik_by_trial["post_QLS"] <- forwardbackward(fmod1)$gamma[,1]
exp1_lik_by_trial["post_Nash"] <- forwardbackward(fmod1)$gamma[,2]
exp1_lik_by_trial["post_Bayes_Tr"] <- forwardbackward(fmod1)$gamma[,3]
mean_post_1 <- exp1_lik_by_trial %>%
dplyr::select(human_id,game,condition, round, post_QLS, post_Bayes_Tr) %>%
group_by(game,condition, round) %>%
summarise(QLS_posterior = mean(post_QLS, na.rm = TRUE),
Bayes_Transfer_posterior = mean(post_Bayes_Tr, na.rm = TRUE))
mean_post_1$game <- factor(mean_post_1$game,levels=c("rps","fwg","numbers"))
exp1_lik_by_trial["post_QLS"] <- forwardbackward(fmod1)$gamma[,1]
exp1_lik_by_trial["post_Nash"] <- forwardbackward(fmod1)$gamma[,2]
exp1_lik_by_trial["post_Bayes_Tr"] <- forwardbackward(fmod1)$gamma[,3]
mean_post_1 <- exp1_lik_by_trial %>%
dplyr::select(human_id,game,condition, round, post_QLS, post_Bayes_Tr) %>%
dplyr::group_by(game,condition, round) %>%
dplyr::summarise(QLS_posterior = mean(post_QLS, na.rm = TRUE),
Bayes_Transfer_posterior = mean(post_Bayes_Tr, na.rm = TRUE))
mean_post_1$game <- factor(mean_post_1$game,levels=c("rps","fwg","numbers"))
data_long_post1 <- dplyr::gather(mean_post_1, strategy, probability, QLS_posterior,Bayes_Transfer_posterior, factor_key=TRUE)
exp1_lik_by_trial["post_QLS"] <- forwardbackward(fmod1)$gamma[,1]
exp1_lik_by_trial["post_Nash"] <- forwardbackward(fmod1)$gamma[,2]
exp1_lik_by_trial["post_Bayes_Tr"] <- forwardbackward(fmod1)$gamma[,3]
mean_post_1 <- exp1_lik_by_trial %>%
dplyr::select(human_id,game,condition, round, post_QLS, post_Bayes_Tr) %>%
dplyr::group_by(game,condition, round) %>%
dplyr::summarise(QLS_posterior = mean(post_QLS, na.rm = TRUE),
Bayes_Transfer_posterior = mean(post_Bayes_Tr, na.rm = TRUE))
mean_post_1$game <- factor(mean_post_1$game,levels=c("rps","fwg","numbers"))
data_long_post1 <- gather(mean_post_1, strategy, probability, QLS_posterior,Bayes_Transfer_posterior, factor_key=TRUE)
ggplot(data_long_post1,aes(x=round,y=probability,colour=strategy)) +
geom_line() +
facet_grid(game~condition)
setClass("dummyResponse", contains="response")
setGeneric("dummyResponse", function(y, pstart = NULL, fixed = NULL, ...) standardGeneric("dummyResponse"))
setMethod("dummyResponse",
signature(y="ANY"),
function(y,pstart=NULL,fixed=NULL, ...) {
y <- matrix(y,length(y))
x <- matrix(1)
parameters <- list()
npar <- 0
mod <- new("dummyResponse",parameters=parameters,fixed=logical(0),x=x,y=y,npar=npar)
mod
}
)
setMethod("show","dummyResponse",
function(object) {
cat("Dummy for fixed likelihood Model \n")
}
)
setMethod("dens","dummyResponse",
function(object,log=FALSE) {
if(log) log(as.numeric(object@y)) else as.numeric(object@y)
}
)
setMethod("getpars","dummyResponse",
function(object,which="pars",...) {
switch(which,
"pars" = {
pars <- numeric(0)
},
"fixed" = {
pars <- logical(0)
}
)
return(pars)
}
)
setMethod("setpars","dummyResponse",
function(object, values, which="pars", ...) {
npar <- npar(object)
if(length(values)!=npar) stop("length of 'values' must be",npar)
# determine whether parameters or fixed constraints are being set
nms <- ""
switch(which,
"pars"= {
},
"fixed" = {
}
)
names(object@parameters) <- nms
return(object)
}
)
setMethod("fit","dummyResponse",
function(object,w) {
return(object)
}
)
setMethod("predict","dummyResponse",
function(object) {
ret <- object@y
return(ret)
}
)
## EXPERIMENT 1 Data
Nash_lik <- exp1_lik_by_trial$Nash_lik
QLS_lik <- exp1_lik_by_trial$QLS_lik
Bayes_Tr_lik <- exp1_lik_by_trial$Bayes_Tr_lik
# QLS_lik[which(QLS_lik == 0)] <- .001
# QLS_lik[is.na(QLS_lik)] <- .33 # this is a hack; there shouldn't be any missing values
nsubject <- length(unique(exp1_lik_by_trial$human_id)) # number of participants
ngame <- 3 # number of games
ntrial <- c(50,50,50) # numer of trials in each game
rModels <- list(
list(
dummyResponse(QLS_lik)
),
list(
dummyResponse(Nash_lik)
),
list(
dummyResponse(Bayes_Tr_lik)
)
)
trstart <- matrix(c(0.8,0.1,0.1,0.1,0.8,0.1,.1,.1,.8),ncol=3)
transition <- list()
transition[[1]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[1,],family=multinomial("identity"))
transition[[2]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[2,],family=multinomial("identity"))
transition[[3]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[3,],family=multinomial("identity"))
instart <- c(1/3,1/3,1/3)
inMod <- transInit(~1,nstates=3,pstart=instart,family=multinomial("identity"),data=data.frame(rep(1,nsubject*ngame)))
mod1 <- makeDepmix(response=rModels,transition=transition,prior=inMod,ntimes=rep(ntrial,nsubject))
fmod1 <- fit(mod1, emcontrol=em.control(random.start=FALSE))
# No switching. Force off diagonal initial elements of transtion matrix to 0
trstart <- matrix(c(1,0,0,0,1,0,0,0,1),ncol=3)
transition <- list()
transition[[1]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[1,],family=multinomial("identity"))
transition[[2]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[2,],family=multinomial("identity"))
transition[[3]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[3,],family=multinomial("identity"))
mod1_noswitch <- makeDepmix(response=rModels,transition=transition,prior=inMod,ntimes=rep(ntrial,nsubject))
fmod1_noswitch <- fit(mod1_noswitch, emcontrol=em.control(random.start=FALSE))
# p-value for comparison between a model with strategy switches and one without:
1-pchisq(-2*as.numeric(logLik(fmod1_noswitch)) - (-2*as.numeric(logLik(fmod1))),df=6)
exp1_lik_by_trial["post_QLS"] <- forwardbackward(fmod1)$gamma[,1]
exp1_lik_by_trial["post_Nash"] <- forwardbackward(fmod1)$gamma[,2]
exp1_lik_by_trial["post_Bayes_Tr"] <- forwardbackward(fmod1)$gamma[,3]
mean_post_1 <- exp1_lik_by_trial %>%
dplyr::select(human_id,game,condition, round, post_QLS, post_Bayes_Tr) %>%
dplyr::group_by(game,condition, round) %>%
dplyr::summarise(QLS_posterior = mean(post_QLS, na.rm = TRUE),
Bayes_Transfer_posterior = mean(post_Bayes_Tr, na.rm = TRUE))
mean_post_1$game <- factor(mean_post_1$game,levels=c("rps","fwg","numbers"))
data_long_post1 <- gather(mean_post_1, strategy, probability, QLS_posterior,Bayes_Transfer_posterior, factor_key=TRUE)
ggplot(data_long_post1,aes(x=round,y=probability,colour=strategy)) +
geom_line() +
facet_grid(game~condition)
## EXPERIMENT 2 DATA
# we need to have "dat" available and lik_by_trial
QLS_lik <- exp2_lik_by_trial$QLS_lik
Nash_lik <- exp2_lik_by_trial$Nash_lik
Bayes_Tr_lik <- exp2_lik_by_trial$Bayes_Tr_lik
nsubject <- length(unique(exp2_lik_by_trial$human_id)) # number of participants
ngame <- 12 # number of games
#ntrial <- c(60,60,60)
ntrial <- c(20,20,10,10,20,20,10,10,20,20,10,10) # number of trials in each game
rModels <- list(
list(
dummyResponse(QLS_lik)
),
list(
dummyResponse(Nash_lik)
),
list(
dummyResponse(Bayes_Tr_lik)
)
)
trstart <- matrix(c(0.8,0.1,0.1,0.1,0.8,0.1,.1,.1,.8),ncol=3)
transition <- list()
transition[[1]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[1,],family=multinomial("identity"))
transition[[2]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[2,],family=multinomial("identity"))
transition[[3]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[3,],family=multinomial("identity"))
instart <- c(1/3,1/3,1/3)
inMod <- transInit(~1,nstates=3,pstart=instart,family=multinomial("identity"),data=data.frame(rep(1,nsubject*ngame)))
mod <- makeDepmix(response=rModels,transition=transition,prior=inMod,ntimes=rep(ntrial,nsubject))
fmod <- fit(mod, emcontrol=em.control(random.start=TRUE))
exp2_lik_by_trial["post_QLSw"] <- forwardbackward(fmod)$gamma[,1]
exp2_lik_by_trial["post_Nash"] <- forwardbackward(fmod)$gamma[,2]
exp2_lik_by_trial["post_Bayes_Tr"] <- forwardbackward(fmod)$gamma[,3]
mean_post_2 <- exp2_lik_by_trial %>%
dplyr::select(human_id,game,stage,round_condition, round, post_QLSw, post_Bayes_Tr) %>%
group_by(game,stage, round) %>%
summarise(mean_post_QLSw = mean(post_QLSw, na.rm = TRUE),
mean_post_Tr = mean(post_Bayes_Tr, na.rm = TRUE))
mean_post_2$game <- factor(mean_post_2$game,levels=c("rps","fwg","shootout"))
exp2_lik_by_trial["post_QLSw"] <- forwardbackward(fmod)$gamma[,1]
exp2_lik_by_trial["post_Nash"] <- forwardbackward(fmod)$gamma[,2]
exp2_lik_by_trial["post_Bayes_Tr"] <- forwardbackward(fmod)$gamma[,3]
mean_post_2 <- exp2_lik_by_trial %>%
dplyr::select(human_id,game,stage,round_condition, round, post_QLSw, post_Bayes_Tr) %>%
dplyr::group_by(game,stage, round) %>%
dplyr::summarise(mean_post_QLSw = mean(post_QLSw, na.rm = TRUE),
mean_post_Tr = mean(post_Bayes_Tr, na.rm = TRUE))
mean_post_2$game <- factor(mean_post_2$game,levels=c("rps","fwg","shootout"))
data_long_post2 <- gather(mean_post_2, strategy, probability, mean_post_QLSw,mean_post_Tr, factor_key=TRUE)
ggplot(data_long_post2,aes(x=round,y=probability,colour=strategy)) +
geom_line() +
facet_grid(game~stage)
View(mean_post_2)
View(mean_post_1)
View(mean_post_2)
library(papaja)
require(knitr)
require(citr)
require(bookdown)
require(natbib)
# using some functions dplyr, ggpubr, PairedData and sjPlot. Need to be loaded.
library(plyr)
library(tidyr)
library(dplyr)
library(MASS)
library(ggpubr)
library(afex)
library(PairedData)
library(multcompView)
library(lsmeans)
library(magick)
library(depmixS4)
# Seed for random number generation
set.seed(42)
citr:::insert_citation()
install.packages(natbib)
install.packages("natbib")
0.622-0.333
exp1_lik_by_trial  <- read.csv("../exp1_lik_by_trial.csv")
exp1_lik_by_trial <- exp1_lik_by_trial %>%
dplyr::mutate(Nash_lik = ifelse( (game == "rps" | game == "fwg"),1/3, 1/5))
mean_lik <- exp1_lik_by_trial %>%
dplyr::select(human_id,condition,game, round, Nash_lik, QLS_lik, Bayes_Tr_lik) %>%
group_by(condition,game,round) %>%
dplyr::summarise(mean_QLS_lik = mean(QLS_lik, na.rm = TRUE),
mean_Nash_lik = mean(Nash_lik, na.rm = TRUE),
mean_Tr_lik = mean(Bayes_Tr_lik, na.rm = TRUE))
mean_lik$game <- factor(mean_lik$game,levels=c("rps","fwg","numbers"))
data_long <- tidyr::gather(mean_lik, strategy, probability, mean_QLS_lik:mean_Tr_lik, factor_key=TRUE)
# make sure the different games are ordered in the way they were played
# data_long$game <- factor(data_long$game,levels=c("rps","fwg","numbers"))
ggplot(data_long,aes(x=round,y=probability,colour=strategy)) +
geom_line() +
facet_grid(game~condition) +
scale_colour_discrete(name = "Strategy", labels = c("Q_learning", "Nash", "ToM"))
exp2_lik_by_trial <- read.csv("../Experiment_2/exp2_lik_by_trial.csv")
exp2_lik_by_trial <-  exp2_lik_by_trial %>% dplyr::mutate(Nash_lik = 1/3)
mean_lik_2 <- exp2_lik_by_trial %>%
dplyr::select(human_id,game,stage,round_condition, round, Nash_lik, QLS_lik_within, Bayes_Tr_lik) %>%
dplyr::group_by(game,stage,round) %>%
dplyr::summarise(mean_Nash_lik = mean(Nash_lik, na.rm = TRUE),
mean_QLS_within_lik = mean(QLS_lik_within, na.rm = TRUE),
mean_ToM_Tr_lik = mean(Bayes_Tr_lik, na.rm = TRUE))
mean_lik_2$game <- factor(mean_lik_2$game,levels=c("rps","fwg","shootout"))
data_long2 <- gather(mean_lik_2, strategy, probability, mean_Nash_lik:mean_ToM_Tr_lik, factor_key=TRUE)
# make sure the different games are ordered in the way they were played
# data_long2$game <- factor(data_long$game,levels=c("rps","fwg","shootout"))
ggplot(data_long2,aes(x=round,y=probability,colour=strategy)) +
geom_line() +
facet_grid(game~stage) +
scale_colour_discrete(name = "Strategy", labels = c( "Nash", "Q_Learning + within Tr", "ToM + Tr"))
# No switching. Force off diagonal initial elements of transtion matrix to 0
trstart <- matrix(c(1,0,0,0,1,0,0,0,1),ncol=3)
transition <- list()
transition[[1]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[1,],family=multinomial("identity"))
transition[[2]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[2,],family=multinomial("identity"))
transition[[3]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[3,],family=multinomial("identity"))
mod1_noswitch <- makeDepmix(response=rModels,transition=transition,prior=inMod,ntimes=rep(ntrial,nsubject))
fmod1_noswitch <- fit(mod1_noswitch, emcontrol=em.control(random.start=FALSE))
# p-value for comparison between a model with strategy switches and one without:
1-pchisq(-2*as.numeric(logLik(fmod1_noswitch)) - (-2*as.numeric(logLik(fmod1))),df=6)
# No switching. Force off diagonal initial elements of transtion matrix to 0
trstart <- matrix(c(1,0,0,0,1,0,0,0,1),ncol=3)
transition <- list()
transition[[1]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[1,],family=multinomial("identity"))
transition[[2]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[2,],family=multinomial("identity"))
transition[[3]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[3,],family=multinomial("identity"))
mod1_noswitch <- makeDepmix(response=rModels,transition=transition,prior=inMod,ntimes=rep(ntrial,nsubject))
fmod1_noswitch <- fit(mod1_noswitch, emcontrol=em.control(random.start=FALSE))
# p-value for comparison between a model with strategy switches and one without:
1-pchisq(-2*as.numeric(logLik(fmod1_noswitch)) - (-2*as.numeric(logLik(fmod1))),df=6)
## EXPERIMENT 2 DATA
# we need to have "dat" available and lik_by_trial
QLS_lik <- exp2_lik_by_trial$QLS_lik
Nash_lik <- exp2_lik_by_trial$Nash_lik
Bayes_Tr_lik <- exp2_lik_by_trial$Bayes_Tr_lik
nsubject <- length(unique(exp2_lik_by_trial$human_id)) # number of participants
ngame <- 12 # number of games
#ntrial <- c(60,60,60)
ntrial <- c(20,20,10,10,20,20,10,10,20,20,10,10) # number of trials in each game
rModels <- list(
list(
dummyResponse(QLS_lik)
),
list(
dummyResponse(Nash_lik)
),
list(
dummyResponse(Bayes_Tr_lik)
)
)
trstart <- matrix(c(0.8,0.1,0.1,0.1,0.8,0.1,.1,.1,.8),ncol=3)
transition <- list()
transition[[1]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[1,],family=multinomial("identity"))
transition[[2]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[2,],family=multinomial("identity"))
transition[[3]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[3,],family=multinomial("identity"))
instart <- c(1/3,1/3,1/3)
inMod <- transInit(~1,nstates=3,pstart=instart,family=multinomial("identity"),data=data.frame(rep(1,nsubject*ngame)))
mod <- makeDepmix(response=rModels,transition=transition,prior=inMod,ntimes=rep(ntrial,nsubject))
fmod <- fit(mod, emcontrol=em.control(random.start=TRUE))
exp2_lik_by_trial["post_QLSw"] <- forwardbackward(fmod)$gamma[,1]
exp2_lik_by_trial["post_Nash"] <- forwardbackward(fmod)$gamma[,2]
exp2_lik_by_trial["post_Bayes_Tr"] <- forwardbackward(fmod)$gamma[,3]
mean_post_2 <- exp2_lik_by_trial %>%
dplyr::select(human_id,game,stage,round_condition, round, post_QLSw, post_Bayes_Tr) %>%
dplyr::group_by(game,stage, round) %>%
dplyr::summarise(mean_post_QLSw = mean(post_QLSw, na.rm = TRUE),
mean_post_Tr = mean(post_Bayes_Tr, na.rm = TRUE))
mean_post_2$game <- factor(mean_post_2$game,levels=c("rps","fwg","shootout"))
data_long_post2 <- gather(mean_post_2, strategy, probability, mean_post_QLSw,mean_post_Tr, factor_key=TRUE)
ggplot(data_long_post2,aes(x=round,y=probability,colour=strategy)) +
geom_line() +
facet_grid(game~stage)
# Plot results by game and block (for all 3 games, learning is happening)
p <- ggboxplot(dat2, x = "game", y = "block_score", palette = c("#00AFBB", "#E7B800"),order = c("rps", "fwg","numbers"), fill="block",ylab = "Percentage score", xlab = "Games")
p + facet_grid(. ~ condition)
# Plot average  scores per game
ggboxplot(dat3, x = "game.f", y = "game_score", group = 1, add =c("mean_ci","jitter"), color="game.f", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score", xlab = "Games")
# Plot average  scores per game
ggboxplot(dat3, x = "game.f", y = "game_score", group = 1, add =c("mean_ci","jitter"), color="game.f", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","Numbers"), ylab = "Score", xlab = "Games")
# Plot average  scores per game
ggboxplot(dat3, x = "game.f", y = "game_score", group = 1, add =c("mean_ci","jitter"), color="game.f", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score", xlab = "Games")
# Plot average  scores per game
ggboxplot(dat3, x = "game.f", y = "game_score", group = 1, add =c("mean_ci","jitter"), color="game.f", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score", xlab = "Game", legend.title = "Game")
# Plot average  scores per game
ggboxplot(dat3, x = "game.f", y = "game_score", names = c("RPS","FWG","Numbers"),group = 1, add =c("mean_ci","jitter"), color="game.f", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score", xlab = "Game", legend.title = "Game")
# Plot average  scores per game
ggboxplot(dat3, x = "game.f", y = "game_score", names = c("RPS","FWG","Numbers"),group = 1, add =c("mean_ci","jitter"), color="game.f", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score", xlab = "Game", legend.title = "Game", alpha = 0.6)
# Plot average  scores per game
ggboxplot(dat3, x = "game.f", y = "game_score", names = c("RPS","FWG","Numbers"),group = 1, add =c("mean_ci","jitter"), alpha = 0.6, color="game.f", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score", xlab = "Game", legend.title = "Game")
p %>% ggadd(c("boxplot", "jitter"), color = "dose")
# Plot average  scores per game
ggboxplot(dat3, x = "game.f", y = "game_score", names = c("RPS","FWG","Numbers"),group = 1, add =c("mean_ci","jitter"), alpha = 0.6, color="game.f", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score", xlab = "Game", legend.title = "Game")
# Plot average  scores per game
ggboxplot(dat3, x = "game.f", y = "game_score",group = 1, add =c("mean_ci","jitter"), alpha = 0.6, color="game.f", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score", xlab = "Game", legend.title = "Game")
# Plot average  scores per game
ggboxplot(dat3, x = "game", y = "game_score",group = 1, add =c("mean_ci","jitter"), color="game.f", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score", xlab = "Game", legend.title = "Game")
# Plot average  scores per game
ggboxplot(dat3, x = "game", y = "game_score",group = 1, add =c("mean_ci","jitter"), color="game", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("rps", "fwg","number"), ylab = "Score", xlab = "Game", legend.title = "Game")
# Plot average  scores per game
ggboxplot(dat3, x = "game", y = "game_score",group = 1, add =c("mean_ci","jitter"), color="game", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("rps", "fwg","numbers"), ylab = "Score", xlab = "Game", legend.title = "Game")
# Plot average  scores per game
ggboxplot(dat3, x = "game", y = "game_score",group = 1, add =c("mean_ci","jitter"), color="game", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("rps", "fwg","numbers"), ylab = "Score", xlab = "Game", legend.title = "Game") + geom_point( alpha = 0.1 )
# Plot average  scores per game
ggboxplot(dat3, x = "game", y = "game_score",group = 1, add =c("mean_ci","jitter"), color="game", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("rps", "fwg","numbers"), ylab = "Score", xlab = "Game", legend.title = "Game") + geom_boxplot( alpha = 0.1 )
# Plot average  scores per game
ggboxplot(dat3, x = "game", y = "game_score",group = 1, add =c("mean_ci","jitter"), color="game", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("rps", "fwg","numbers"), ylab = "Score", xlab = "Game", legend.title = "Game") + geom_boxplot( alpha = 0.8 )
# Plot average  scores per game
ggboxplot(dat3, x = "game", y = "game_score",group = 1, add =c("mean_ci","jitter"), color="game", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("rps", "fwg","numbers"), ylab = "Score", xlab = "Game", legend.title = "Game") + geom_jitter( alpha = 0.8 )
# Plot average  scores per game
ggboxplot(dat3, x = "game", y = "game_score",group = 1, add =c("mean_ci","jitter"), color="game", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("rps", "fwg","numbers"), ylab = "Score", xlab = "Game", legend.title = "Game") + geom_jitter( alpha = 0.3 )
# Plot average  scores per game
ggboxplot(dat3, x = "game", y = "game_score",group = 1, add =c("mean_ci"), color="game", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("rps", "fwg","numbers"), ylab = "Score", xlab = "Game", legend.title = "Game") + geom_jitter( alpha = 0.3 )
# Plot average  scores per game
ggboxplot(dat3, x = "game", y = "game_score",group = 1, add =c("mean_ci","jitter"), color="game", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("rps", "fwg","numbers"), ylab = "Score", xlab = "Game", legend.title = "Game") + geom_jitter( aes(color = "game",alpha = 0.3 )
# Plot average  scores per game
ggboxplot(dat3, x = "game", y = "game_score",group = 1, add =c("mean_ci","jitter"), color="game", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("rps", "fwg","numbers"), ylab = "Score", xlab = "Game", legend.title = "Game") + geom_jitter( aes(color = "game"),alpha = 0.3 )
# Plot average  scores per game
ggboxplot(dat3, x = "game", y = "game_score",group = 1, add =c("mean_ci","jitter"), color="game", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("rps", "fwg","numbers"), ylab = "Score", xlab = "Game", legend.title = "Game") + geom_jitter( aes(color = "game",alpha = 0.3 ))
# Plot average  scores per game
ggboxplot(dat3, x = "game", y = "game_score",group = 1, add =c("mean_ci","jitter"), color="game", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("rps", "fwg","numbers"), ylab = "Score", xlab = "Game", legend.title = "Game") + geom_jitter( aes(color = game),alpha = 0.3 )
# Plot average  scores per game
ggboxplot(dat3, x = "game", y = "game_score",group = 1, add =c("mean_ci"), color="game", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("rps", "fwg","numbers"), ylab = "Score", xlab = "Game", legend.title = "Game") + geom_jitter( aes(color = game),alpha = 0.3 )
# Plot average  scores per game
ggboxplot(dat3, x = "game", y = "game_score",group = 1, add =c("mean_ci"), color="game", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("rps", "fwg","numbers"), ylab = "Score", xlab = "Game", legend.title = "Game") + geom_jitter( aes(color = game), width = 0.25, alpha = 0.3 )
# Plot average  scores per game
ggboxplot(dat3, x = "game", y = "game_score",group = 1, add =c("mean_ci"), color="game", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("rps", "fwg","numbers"), ylab = "Score", xlab = "Game", legend.title = "Game") + geom_jitter( aes(color = game), width = 0.2, alpha = 0.3 )
# p3 <- ggerrorplot(dat_int, x = "game.f", y = "int_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","SHOOT"), ylab = "Average Scores per game", xlab = "Games")
#
# p3 + facet_grid(. ~ opp_type)
p4 <- ggboxplot(dat_int, x = "game.f", y = "int_score", palette = c("#00AFBB", "#E7B800"),order = c("RPS", "FWG","SHOOT"), fill="interaction_lvl",ylab = "Percentage score", xlab = "Games", legend.title = "interaction level")
p4 + facet_grid(. ~ opp_type)
exp1_early_anova <- afex :: aov_car(
early_score ~ game.f*condition + Error(human_id/(game.f))
, data=exp1_dat2_6
, type = 3)
#apa_lm1 <- apa_print(exp1_early_anova)
means.int2 <- lsmeans(exp1_early_anova, specs = c("game.f","condition"))
trans26 <- summary(means.int2, infer = c(TRUE,TRUE),level = .95, adjust = "holm",ref=c("FWG","NUM"))
p2 <- ggerrorplot(exp1_dat2_6, x = "game.f", y = "early_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Average Score rounds 2-6", xlab = "Games")
p2 + facet_grid(. ~ condition)
p2 <- ggerrorplot(exp1_dat2_6, x = "game", y = "early_score", group = 1, color="game", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), ylab = "Average Score rounds 2-6", xlab = "Games")
p2 <- ggerrorplot(exp1_dat2_6, x = "game.f", y = "early_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Average Score rounds 2-6", xlab = "Games", legent.title= "Games")
p2 + facet_grid(. ~ condition)
p2 <- ggerrorplot(exp1_dat2_6, x = "game.f", y = "early_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Average Score rounds 2-6", xlab = "Games", legend.title= "Games")
p2 + facet_grid(. ~ condition)
p2 <- ggerrorplot(exp1_dat2_6, x = "game.f", y = "early_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Average Score rounds 2-6", xlab = "Games", legend.title= "Games")
p2 + facet_grid(. ~ condition)
p2 <- ggerrorplot(exp1_dat2_6, x = "game.f", y = "early_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score rounds 2-6", xlab = "Games", legend.title= "Games")
p2 + facet_grid(. ~ condition)
p2 <- ggerrorplot(exp1_dat2_6, x = "game.f", y = "early_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Early rounds score", xlab = "Games", legend.title= "Games")
p2 + facet_grid(. ~ condition)
p2 <- ggerrorplot(exp1_dat2_6, x = "game.f", y = "early_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Early rounds score", xlab = "Games", legend.title= "Games")
p2 + facet_grid(. ~ condition)
p2 <- ggerrorplot(exp1_dat2_6, x = "game.f", y = "early_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Early rounds score", xlab = "Games", legend.title= "Games")
p2 + facet_grid(. ~ condition)
