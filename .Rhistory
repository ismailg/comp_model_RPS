sd = sd(block_score, na.rm = TRUE)
)
group_by(dat2, game.f, condition,block) %>%
summarise(
count = n(),
mean = mean(block_score, na.rm = TRUE),
sd = sd(block_score, na.rm = TRUE)
)
# PLOTS  #############################
# Plot scores per game
ggboxplot(dat3, x = "game.f", y = "game_score", group = 1, add =c("mean_ci","jitter"), color="game.f", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score", xlab = "Games")
ggerrorplot(dat3, x = "game.f", y = "game_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score", xlab = "Games")
# Plot paired scores between games
#pd <- paired(rps,fwg)
#pd2 <- paired(fwg,num)
#head(pd)
#plot(pd, type = "profile")
#plot(pd2, type = "profile")
ggpaired(dat3, x = "game.f", y = "game_score",color = "game.f", id = "human_id", line.color = "gray", line.size = 0.4, palette = "npg")
# Plot results by game and block (for all 3 games, learning is happening)
ggboxplot(dat2, x = "game", y = "block_score", palette = c("#00AFBB", "#E7B800"),order = c("rps", "fwg","numbers"), fill="block",ylab = "Percentage score", xlab = "Games")
# Group data by game and ID
dat4 <- group_by(dat2, human_id,condition,game.f) %>% summarise(game_score = mean(block_score))
# Level 2 is harder to win against than level 1
ggboxplot(dat2, x = "condition", y = "block_score", palette = c("#00AFBB", "#E7B800"), fill="condition",ylab = "Percentage score", xlab = "Conditions")
ggerrorplot(dat2, x = "condition", y = "block_score", desc_stat = "mean_ci" , palette = c("#00AFBB", "#E7B800"), color="condition",ylab = "Percentage score", xlab = "Conditions")
# Main effect of block
ggerrorplot(dat2, x = "block", y = "block_score", desc_stat = "mean_ci" , palette = c("#00AFBB", "#E7B800"), color="block",ylab = "Percentage score", xlab = "Block")
# Breaking it down by game (seems to be true for RPS and FWG, less so for Numbers )
ggboxplot(dat4, x = "game.f", y = "game_score", palette = c("#00AFBB","#E7B800","#FC4E07"), fill="condition",order = c("RPS", "FWG","NUM"),ylab = "Game Score", xlab = "Conditions")
# Testing score against hypothesis of random play  ######################################
# Normality of scores
shapiro.test(dat3$game_score)
# Testing Scores against random play (expected 0 average score)
t.test(as.numeric(rps$game_score), mu = 0, alternative = "two.sided")
t.test(as.numeric(fwg$game_score), mu = 0, alternative = "two.sided")
t.test(as.numeric(num$game_score), mu = 0, alternative = "two.sided")
# AFEX PACKAGE FOR RUNNING RM ANOVA AND POST HOC TESTS ############################
citation(package = "afex", lib.loc = NULL, auto = NULL)
library(afex)
a1 <- aov_car( block_score ~ game.f*block*condition + Error(human_id/(game.f*block)), dat2)
summary(a1)
(a1_nice <- nice(a1, es = attr(a1$anova_table, "es"),
observed = attr(a1$anova_table, "observed"),
correction = attr(a1$anova_table, "correction"), MSE = NULL,
intercept = NULL, p_adjust_method = attr(a1$anova_table,
"p_adjust_method"), sig_symbols = attr(a1$anova_table, "sig_symbols")))
write.table(a1_nice,file = "a1.txt", sep = ",", quote = FALSE, row.names = F)
## Note to Self: no need to worry abour the HF warning. You don't have pb with sphericity according to Mauchly tests, and the warning only applies to Huynh-Feldt corrections for violations of sphericity.
#Pair waise comparison and post hoc tests for the interaction: Game * Block using lsmeans
# game score differences statistically significant?
(ls0 <- lsmeans(a1, "game.f"))
(lsm0 <- update(pairs(ls0, reverse = TRUE), by=NULL, adjust = "holm"))
# Main effect of block
(ls01 <- lsmeans(a1, "block"))
(lsm01 <- update(pairs(ls01, reverse = TRUE), by=NULL, adjust = "holm"))
lsmip(a1, ~block)
# Main effect of condition
(ls02 <- lsmeans(a1, "condition"))
(lsm02 <- update(pairs(ls02, reverse = TRUE), by=NULL, adjust = "holm"))
# Pairwise comparison of first halves by game ( first half RPS vs first half WFG scores....)
(ls1 <- lsmeans(a1, "block" , by="game.f"))
(lsm1 <- update(pairs(ls1, reverse = TRUE), by=NULL, adjust = "holm"))
lsmip(a1, game.f ~ block)
# Pairwise comparison of each game score by block (first half RPS vs second half RPS....) + Control for family wise error:
ls2 <- lsmeans(a1, c("block","game.f"))
(lsm2 <- update(pairs(ls2, reverse = TRUE), by=NULL, adjust = "holm"))
(contr2 <- contrast(ls2, list(G1H2vG2H1 = c(0,1,-1,0,0,0))))
(contr3 <- contrast(ls2, list(G1H1vs0 = c(1,0,0,0,0,0))))
lsmip(a1, block ~ game.f)
lsmip(a1, ~ block * game.f)
# Pairwise comparison of scores facing the two types of players by game:
lsc <- lsmeans(a1, "condition", by="game.f")
(lsmc <- update(pairs(lsc), by=NULL, adjust = "holm"))
plot(lsmc,by="game.f")
lsmip(a1, condition ~ game.f)
#Pair waise comparison and post hoc tests : Game by Block and Condition
#library(multcompView)
#use cld to check for comparison pairs belonging to same group, meaning not significantly different from each other...
#cld(lsm4)
#plots
ls4 <- lsmeans(a1, "block",c("condition","game.f"))
ls4
(lsm4 <- update(pairs(ls4, reverse = TRUE), by=NULL, adjust = "holm"))
plot(lsm4,by="game.f")
lsmip(a1, game.f ~ block | condition)
# Interaction plot of game and block by condition
lsmip(a1, game.f ~ block | condition)
lsmip(a1, condition ~ block * game.f)
# Transfer harder for level2 opponent than when facing level 1 opponent?
# learning to specifiy contrasts -
# the below compares the score on each block and game for each type and tells me which scores belong to same group
# the idea is that if transfer is harder vs lvl2 player, then fwg first half score for lvl2 facing player should be sig lower than fwg first-half score vs lvl1 agent.not the case here as thye belong to same group.
(means.int <- lsmeans(a1, specs = c("game.f","block","condition")))
# Transfer level1: compare H1FWG with H1RPS
con1  <- contrast(means.int, list(H1_G2vsH1_G1forlvl1 = c(-1,1,0,0,0,0,0,0,0,0,0,0), H1_G3vsH1_G1forlvl1=c(-1,0,1,0,0,0,0,0,0,0,0,0)))
summary(con1, adjust = "holm")
# Transfer level2: compare H1FWG with H1RPS
con2  <- contrast(means.int, list(H1_G2vsH1_G1forlvl2 = c(0,0,0,0,0,0,-1,1,0,0,0,0), H1_G3vsH1_G1forlvl2=c(0,0,0,0,0,0,-1,0,1,0,0,0)))
summary(con2, adjust = "holm")
# compare first half (H1) scores between level 1 and level 2 players in FWG and NUM
con3 <- contrast(means.int, list(G1vG2forH1 = c(0,1,0,0,0,0,0,-1,0,0,0,0), G2vG3forh1=c(0,0,1,0,0,0,0,0,-1,0,0,0)))
summary(con3, adjust ="holm")
# Within game learning harder for level2 opponent than when facing level 1 opponent? compare differences between block for each game and type
con4 <- contrast(means.int, list(L2vL1forRPS = c(1,0,0,-1,0,0,-1,0,0,1,0,0), L2vL1forFWG=c(0,1,0,0,-1,0,0,-1,0,0,1,0), L2vL1forNUM=c(0,0,1,0,0,-1,0,0,-1,0,0,1)))
summary(con4, adjust ="holm")
#looking at TRIALS 2 to 6 to test robustness of evidence for transfer of learning of opponent strategy #########
dat_26 <- subset(dat1,round >1 & round <7, drop =TRUE)
dat2_6 <- dat_26 %>%
group_by(human_id,condition,game.f,confidence,difficulty) %>%
summarise(early_score = mean(score))
write.csv(dat2_6,"exp1_early_rounds.csv")
# Check group means and SDs
group_by(dat2_6, game.f) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
group_by(dat2_6, game.f,condition) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
# plot early scores per game
ggerrorplot(dat2_6, x = "game.f", y = "early_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score", xlab = "Games")
# set contrasts for factors in dataset for condition and game
# setting contrast to compare early score between games across levels
contrasts(dat2_6$game.f) <- cbind(c(1,-1,0),c(0,-1,1))
contrasts(dat2_6$condition) <- c(1,-1)
# testing differences between early scores across games
library(afex)
aov_early <- aov_car(early_score ~ game.f*condition + Error(human_id/(game.f)),data=dat2_6,check_contrasts = FALSE)
summary(aov_early)
# Random intercecprt for participants
lme_early <- mixed(early_score ~ game.f*condition + (1 | human_id),data=dat2_6,check_contrasts = FALSE, type = 3, method = "KR")
summary(lme_early)
lme_early
aov_ear_nice <- nice(aov_early, es = attr(aov_early$anova_table, "es"),
observed = attr(aov_early$anova_table, "observed"),
correction = attr(aov_early$anova_table, "correction"), MSE = NULL,
intercept = NULL, p_adjust_method = attr(aov_early$anova_table,
"p_adjust_method"), sig_symbols = attr(aov_early$anova_table, "sig_symbols"))
write.table(aov_ear_nice,file = "aov_ear.txt", sep = ",", quote = FALSE, row.names = F)
# including confidence
#aov_conf_26 <- aov_car(early_score ~ game.f*condition*difficulty + Error(human_id/(game.f)),data=dat2_6)
#summary(aov_conf_26)
View(dat2_6)
lme_early <- mixed(early_score ~ game.f*opp_type*condition.f + (1 | human_id),data=dat2_6,check_contrasts = FALSE, type = 3, method = "KR")
library(afex)
# Set contrasts
contrasts(dat2_6$game.f) <- cbind(c(1,-1,0),c(0,-1,1))
contrasts(dat2_6$opp_type) <- c(1,-1)
View(dat2_6)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv("MyData.csv")
# using some functions dplyr, ggpubr, PairedData and sjPlot. Need to be loaded.
library(tidyr)
library(dplyr)
library(MASS)
library(ggpubr)
library(PairedData)
library(multcompView)
# transform 'winner' variable in numeric score
dat$score <- recode(dat$winner, human = 1, tie = 0, AI = -1)
# Create a new variable stage.f as a factor for the stages 1,2 ,3 4 in game
dat$stage.f <- factor(dat$stage, labels = c("Stage 1","Stage 2","Stage 3", "Stage 4"),levels=c(1,2,3,4))
# create a new variable "game.f" as a factor variable of games
dat$game.f <- factor(dat$game, labels = c("RPS","FWG","SHOOT"),levels=c("rps","fwg","shootout"))
# overall score to pay bonuses
dat_score <- dat %>%
group_by(prolific_id, condition) %>%
summarize(overall_score = sum(score))
dat_score$avg_bonus <- floor(dat_score$overall_score)*0.02
write.csv(dat_score,row.names=FALSE,file="bonus_payment.csv")
#Average bonus per participant
#bonus_to_be_paid <- mean(dat_score$avg_bonus)
# check num level 1 and level 2 facing players
group_by(dat_score, condition) %>%
summarise(count_conditions = n())
#Group data by human_id and calculate mean score per stage of each game.
dat$interaction_lvl <- recode(dat$stage, "1" = 1, "2" = 1, "3" = 2, "4" = 2) %>% factor(levels = c(1,2), labels = c("first interaction", "second interaction"))
# Create factor variable that determines type of opponent
dat$opp_type <- factor(dat$round_condition, labels=c("Level_1", "Level_2"), levels = c("Level1", "Level2"))
# Create factor variable coding condition (which opponent was faced first)
dat$condition.f <- factor(dat$condition, labels = c("lvl_1 first", "lvl_2 first"), levels = c("Level1","Level2"))
#Adjust shootout score tor eflect easier game
dat$adj_score <- recode(dat$score, ifelse(dat$game.f =="SHOOT", dat$score -0.33,dat$score))
# Create summarised dataset by interaction (all of first/second  opponent interactions by game)
dat_int <- dat %>%
group_by(human_id,game.f,opp_type,interaction_lvl,condition.f) %>%
summarize(int_score = mean(adj_score))
write.csv(dat, file = "dat_exp2.csv")
write.csv(dat_int, file = "dat_int_exp2.csv")
library(afex)
# Set contrasts
contrasts(dat2_6$game.f) <- cbind(c(1,-1,0),c(0,-1,1))
contrasts(dat2_6$opp_type) <- c(1,-1)
View(dat2_6)
#looking at TRIALS 2 to 6 to test robustness of evidence for transfer of learning of opponent strategy #########
dat_26 <- subset(dat,(round >1 & round < 7) & (interaction_lvl == "first interaction" ), drop =TRUE)
dat2_6 <- dat_26 %>%
group_by(human_id,condition.f,game.f,opp_type,confidence,difficulty) %>%
summarise(early_score = mean(adj_score))
# Check group means and SDs
group_by(dat2_6, game.f) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
group_by(dat2_6, game.f,opp_type) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
# plot scores per game
ggerrorplot(dat2_6, x = "game.f", y = "early_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","SHOOT"), ylab = "Score", xlab = "Games")
# testing differences between early scores across games
library(afex)
# Set contrasts
contrasts(dat2_6$game.f) <- cbind(c(1,-1,0),c(0,-1,1))
contrasts(dat2_6$opp_type) <- c(1,-1)
contrasts(dat2_6$condition.f) <- c(1,-1)
aov_early <- aov_car(early_score ~ game.f*opp_type*condition.f + Error(human_id/(game.f*opp_type)),data=dat2_6)
summary(aov_early)
# Random intercecprt for participants
lme_early <- mixed(early_score ~ game.f*opp_type*condition.f + (1 | human_id),data=dat2_6,check_contrasts = FALSE, type = 3, method = "KR")
summary(lme_early)
lme_early
(aov_ear_nice <- nice(aov_early, es = attr(aov_early$anova_table, "es"),
observed = attr(aov_early$anova_table, "observed"),
correction = attr(aov_early$anova_table, "correction"), MSE = NULL,
intercept = NULL, p_adjust_method = attr(aov_early$anova_table,
"p_adjust_method"), sig_symbols = attr(aov_early$anova_table, "sig_symbols")))
write.table(aov_ear_nice,file = "aov_ear.txt", sep = ",", quote = FALSE, row.names = F)
# Post hoc analyses : Checking early score by opponent and game
(ls4 <- lsmeans(aov_early, "game.f", by="opp_type"))
lme_early <- mixed(early_score ~ game.f*opp_type*condition.f + (1 | human_id),data=dat2_6,check_contrasts = FALSE, type = 3, method = "KR")
summary(lme_early)
lme_early
exp1_dat = read.csv("../exp1_data.csv")
exp1_model_comp <- data.frame()
for(id in unique(exp1_dat$human_id)) {
tdat <- subset(exp1_dat,human_id == id)
tot_score <- sum(tdat$score)
tot_time <- sum(tdat$human_rt)
early_dat <- subset(tdat,between(tdat$round,2,6) & (game =="fwg"))
#early_dat <- subset(tdat,between(tdat$round,2,6) & (game =="fwg" | game =="numbers") )
tr_score <- sum(early_dat$score)
id_results <- subset(exp1_comp_results, ID == id)
min_BIC <- apply(id_results[,c("Random_BIC","Bayes_Tr_BIC","Bayes_No_Tr_BIC","QL_states_BIC","ST_EWA_STATES_BIC")],1,min)
best_model <- c("Nash","BCH_BT","BCH_WT", "RL","EWA")[apply(id_results[,c("Random_BIC","Bayes_Tr_BIC","Bayes_No_Tr_BIC","QL_states_BIC","ST_EWA_STATES_BIC")],1,which.min)]
#
exp1_model_comp <- rbind(exp1_model_comp,
data.frame(
"human_id" = id,
"condition" = exp1_dat[exp1_dat$human_id==id,"condition"][1],
"Early_game_score" = tr_score,
"Total_score" = tot_score,
"Best_model" = best_model
#"Total_time" = sum(tdat$human_rt),
))
}
library(papaja)
library(kableExtra)
require(knitr)
require(citr)
require(bookdown)
# using some functions dplyr, ggpubr, PairedData and sjPlot. Need to be loaded.
library(plyr)
library(tidyr)
library(dplyr)
library(MASS)
library(ggpubr)
library(afex)
library(PairedData)
library(multcompView)
library(lsmeans)
library(magick)
library(depmixS4)
# Seed for random number generation
set.seed(42)
options(tinytex.verbose = TRUE)
#add_wordcount_filter(NULL, error = FALSE)
knitr::include_graphics("images/feedback_rps.png")
dat1 <- read.csv("../data20180719.csv")
# transform 'winner' variable in numeric score
dat1$score <- recode(dat1$winner, human = 1, tie = 0, ai = -1)
# create a new variable 'block' with round 1...25 = block 1 and round 26...50 as block 2
dat1$block <- factor(as.numeric(cut(dat1$round,2)),labels =c("first half", "second half"))
# create a new variable "game.f" as a factor variable of games
dat1$game.f <- factor(dat1$game, labels = c("RPS","FWG","Numbers"),levels=c("rps","fwg","numbers"))
#Group data by human_id and calculate mean score per block of each game.
dat2 <- dat1 %>%
group_by(human_id,condition,game,block,game.f) %>%
summarize(block_score = mean(score))
# Group data by game and ID
dat3 <- group_by(dat2, human_id,game.f,game) %>% summarise(game_score = mean(block_score))
# head(dat3,6)
# Subsetting scores data by game
rps <- subset(dat3,  game.f == "RPS",game_score)
fwg <- subset(dat3,  game.f == "FWG",game_score)
num <- subset(dat3,  game.f == "Numbers",game_score)
# head(rps,6)
# Plot average  scores per game
dat2 %>%
mutate(game = factor(game)) %>%
mutate(game = forcats::fct_recode(game, RPS = "rps", FWG = "fwg", Numbers = "numbers")) %>%
mutate(game = factor(game, levels = c("RPS", "FWG", "Numbers"))) %>%
mutate(condition = factor(condition, levels = c("Level1", "Level2"))) %>%
mutate(condition = forcats::fct_recode(condition, "Level 1" = "Level1", "Level 2" = "Level2")) %>%
ggplot(aes(x = game, y = block_score, colour = block)) + stat_summary(fun.data = "mean_ci", position = position_dodge2(width=.8), geom = "crossbar")  + geom_point(position=position_jitterdodge(), alpha=.4) + ylab("Score") + xlab("Game") + facet_grid(. ~ condition) + theme_apa() + geom_hline(yintercept = 0, lty=2)
#+ geom_boxplot(alpha=.4) + geom_point(position=position_jitterdodge(), alpha=.4) + ylab("Score") + xlab("Game") + facet_grid(. ~ condition) + theme_apa() + geom_hline(yintercept = 0, lty=2)
#geom_jitter(aes(colour=block, fill=block), width=.2) + facet_grid(. ~ condition)
# ggboxplot(x = "game", y = "block_score", colour="block", fill="block", add =c("mean_ci"), palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUMBERS"), ylab = "Score", xlab = "Game", legend.title = "Block") + geom_jitter(aes(color = block, fill = block), width = 0.2, alpha = 0.3 ) + facet_grid(. ~ condition)
# Plot results by game and block (for all 3 games, learning is happening)
dat2 %>%
mutate(game = forcats::fct_recode(as.factor(game), RPS = "rps", FWG = "fwg", Numbers = "numbers")) %>%
mutate(condition = factor(condition, levels = c("Level1", "Level2"))) %>%
mutate(condition = forcats::fct_recode(condition, "Level 1" = "Level1", "Level 2" = "Level2")) %>%
ggboxplot(x = "game", y = "block_score", palette = c("#00AFBB", "#E7B800"),order = c("RPS", "FWG","Numbers"), fill="block", ylab = "Percentage score", xlab = "Games") +  facet_grid(. ~ condition)
tmp <- afex::aov_car(
block_score ~ game.f*condition*block + Error(human_id/(game.f*block))
, data=dat2
, type = 3)
#apa_lm1 <- apa_print(exp1_early_anova)
#means.int2 <- lsmeans(exp1_early_anova, specs = c("game.f","condition"))
#trans26 <- summary(means.int2, infer = c(TRUE,TRUE),level = .95, adjust = "holm",ref=c("FWG","Numbers"))
dat_26 <- subset(dat1,round >1 & round <7, drop =TRUE)
exp1_dat2_6 <- dat_26 %>%
group_by(human_id,condition,game.f,confidence,difficulty) %>%
summarise(early_score = mean(score))
# Check group means and SDs by game and condition
group_by(exp1_dat2_6, game.f,condition) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
exp1_dat2_6 %>%
mutate(game = factor(game.f)) %>%
mutate(game = forcats::fct_recode(game, Numbers = "Numbers")) %>%
mutate(game = factor(game, levels = c("RPS", "FWG", "Numbers"))) %>%
mutate(condition = factor(condition, levels = c("Level1", "Level2"))) %>%
mutate(condition = forcats::fct_recode(condition, "Level 1" = "Level1", "Level 2" = "Level2")) %>%
ggplot(aes(x = game, y = early_score, colour=game)) + stat_summary(fun.data = "mean_ci", geom = "crossbar")  + geom_jitter(alpha=.4) + ylab("Early score") + xlab("Game") + facet_grid(. ~ condition) + theme_apa() + geom_hline(yintercept = 0, lty=2) + scale_color_discrete() + theme(legend.position = "none")
#p2 <- ggerrorplot(exp1_dat2_6, x = "game.f", y = "early_score", group = 1, color="game.f", desc_stat = "mean_se",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","Numbers"), ylab = "Early rounds score", xlab = "Games")
#p2 + facet_grid(. ~ condition)
exp1_early_anova <- afex :: aov_car(
early_score ~ game.f*condition + Error(human_id/(game.f))
, data=exp1_dat2_6
, type = 3)
exp1_early_anova
#apa_lm1 <- apa_print(exp1_early_anova)
means.int2 <- lsmeans(exp1_early_anova, specs = c("game.f","condition"))
trans26 <- summary(means.int2, infer = c(TRUE,TRUE),level = .95, adjust = "holm",ref=c("FWG","Numbers"))
# apa_table(trans26, caption = "Average early round scores by game and condition in first experiment")
knitr::include_graphics("images/shootout.jpg")
dat_int <- read.csv(file = "../Experiment_2/dat_int_exp2.csv")
exp2_anova <- afex::aov_car(
int_score ~ (game.f*interaction_lvl*condition.f*opp_type) + Error(human_id/(game.f*interaction_lvl*opp_type))
, data = dat_int
, type = 3
)
(ls0 <- lsmeans(exp2_anova, "game.f", by = "opp_type"))
(ls0 <- update(pairs(ls0, reverse = TRUE), by=NULL, adjust = "holm"))
apa_lm <- apa_print(exp2_anova)
# Plot results by game and block (for all 3 games, learning is happening)
dat_int %>%
mutate(game.f = forcats::fct_recode(game.f, Shootout = "SHOOT")) %>%
mutate(game.f = factor(game.f, levels = c("RPS", "FWG", "Shootout"))) %>%
mutate(opp_type = forcats::fct_recode(as.factor(opp_type), "Level 1" = "Level_1", "Level 2" = "Level_2")) %>%
mutate(encounter = interaction_lvl) %>%
ggplot(aes(x = game.f, y = int_score, colour = encounter)) + stat_summary(fun.data = "mean_ci", position = position_dodge2(width=.8), geom = "crossbar")  + geom_point(position=position_jitterdodge(), alpha=.4) + ylab("Score") + xlab("Game") + facet_grid(. ~ opp_type) + theme_apa() + geom_hline(yintercept = 0, lty=2)
# p3 <- ggerrorplot(dat_int, x = "game.f", y = "int_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","SHOOT"), ylab = "Average Scores per game", xlab = "Games")
#
# p3 + facet_grid(. ~ opp_type)
#p4 <- ggboxplot(dat_int, x = "game.f", y = "int_score", palette = c("#00AFBB", "#E7B800"),order = c("RPS", "FWG","SHOOT"), fill="interaction_lvl",ylab = "Percentage score", xlab = "Games", legend.title = "interaction level")
#p4 + facet_grid(. ~ opp_type)
# apa_table( apa_lm$table, caption = "ANOVA results for experiment 2", escape = FALSE)
dat <- read.csv(file = "../Experiment_2/dat_exp2.csv")
#looking at TRIALS 2 to 6 to test robustness of evidence for transfer of learning of opponent strategy #########
dat_26 <- subset(dat,(round >1 & round < 7) & (interaction_lvl == "first interaction" ), drop =TRUE)
exp2_dat2_6 <- dat_26 %>%
group_by(human_id,condition.f,game.f,opp_type,confidence,difficulty) %>%
summarise(early_score = mean(adj_score))
# Check group means and SDs
group_by(exp2_dat2_6, game.f) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
group_by(exp2_dat2_6, game.f,opp_type) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
exp2_dat2_6 %>%
mutate(game = factor(game.f)) %>%
mutate(game = forcats::fct_recode(game, Shootout = "SHOOT")) %>%
mutate(game = factor(game, levels = c("RPS", "FWG", "Shootout"))) %>%
mutate(opp_type = factor(opp_type, levels = c("Level_1", "Level_2"))) %>%
mutate(opp_type = forcats::fct_recode(opp_type, "Level 1" = "Level_1", "Level 2" = "Level_2")) %>%
ggplot(aes(x = game, y = early_score, colour=game)) + stat_summary(fun.data = "mean_ci", geom = "crossbar")  + geom_jitter(alpha=.4) + ylab("Early score") + xlab("Game") + facet_grid(. ~ opp_type) + theme_apa() + geom_hline(yintercept = 0, lty=2) + scale_color_discrete() + theme(legend.position = "none")
# plot scores per game
#p2 <- ggerrorplot(exp2_dat2_6, x = "game.f", y = "early_score", group = 1, color="game.f", desc_stat = "mean_se",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","SHOOT"), ylab = "Early rounds score", xlab = "Games", legend.title = "Games")
#p2 + facet_grid(. ~ opp_type)
exp1_comp_results <- read.csv(file="../exp1_all_results.csv")
exp1_comp_table <- table(exp1_comp_results[, "condition"],c("Nash","BCH_BT","BCH_WT", "RL","EWA")[apply(exp1_comp_results[,c("Random_BIC","Bayes_Tr_BIC","Bayes_No_Tr_BIC","QL_states_BIC","ST_EWA_STATES_BIC")],1,which.min)])
#write.csv(exp1_comp_table ,file="exp1_comp_table ",row.names = TRUE)
kable(exp1_comp_table)
exp1_comp_table
barplot(exp1_comp_table)
exp1_comp_df <- as.data.frame(exp1_comp_table)
barplot(exp1_comp_df)
exp1_comp_df <- as.data.frame(exp1_comp_table)
barplot(exp1_comp_df)
ggplot(exp1_comp_df)
View(exp1_comp_df)
ggplot(exp1_comp_df)
ggplot(exp1_comp_df$Freq)
View(exp1_comp_results)
ggplot(data = exp1_comp_df,aes(x = Var2, y = Freq, fill = Var1))
exp1_comp_df <- as.data.frame(exp1_comp_table)
ggplot(data = exp1_comp_df,aes(x = Var2, y = Freq, fill = Var1))
ggplot(data = exp1_comp_df,aes(x = Var2, y = Freq, fill = Var1),geom_bar(stat = "identity"))
exp1_comp_df <- as.data.frame(exp1_comp_table)
ggplot(data = exp1_comp_df,aes(x = Var2, y = Freq, fill = Var1),geom_bar(stat = "identity"))
View(exp1_comp_df)
ggplot(data = exp1_comp_df,aes(x = Var2, y = Freq, fill = Var1)) +geom_bar(stat = "identity")
ggplot(data = exp1_comp_df,aes(x = Var2, y = Freq, fill = Var1)) +geom_bar(stat = "identity") + xlab("Best fitting model") + ylab("Number of participants")
ggplot(data = exp1_comp_df,aes(x = models, y = Freq, fill = Var1)) +geom_bar(stat = "identity") + xlab("Best fitting model") + ylab("Number of participants")
exp1_comp_df$models <- factor(exp1_comp_df$Var2, levels = c("Nash","RL","EWA", "BCH_NBT", "BCH_BT"), ordered =TRUE)
ggplot(data = exp1_comp_df,aes(x = models, y = Freq, fill = Var1)) +geom_bar(stat = "identity") + xlab("Best fitting model") + ylab("Number of participants")
exp1_comp_results <- read.csv(file="../exp1_all_results.csv")
exp1_comp_table <- table(exp1_comp_results[, "condition"],c("Nash","BCH_BT","BCH_NBT", "RL","EWA")[apply(exp1_comp_results[,c("Random_BIC","Bayes_Tr_BIC","Bayes_No_Tr_BIC","QL_states_BIC","ST_EWA_STATES_BIC")],1,which.min)])
#write.csv(exp1_comp_table ,file="exp1_comp_table ",row.names = TRUE)
exp1_comp_df <- as.data.frame(exp1_comp_table)
colnames(exp1_comp_df) <- c("")
exp1_comp_df$models <- factor(exp1_comp_df$Var2, levels = c("Nash","RL","EWA", "BCH_NBT", "BCH_BT"), ordered =TRUE)
exp1_comp_results <- read.csv(file="../exp1_all_results.csv")
exp1_comp_table <- table(exp1_comp_results[, "condition"],c("Nash","BCH_BT","BCH_NBT", "RL","EWA")[apply(exp1_comp_results[,c("Random_BIC","Bayes_Tr_BIC","Bayes_No_Tr_BIC","QL_states_BIC","ST_EWA_STATES_BIC")],1,which.min)])
#write.csv(exp1_comp_table ,file="exp1_comp_table ",row.names = TRUE)
exp1_comp_df <- as.data.frame(exp1_comp_table)
colnames(exp1_comp_df) <- c("Opponent","model","Freq")
exp1_comp_df$model.f <- factor(exp1_comp_df$model, levels = c("Nash","RL","EWA", "BCH_NBT", "BCH_BT"), ordered =TRUE)
ggplot(data = exp1_comp_df,aes(x = model.f, y = Freq, fill = Var1)) +geom_bar(stat = "identity") + xlab("Best fitting model") + ylab("Number of participants")
exp1_comp_results <- read.csv(file="../exp1_all_results.csv")
exp1_comp_table <- table(exp1_comp_results[, "condition"],c("Nash","BCH_BT","BCH_NBT", "RL","EWA")[apply(exp1_comp_results[,c("Random_BIC","Bayes_Tr_BIC","Bayes_No_Tr_BIC","QL_states_BIC","ST_EWA_STATES_BIC")],1,which.min)])
#write.csv(exp1_comp_table ,file="exp1_comp_table ",row.names = TRUE)
exp1_comp_df <- as.data.frame(exp1_comp_table)
colnames(exp1_comp_df) <- c("Opponent","model","Freq")
exp1_comp_df$model.f <- factor(exp1_comp_df$model, levels = c("Nash","RL","EWA", "BCH_NBT", "BCH_BT"), ordered =TRUE)
ggplot(data = exp1_comp_df,aes(x = model.f, y = Freq, fill = Opponent)) +geom_bar(stat = "identity") + xlab("Best fitting model") + ylab("Number of participants")
exp1_comp_df$model.f <- factor(exp1_comp_df$model, levels = c("Nash","RL","EWA", "BCH_NBT", "BCH_BT"), ordered =TRUE)
ggplot(data = exp1_comp_df,aes(x = model.f, y = Freq, fill = Opponent)) +geom_bar(stat = "identity") + xlab("Best fitting model") + ylab("Number of participants")
ggplot(data = exp1_comp_df,aes(x = model.f, y = Freq, fill = Opponent)) +geom_bar(stat = "identity") + xlab("Best fitting model") + ylab("Number of participants") + theme_apa()
ggplot(data = exp1_comp_df,aes(x = model.f, y = Freq, fill = Opponent)) +geom_bar(stat = "identity") + xlab("Best fitting model") + ylab("Number of participants") + theme_apa() + scale_color_discrete()
exp1_comp_df <- as.data.frame(exp1_comp_table)
colnames(exp1_comp_df) <- c("Opponent","model","Freq")
exp1_comp_df$model.f <- factor(exp1_comp_df$model, levels = c("Nash","RL","EWA", "BCH_NBT", "BCH_BT"), ordered =TRUE)
ggplot(data = exp1_comp_df,aes(x = model.f, y = Freq, fill = Opponent)) +geom_bar(stat = "identity") + xlab("Best fitting model") + ylab("Number of participants") + theme_apa()
# #knitr::include_graphics("../Report/images/exp1_comp_models.png", dpi = 108)
# par(las=2) # make label text perpendicular to axis
# par(mar=c(5,8,4,2)) # increase y-axis margin.
# barplot(exp1_comp_table,
#         horiz =TRUE, # rotate barplot for better visibility
#         las=1, # change orientation x axis labels
#         cex.names=0.8, # text label size
#         legend = rownames(exp1_comp_table),
#         beside =TRUE,
#         xlab="Number of participants",
#         args.legend=list( # positioning of legend box
#         x  = 15,
#         y  = 10,
#         #x=ncol(exp1_comp_table) -3 ,
#         #y=max(colSums(exp1_comp_table)) ,
#         bty = "n")
#  )
exp2_comp_df <- as.data.frame(exp2_comp_table)
exp2_comp_results <- read.csv(file="../Experiment_2/exp2_results.csv")
exp2_comp_table <- table(exp2_comp_results[, "condition"],c("Nash","BCH_BT","BCH_WT", "BCH_NT", "RL_NT","RL_WT","EWA_NT","EWA_WT")[apply(exp2_comp_results[,c("Random_BIC","Distinct_game_BIC","Distinct_stage_BIC","Bayes_distinct_no","QL_states_BIC","QLS_within_Tr_BIC","STEWA_NT_BIC","STEWA_Tr_BIC")],1,which.min)])
# write.csv(exp2_table_results,file="exp2_table_results.csv",row.names = TRUE)
exp2_comp_table
exp2_comp_df <- as.data.frame(exp2_comp_table)
View(exp2_comp_df)
colnames(exp2_comp_df) <- c("Opponent","model","Freq")
exp2_comp_df$model.f <- factor(exp2_comp_df$model, levels = c("Nash","RL_NT","RL_WT","EWA_NT","EWA_WT","BCH_NT", "BCH_WT","BCH_BT"), ordered =TRUE)
exp2_comp_df <- as.data.frame(exp2_comp_table)
colnames(exp2_comp_df) <- c("condition","model","Freq")
exp2_comp_df$model.f <- factor(exp2_comp_df$model, levels = c("Nash","RL_NT","RL_WT","EWA_NT","EWA_WT","BCH_NT", "BCH_WT","BCH_BT"), ordered =TRUE)
ggplot(data = exp2_comp_df,aes(x = model.f, y = Freq, fill = Opponent)) +geom_bar(stat = "identity") + xlab("Best fitting model") + ylab("Number of participants") + theme_apa()
ggplot(data = exp2_comp_df,aes(x = model.f, y = Freq, fill = condition)) +geom_bar(stat = "identity") + xlab("Best fitting model") + ylab("Number of participants") + theme_apa()
ggplot(data = exp1_comp_df,aes(x = model.f, y = Freq, fill = Opponent)) +geom_bar(stat = "identity") + xlab("Best fitting model") + ylab("Number of participants") + theme_apa() ++ theme(axis.text.x = element_text(angle = 90)) + coord_flip()
ggplot(data = exp1_comp_df,aes(x = model.f, y = Freq, fill = Opponent)) +geom_bar(stat = "identity") + xlab("Best fitting model") + ylab("Number of participants") + theme_apa() + theme(axis.text.x = element_text(angle = 90)) + coord_flip()
ggplot(data = exp1_comp_df,aes(x = model.f, y = Freq, fill = Opponent)) +geom_bar(stat = "identity") + xlab("Best fitting model") + ylab("Number of participants") + theme_apa()  + coord_flip()
ggplot(data = exp2_comp_df,aes(x = model.f, y = Freq, fill = condition)) +geom_bar(stat = "identity") + xlab("Best fitting model") + ylab("Number of participants") + theme_apa() +coord_flip()
ggplot(data = exp2_comp_df,aes(x = model.f, y = Freq, fill = condition)) +geom_bar(stat = "identity") + xlab("Best fitting model") + ylab("Number of participants") + theme_apa() +coord_flip() + labs(fill = "")
exp2_comp_df$condition <- paste0(condition," faced first")
exp2_comp_df <- as.data.frame(exp2_comp_table)
colnames(exp2_comp_df) <- c("condition","model","Freq")
exp2_comp_df$condition <- paste0(exp2_comp_df$condition," faced first")
exp2_comp_df <- as.data.frame(exp2_comp_table)
colnames(exp2_comp_df) <- c("condition","model","Freq")
exp2_comp_df$model.f <- factor(exp2_comp_df$model, levels = c("Nash","RL_NT","RL_WT","EWA_NT","EWA_WT","BCH_NT", "BCH_WT","BCH_BT"), ordered =TRUE)
ggplot(data = exp2_comp_df,aes(x = model.f, y = Freq, fill = condition)) +geom_bar(stat = "identity") + xlab("Best fitting model") + ylab("Number of participants") + theme_apa() +coord_flip() + labs(fill = "Opponent faced first")
