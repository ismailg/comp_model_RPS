parameters <- list()
npar <- 0
mod <- new("dummyResponse",parameters=parameters,fixed=logical(0),x=x,y=y,npar=npar)
mod
}
)
setMethod("show","dummyResponse",
function(object) {
cat("Dummy for fixed likelihood Model \n")
}
)
setMethod("dens","dummyResponse",
function(object,log=FALSE) {
if(log) log(as.numeric(object@y)) else as.numeric(object@y)
}
)
## EXPERIMENT 1 Data
Nash_lik <- exp1_lik_by_trial$Nash_lik
QLS_lik <- exp1_lik_by_trial$QLS_lik
Bayes_Tr_lik <- exp1_lik_by_trial$Bayes_Tr_lik
# QLS_lik[which(QLS_lik == 0)] <- .001
# QLS_lik[is.na(QLS_lik)] <- .33 # this is a hack; there shouldn't be any missing values
nsubject <- length(unique(exp1_lik_by_trial$human_id)) # number of participants
ngame <- 3 # number of games
ntrial <- c(50,50,50) # numer of trials in each game
rModels <- list(
list(
dummyResponse(QLS_lik)
),
list(
dummyResponse(Nash_lik)
),
list(
dummyResponse(Bayes_Tr_lik)
)
)
trstart <- matrix(c(0.8,0.1,0.1,0.1,0.8,0.1,.1,.1,.8),ncol=3)
transition <- list()
transition[[1]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[1,],family=multinomial("identity"))
library(papaja)
library(kableExtra)
require(knitr)
require(citr)
require(bookdown)
# using some functions dplyr, ggpubr, PairedData and sjPlot. Need to be loaded.
library(plyr)
library(tidyr)
library(dplyr)
library(MASS)
library(ggpubr)
library(afex)
library(PairedData)
library(multcompView)
library(lsmeans)
library(magick)
library(depmixS4)
setClass("dummyResponse", contains="response")
setGeneric("dummyResponse", function(y, pstart = NULL, fixed = NULL, ...) standardGeneric("dummyResponse"))
setMethod("dummyResponse",
signature(y="ANY"),
function(y,pstart=NULL,fixed=NULL, ...) {
y <- matrix(y,length(y))
x <- matrix(1)
parameters <- list()
npar <- 0
mod <- new("dummyResponse",parameters=parameters,fixed=logical(0),x=x,y=y,npar=npar)
mod
}
)
setMethod("show","dummyResponse",
function(object) {
cat("Dummy for fixed likelihood Model \n")
}
)
setMethod("dens","dummyResponse",
function(object,log=FALSE) {
if(log) log(as.numeric(object@y)) else as.numeric(object@y)
}
)
setMethod("getpars","dummyResponse",
function(object,which="pars",...) {
switch(which,
"pars" = {
pars <- numeric(0)
},
"fixed" = {
pars <- logical(0)
}
)
return(pars)
}
)
setMethod("setpars","dummyResponse",
function(object, values, which="pars", ...) {
npar <- npar(object)
if(length(values)!=npar) stop("length of 'values' must be",npar)
# determine whether parameters or fixed constraints are being set
nms <- ""
switch(which,
"pars"= {
},
"fixed" = {
}
)
names(object@parameters) <- nms
return(object)
}
)
setMethod("fit","dummyResponse",
function(object,w) {
return(object)
}
)
setMethod("predict","dummyResponse",
function(object) {
ret <- object@y
return(ret)
}
)
## EXPERIMENT 1 Data
Nash_lik <- exp1_lik_by_trial$Nash_lik
QLS_lik <- exp1_lik_by_trial$QLS_lik
Bayes_Tr_lik <- exp1_lik_by_trial$Bayes_Tr_lik
# QLS_lik[which(QLS_lik == 0)] <- .001
# QLS_lik[is.na(QLS_lik)] <- .33 # this is a hack; there shouldn't be any missing values
nsubject <- length(unique(exp1_lik_by_trial$human_id)) # number of participants
ngame <- 3 # number of games
ntrial <- c(50,50,50) # numer of trials in each game
rModels <- list(
list(
dummyResponse(QLS_lik)
),
list(
dummyResponse(Nash_lik)
),
list(
dummyResponse(Bayes_Tr_lik)
)
)
trstart <- matrix(c(0.8,0.1,0.1,0.1,0.8,0.1,.1,.1,.8),ncol=3)
transition <- list()
transition[[1]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[1,],family=multinomial("identity"))
transition[[2]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[2,],family=multinomial("identity"))
transition[[3]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[3,],family=multinomial("identity"))
instart <- c(1/3,1/3,1/3)
inMod <- transInit(~1,nstates=3,pstart=instart,family=multinomial("identity"),data=data.frame(rep(1,nsubject*ngame)))
mod1 <- makeDepmix(response=rModels,transition=transition,prior=inMod,ntimes=rep(ntrial,nsubject))
fmod1 <- fit(mod1, emcontrol=em.control(random.start=FALSE))
# No switching. Force off diagonal initial elements of transtion matrix to 0
trstart <- matrix(c(1,0,0,0,1,0,0,0,1),ncol=3)
transition <- list()
transition[[1]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[1,],family=multinomial("identity"))
transition[[2]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[2,],family=multinomial("identity"))
transition[[3]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[3,],family=multinomial("identity"))
mod1_noswitch <- makeDepmix(response=rModels,transition=transition,prior=inMod,ntimes=rep(ntrial,nsubject))
fmod1_noswitch <- fit(mod1_noswitch, emcontrol=em.control(random.start=FALSE))
# p-value for comparison between a model with strategy switches and one without:
llratio(fmod1,fmod1_noswitch)
1-pchisq(-2*as.numeric(logLik(fmod1_noswitch)) - (-2*as.numeric(logLik(fmod1))),df=6)
exp1_lik_by_trial["post_QLS"] <- forwardbackward(fmod1)$gamma[,1]
exp1_lik_by_trial["post_Nash"] <- forwardbackward(fmod1)$gamma[,2]
exp1_lik_by_trial["post_Bayes_Tr"] <- forwardbackward(fmod1)$gamma[,3]
mean_post_1 <- exp1_lik_by_trial %>%
dplyr::select(human_id,game,condition, round, post_Nash, post_QLS, post_Bayes_Tr) %>%
dplyr::group_by(game,condition, round) %>%
dplyr::summarise(Nash_posterior = mean(post_Nash, na.rm = TRUE),
RL_posterior = mean(post_QLS, na.rm = TRUE),
BCH_BT_posterior = mean(post_Bayes_Tr, na.rm = TRUE))
mean_post_1$game <- factor(mean_post_1$game,levels=c("rps","fwg","numbers"))
data_long_post1 <- gather(mean_post_1, strategy, probability, Nash_posterior, RL_posterior,BCH_BT_posterior, factor_key=TRUE)
ggplot(data_long_post1,aes(x=round,y=probability,colour=strategy)) +
geom_line() +
facet_grid(game~condition)
#Only select models we're interested in
exp1_comp_BICs <- exp1_comp_results[c("ID","Random_BIC","Bayes_Tr_BIC","Bayes_No_Tr_BIC","QL_states_BIC","ST_EWA_STATES_BIC")]
exp1_BIC_weights <- exp1_comp_BICs["ID"]
exp1_BIC_weights[,2:ncol(exp1_comp_BICs)] <- t(apply(exp1_comp_BICs[,-1], 1, function(i) exp(-0.5*(i-min(i)) )))
colnames(exp1_BIC_weights) <- c("ID","Nash","BCH_BT","BCH_NBT","RL","EWA")
exp1_BIC_weights[,-1] <- t(apply(exp1_BIC_weights[,-1], 1, function(i) round(i/sum(i),2)))
Average_BIC_weights <- as.data.frame(t(round(apply(exp1_BIC_weights[,-1],2,mean),2)))
row.names(Average_BIC_weights) <- c("Model BIC weights")
Average_BIC_weights
#Count_Best_fit <- table(exp1_model_comp$Best_model)
temp <- plyr::count(exp1_model_comp,"Best_model")
Count_Best_fit <- tidyr::spread(temp,Best_model, freq)
row.names(Count_Best_fit) <- c("Count best fit")
Count_Best_fit
table_exp_1 <- rbind.fill(Average_BIC_weights,Count_Best_fit)
row.names(table_exp_1) <- c("Model BIC weights","Count best fit")
table_exp_1
View(exp1_BIC_weights)
View(dat_int)
#Only select models we're interested in
exp1_comp_BICs <- exp1_comp_results[c("ID","Random_BIC","Bayes_Tr_BIC","Bayes_No_Tr_BIC","QL_states_BIC","ST_EWA_STATES_BIC")]
exp1_BIC_weights <- exp1_comp_BICs["ID"]
exp1_BIC_weights[,2:ncol(exp1_comp_BICs)] <- t(apply(exp1_comp_BICs[,-1], 1, function(i) exp(-0.5*(i-min(i)) )))
colnames(exp1_BIC_weights) <- c("ID","Nash","BCH_BT","BCH_NBT","RL","EWA")
exp1_BIC_weights[,-1] <- t(apply(exp1_BIC_weights[,-1], 1, function(i) round(i/sum(i),2)))
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID")
# Everything on the same plot
ggplot(d, aes(ID,value, col=variable)) +
geom_point() +
stat_smooth()
#
# Average_BIC_weights <- as.data.frame(t(round(apply(exp1_BIC_weights[,-1],2,mean),2)))
# row.names(Average_BIC_weights) <- c("Model BIC weights")
# Average_BIC_weights
#
# #Count_Best_fit <- table(exp1_model_comp$Best_model)
# temp <- plyr::count(exp1_model_comp,"Best_model")
# Count_Best_fit <- tidyr::spread(temp,Best_model, freq)
# row.names(Count_Best_fit) <- c("Count best fit")
# Count_Best_fit
#
#
# table_exp_1 <- rbind.fill(Average_BIC_weights,Count_Best_fit)
# row.names(table_exp_1) <- c("Model BIC weights","Count best fit")
# table_exp_1
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID")
# Everything on the same plot
ggplot(d, aes(ID,value, col=variable)) +
geom_point() +
stat_smooth()
#
# Average_BIC_weights <- as.data.frame(t(round(apply(exp1_BIC_weights[,-1],2,mean),2)))
# row.names(Average_BIC_weights) <- c("Model BIC weights")
# Average_BIC_weights
#
# #Count_Best_fit <- table(exp1_model_comp$Best_model)
# temp <- plyr::count(exp1_model_comp,"Best_model")
# Count_Best_fit <- tidyr::spread(temp,Best_model, freq)
# row.names(Count_Best_fit) <- c("Count best fit")
# Count_Best_fit
#
#
# table_exp_1 <- rbind.fill(Average_BIC_weights,Count_Best_fit)
# row.names(table_exp_1) <- c("Model BIC weights","Count best fit")
# table_exp_1
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID")
# Everything on the same plot
ggplot(d, aes(ID,value, col=variable)) +
geom_point() +
stat_smooth() +
facet_wrap(~variable)
#
# Average_BIC_weights <- as.data.frame(t(round(apply(exp1_BIC_weights[,-1],2,mean),2)))
# row.names(Average_BIC_weights) <- c("Model BIC weights")
# Average_BIC_weights
#
# #Count_Best_fit <- table(exp1_model_comp$Best_model)
# temp <- plyr::count(exp1_model_comp,"Best_model")
# Count_Best_fit <- tidyr::spread(temp,Best_model, freq)
# row.names(Count_Best_fit) <- c("Count best fit")
# Count_Best_fit
#
#
# table_exp_1 <- rbind.fill(Average_BIC_weights,Count_Best_fit)
# row.names(table_exp_1) <- c("Model BIC weights","Count best fit")
# table_exp_1
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID")
# Everything on the same plot
ggplot(d, aes(ID,value, col=variable)) +
geom_point() +
stat_smooth() +
facet_wrap(~variable) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
#
# Average_BIC_weights <- as.data.frame(t(round(apply(exp1_BIC_weights[,-1],2,mean),2)))
# row.names(Average_BIC_weights) <- c("Model BIC weights")
# Average_BIC_weights
#
# #Count_Best_fit <- table(exp1_model_comp$Best_model)
# temp <- plyr::count(exp1_model_comp,"Best_model")
# Count_Best_fit <- tidyr::spread(temp,Best_model, freq)
# row.names(Count_Best_fit) <- c("Count best fit")
# Count_Best_fit
#
#
# table_exp_1 <- rbind.fill(Average_BIC_weights,Count_Best_fit)
# row.names(table_exp_1) <- c("Model BIC weights","Count best fit")
# table_exp_1
View(d)
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model")
# Everything on the same plot
ggplot(d, aes(ID,value, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
#
# Average_BIC_weights <- as.data.frame(t(round(apply(exp1_BIC_weights[,-1],2,mean),2)))
# row.names(Average_BIC_weights) <- c("Model BIC weights")
# Average_BIC_weights
#
# #Count_Best_fit <- table(exp1_model_comp$Best_model)
# temp <- plyr::count(exp1_model_comp,"Best_model")
# Count_Best_fit <- tidyr::spread(temp,Best_model, freq)
# row.names(Count_Best_fit) <- c("Count best fit")
# Count_Best_fit
#
#
# table_exp_1 <- rbind.fill(Average_BIC_weights,Count_Best_fit)
# row.names(table_exp_1) <- c("Model BIC weights","Count best fit")
# table_exp_1
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BIC weight")
# Everything on the same plot
ggplot(d, aes(ID,BIC weight, col=Model)) +
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BIC weight")
# Everything on the same plot
ggplot(d, aes(ID,value, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BICweight")
# Everything on the same plot
ggplot(d, aes(ID,BICweight, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
#
# Average_BIC_weights <- as.data.frame(t(round(apply(exp1_BIC_weights[,-1],2,mean),2)))
# row.names(Average_BIC_weights) <- c("Model BIC weights")
# Average_BIC_weights
#
# #Count_Best_fit <- table(exp1_model_comp$Best_model)
# temp <- plyr::count(exp1_model_comp,"Best_model")
# Count_Best_fit <- tidyr::spread(temp,Best_model, freq)
# row.names(Count_Best_fit) <- c("Count best fit")
# Count_Best_fit
#
#
# table_exp_1 <- rbind.fill(Average_BIC_weights,Count_Best_fit)
# row.names(table_exp_1) <- c("Model BIC weights","Count best fit")
# table_exp_1
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BICweight")
# Everything on the same plot
ggplot(d, aes(ID,BIC_weight, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BIC_weight")
# Everything on the same plot
ggplot(d, aes(ID,BIC_weight, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
#
# Average_BIC_weights <- as.data.frame(t(round(apply(exp1_BIC_weights[,-1],2,mean),2)))
# row.names(Average_BIC_weights) <- c("Model BIC weights")
# Average_BIC_weights
#
# #Count_Best_fit <- table(exp1_model_comp$Best_model)
# temp <- plyr::count(exp1_model_comp,"Best_model")
# Count_Best_fit <- tidyr::spread(temp,Best_model, freq)
# row.names(Count_Best_fit) <- c("Count best fit")
# Count_Best_fit
#
#
# table_exp_1 <- rbind.fill(Average_BIC_weights,Count_Best_fit)
# row.names(table_exp_1) <- c("Model BIC weights","Count best fit")
# table_exp_1
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BIC_weight")
# Everything on the same plot
ggplot(d, aes(ID,BIC_weight, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
args.legend=list( # positioning of legend box
x  = 15,
y  = 10,
#x=ncol(exp1_comp_table) -3 ,
#y=max(colSums(exp1_comp_table)) ,
bty = "n")
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BIC_weight")
# Everything on the same plot
ggplot(d, aes(ID,BIC_weight, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
args.legend=list( # positioning of legend box
x  = 15,
y  = 10,
#x=ncol(exp1_comp_table) -3 ,
#y=max(colSums(exp1_comp_table)) ,
bty = "n")
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BIC_weight")
# Everything on the same plot
ggplot(d, aes(ID,BIC_weight, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
args.legend =list( # positioning of legend box
x  = 15,
y  = 10,
#x=ncol(exp1_comp_table) -3 ,
#y=max(colSums(exp1_comp_table)) ,
bty = "n")
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BIC_weight")
# Everything on the same plot
ggplot(d, aes(ID,BIC_weight, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
#
# Average_BIC_weights <- as.data.frame(t(round(apply(exp1_BIC_weights[,-1],2,mean),2)))
# row.names(Average_BIC_weights) <- c("Model BIC weights")
# Average_BIC_weights
#
# #Count_Best_fit <- table(exp1_model_comp$Best_model)
# temp <- plyr::count(exp1_model_comp,"Best_model")
# Count_Best_fit <- tidyr::spread(temp,Best_model, freq)
# row.names(Count_Best_fit) <- c("Count best fit")
# Count_Best_fit
#
#
# table_exp_1 <- rbind.fill(Average_BIC_weights,Count_Best_fit)
# row.names(table_exp_1) <- c("Model BIC weights","Count best fit")
# table_exp_1
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BIC_weight")
# Everything on the same plot
ggplot(d, aes(ID,BIC_weight, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(legend.position = c(0.8, 0.2))
#
# Average_BIC_weights <- as.data.frame(t(round(apply(exp1_BIC_weights[,-1],2,mean),2)))
# row.names(Average_BIC_weights) <- c("Model BIC weights")
# Average_BIC_weights
#
# #Count_Best_fit <- table(exp1_model_comp$Best_model)
# temp <- plyr::count(exp1_model_comp,"Best_model")
# Count_Best_fit <- tidyr::spread(temp,Best_model, freq)
# row.names(Count_Best_fit) <- c("Count best fit")
# Count_Best_fit
#
#
# table_exp_1 <- rbind.fill(Average_BIC_weights,Count_Best_fit)
# row.names(table_exp_1) <- c("Model BIC weights","Count best fit")
# table_exp_1
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BIC_weight")
# Everything on the same plot
ggplot(d, aes(ID,BIC_weight, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(legend.position = c(0.8, 0.3))
#
# Average_BIC_weights <- as.data.frame(t(round(apply(exp1_BIC_weights[,-1],2,mean),2)))
# row.names(Average_BIC_weights) <- c("Model BIC weights")
# Average_BIC_weights
#
# #Count_Best_fit <- table(exp1_model_comp$Best_model)
# temp <- plyr::count(exp1_model_comp,"Best_model")
# Count_Best_fit <- tidyr::spread(temp,Best_model, freq)
# row.names(Count_Best_fit) <- c("Count best fit")
# Count_Best_fit
#
#
# table_exp_1 <- rbind.fill(Average_BIC_weights,Count_Best_fit)
# row.names(table_exp_1) <- c("Model BIC weights","Count best fit")
# table_exp_1
