# temp <- plyr::count(exp1_model_comp,"Best_model")
# Count_Best_fit <- tidyr::spread(temp,Best_model, freq)
# row.names(Count_Best_fit) <- c("Count best fit")
# Count_Best_fit
#
#
# table_exp_1 <- rbind.fill(Average_BIC_weights,Count_Best_fit)
# row.names(table_exp_1) <- c("Model BIC weights","Count best fit")
# table_exp_1
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BIC weight")
# Everything on the same plot
ggplot(d, aes(ID,BIC weight, col=Model)) +
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BIC weight")
# Everything on the same plot
ggplot(d, aes(ID,value, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BICweight")
# Everything on the same plot
ggplot(d, aes(ID,BICweight, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
#
# Average_BIC_weights <- as.data.frame(t(round(apply(exp1_BIC_weights[,-1],2,mean),2)))
# row.names(Average_BIC_weights) <- c("Model BIC weights")
# Average_BIC_weights
#
# #Count_Best_fit <- table(exp1_model_comp$Best_model)
# temp <- plyr::count(exp1_model_comp,"Best_model")
# Count_Best_fit <- tidyr::spread(temp,Best_model, freq)
# row.names(Count_Best_fit) <- c("Count best fit")
# Count_Best_fit
#
#
# table_exp_1 <- rbind.fill(Average_BIC_weights,Count_Best_fit)
# row.names(table_exp_1) <- c("Model BIC weights","Count best fit")
# table_exp_1
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BICweight")
# Everything on the same plot
ggplot(d, aes(ID,BIC_weight, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BIC_weight")
# Everything on the same plot
ggplot(d, aes(ID,BIC_weight, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
#
# Average_BIC_weights <- as.data.frame(t(round(apply(exp1_BIC_weights[,-1],2,mean),2)))
# row.names(Average_BIC_weights) <- c("Model BIC weights")
# Average_BIC_weights
#
# #Count_Best_fit <- table(exp1_model_comp$Best_model)
# temp <- plyr::count(exp1_model_comp,"Best_model")
# Count_Best_fit <- tidyr::spread(temp,Best_model, freq)
# row.names(Count_Best_fit) <- c("Count best fit")
# Count_Best_fit
#
#
# table_exp_1 <- rbind.fill(Average_BIC_weights,Count_Best_fit)
# row.names(table_exp_1) <- c("Model BIC weights","Count best fit")
# table_exp_1
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BIC_weight")
# Everything on the same plot
ggplot(d, aes(ID,BIC_weight, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
args.legend=list( # positioning of legend box
x  = 15,
y  = 10,
#x=ncol(exp1_comp_table) -3 ,
#y=max(colSums(exp1_comp_table)) ,
bty = "n")
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BIC_weight")
# Everything on the same plot
ggplot(d, aes(ID,BIC_weight, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
args.legend=list( # positioning of legend box
x  = 15,
y  = 10,
#x=ncol(exp1_comp_table) -3 ,
#y=max(colSums(exp1_comp_table)) ,
bty = "n")
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BIC_weight")
# Everything on the same plot
ggplot(d, aes(ID,BIC_weight, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
args.legend =list( # positioning of legend box
x  = 15,
y  = 10,
#x=ncol(exp1_comp_table) -3 ,
#y=max(colSums(exp1_comp_table)) ,
bty = "n")
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BIC_weight")
# Everything on the same plot
ggplot(d, aes(ID,BIC_weight, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
#
# Average_BIC_weights <- as.data.frame(t(round(apply(exp1_BIC_weights[,-1],2,mean),2)))
# row.names(Average_BIC_weights) <- c("Model BIC weights")
# Average_BIC_weights
#
# #Count_Best_fit <- table(exp1_model_comp$Best_model)
# temp <- plyr::count(exp1_model_comp,"Best_model")
# Count_Best_fit <- tidyr::spread(temp,Best_model, freq)
# row.names(Count_Best_fit) <- c("Count best fit")
# Count_Best_fit
#
#
# table_exp_1 <- rbind.fill(Average_BIC_weights,Count_Best_fit)
# row.names(table_exp_1) <- c("Model BIC weights","Count best fit")
# table_exp_1
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BIC_weight")
# Everything on the same plot
ggplot(d, aes(ID,BIC_weight, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(legend.position = c(0.8, 0.2))
#
# Average_BIC_weights <- as.data.frame(t(round(apply(exp1_BIC_weights[,-1],2,mean),2)))
# row.names(Average_BIC_weights) <- c("Model BIC weights")
# Average_BIC_weights
#
# #Count_Best_fit <- table(exp1_model_comp$Best_model)
# temp <- plyr::count(exp1_model_comp,"Best_model")
# Count_Best_fit <- tidyr::spread(temp,Best_model, freq)
# row.names(Count_Best_fit) <- c("Count best fit")
# Count_Best_fit
#
#
# table_exp_1 <- rbind.fill(Average_BIC_weights,Count_Best_fit)
# row.names(table_exp_1) <- c("Model BIC weights","Count best fit")
# table_exp_1
library(reshape2)
d <- melt(exp1_BIC_weights, id.vars="ID", variable.name = "Model",value.name = "BIC_weight")
# Everything on the same plot
ggplot(d, aes(ID,BIC_weight, col=Model)) +
geom_point() +
stat_smooth() +
facet_wrap(~Model) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(legend.position = c(0.8, 0.3))
#
# Average_BIC_weights <- as.data.frame(t(round(apply(exp1_BIC_weights[,-1],2,mean),2)))
# row.names(Average_BIC_weights) <- c("Model BIC weights")
# Average_BIC_weights
#
# #Count_Best_fit <- table(exp1_model_comp$Best_model)
# temp <- plyr::count(exp1_model_comp,"Best_model")
# Count_Best_fit <- tidyr::spread(temp,Best_model, freq)
# row.names(Count_Best_fit) <- c("Count best fit")
# Count_Best_fit
#
#
# table_exp_1 <- rbind.fill(Average_BIC_weights,Count_Best_fit)
# row.names(table_exp_1) <- c("Model BIC weights","Count best fit")
# table_exp_1
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
dat1 <- read.csv("data20180719.csv")
# using some functions dplyr, ggpubr, PairedData and sjPlot. Need to be loaded.
library(tidyr)
library(dplyr)
library(MASS)
library(ggpubr)
library(PairedData)
library(multcompView)
library(lsmeans)
# transform 'winner' variable in numeric score
dat1$score <- recode(dat1$winner, human = 1, tie = 0, ai = -1)
# create a new variable 'block' with round 1...25 = block 1 and round 26...50 as block 2
dat1$block <- factor(as.numeric(cut(dat1$round,2)),labels =c("first half", "second half"))
# create a new variable "game.f" as a factor variable of games
dat1$game.f <- factor(dat1$game, labels = c("RPS","FWG","NUM"),levels=c("rps","fwg","numbers"))
# overall score to pay bonuses
dat_score <- dat1 %>%
group_by(human_id) %>%
summarize(overall_score = sum(score))
(avg_bonus <- floor(mean(abs(dat_score$overall_score))))*0.02
#Group data by human_id and calculate mean score per block of each game.
dat2 <- dat1 %>%
group_by(human_id,condition,game,block,game.f) %>%
summarize(block_score = mean(score))
# Group data by game and ID
dat3 <- group_by(dat2, human_id,game.f,game) %>% summarise(game_score = mean(block_score))
# head(dat3,6)
# Subsetting scores data by game
rps <- subset(dat3,  game.f == "RPS",game_score)
fwg <- subset(dat3,  game.f == "FWG",game_score)
num <- subset(dat3,  game.f == "NUM",game_score)
# head(rps,6)
# Look at some summary statistics of group means #############################
group_by(dat2, game.f) %>%
summarise(
mean = mean(block_score, na.rm = TRUE),
sd = sd(block_score, na.rm = TRUE)
)
group_by(dat2, game.f, block) %>%
summarise(
count = n(),
mean = mean(block_score, na.rm = TRUE),
sd = sd(block_score, na.rm = TRUE)
)
group_by(dat2, game.f, condition,block) %>%
summarise(
count = n(),
mean = mean(block_score, na.rm = TRUE),
sd = sd(block_score, na.rm = TRUE)
)
# PLOTS  #############################
# Plot scores per game
ggboxplot(dat3, x = "game.f", y = "game_score", group = 1, add =c("mean_ci","jitter"), color="game.f", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score", xlab = "Games")
ggerrorplot(dat3, x = "game.f", y = "game_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score", xlab = "Games")
# Plot paired scores between games
#pd <- paired(rps,fwg)
#pd2 <- paired(fwg,num)
#head(pd)
#plot(pd, type = "profile")
#plot(pd2, type = "profile")
ggpaired(dat3, x = "game.f", y = "game_score",color = "game.f", id = "human_id", line.color = "gray", line.size = 0.4, palette = "npg")
# Plot results by game and block (for all 3 games, learning is happening)
ggboxplot(dat2, x = "game", y = "block_score", palette = c("#00AFBB", "#E7B800"),order = c("rps", "fwg","numbers"), fill="block",ylab = "Percentage score", xlab = "Games")
# Group data by game and ID
dat4 <- group_by(dat2, human_id,condition,game.f) %>% summarise(game_score = mean(block_score))
# Level 2 is harder to win against than level 1
ggboxplot(dat2, x = "condition", y = "block_score", palette = c("#00AFBB", "#E7B800"), fill="condition",ylab = "Percentage score", xlab = "Conditions")
ggerrorplot(dat2, x = "condition", y = "block_score", desc_stat = "mean_ci" , palette = c("#00AFBB", "#E7B800"), color="condition",ylab = "Percentage score", xlab = "Conditions")
# Main effect of block
ggerrorplot(dat2, x = "block", y = "block_score", desc_stat = "mean_ci" , palette = c("#00AFBB", "#E7B800"), color="block",ylab = "Percentage score", xlab = "Block")
# Breaking it down by game (seems to be true for RPS and FWG, less so for Numbers )
ggboxplot(dat4, x = "game.f", y = "game_score", palette = c("#00AFBB","#E7B800","#FC4E07"), fill="condition",order = c("RPS", "FWG","NUM"),ylab = "Game Score", xlab = "Conditions")
# AFEX PACKAGE FOR RUNNING RM ANOVA AND POST HOC TESTS ############################
citation(package = "afex", lib.loc = NULL, auto = NULL)
library(afex)
a1 <- aov_car( block_score ~ game.f*block*condition + Error(human_id/(game.f*block)), dat2)
summary(a1)
(a1_nice <- nice(a1, es = attr(a1$anova_table, "es"),
observed = attr(a1$anova_table, "observed"),
correction = attr(a1$anova_table, "correction"), MSE = NULL,
intercept = NULL, p_adjust_method = attr(a1$anova_table,
"p_adjust_method"), sig_symbols = attr(a1$anova_table, "sig_symbols")))
write.table(a1_nice,file = "a1.txt", sep = ",", quote = FALSE, row.names = F)
## Note to Self: no need to worry abour the HF warning. You don't have pb with sphericity according to Mauchly tests, and the warning only applies to Huynh-Feldt corrections for violations of sphericity.
exp2_anova <- afex::aov_car(
int_score ~ (game.f*interaction_lvl*condition.f*opp_type) + Error(human_id/(game.f*interaction_lvl*opp_type))
, data = dat_int
, type = 3
)
(ls0 <- lsmeans(exp2_anova, "game.f", by = "opp_type"))
(ls0 <- update(pairs(ls0, reverse = TRUE), by=NULL, adjust = "holm"))
apa_lm <- apa_print(exp2_anova)
exp2_anova <- afex::aov_car(
int_score ~ (game.f*interaction_lvl*condition.f*opp_type) + Error(human_id/(game.f*interaction_lvl*opp_type))
, data = dat_int
, type = 3
)
(ls0 <- lsmeans(exp2_anova, "game.f", by = "opp_type"))
(ls0 <- update(pairs(ls0, reverse = TRUE), by=NULL, adjust = "holm"))
# apa_lm <- apa_print(exp2_anova)
#looking at TRIALS 2 to 6 to test robustness of evidence for transfer of learning of opponent strategy #########
dat_26 <- subset(dat,(round >1 & round < 7) & (interaction_lvl == "first interaction" ), drop =TRUE)
dat <- read.csv(file = "../Experiment_2/dat_exp2.csv")
#looking at TRIALS 2 to 6 to test robustness of evidence for transfer of learning of opponent strategy #########
dat_26 <- subset(dat,(round >1 & round < 7) & (interaction_lvl == "first interaction" ), drop =TRUE)
exp2_dat2_6 <- dat_26 %>%
group_by(human_id,condition.f,game.f,opp_type,confidence,difficulty) %>%
summarise(early_score = mean(adj_score))
# Check group means and SDs
group_by(exp2_dat2_6, game.f) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
group_by(exp2_dat2_6, game.f,opp_type) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
exp2_dat2_6 %>%
mutate(game = factor(game.f)) %>%
mutate(game = forcats::fct_recode(game, Shootout = "SHOOT")) %>%
mutate(game = factor(game, levels = c("RPS", "FWG", "Shootout"))) %>%
mutate(opp_type = factor(opp_type, levels = c("Level_1", "Level_2"))) %>%
mutate(opp_type = forcats::fct_recode(opp_type, "Level 1" = "Level_1", "Level 2" = "Level_2")) %>%
ggplot(aes(x = game, y = early_score, colour=game)) + stat_summary(fun.data = "mean_ci", geom = "crossbar")  + geom_jitter(alpha=.4) + ylab("Early score") + xlab("Game") + facet_grid(. ~ opp_type) + theme_apa() + geom_hline(yintercept = 0, lty=2) + scale_color_discrete() + theme(legend.position = "none")
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv("MyData.csv")
# using some functions dplyr, ggpubr, PairedData and sjPlot. Need to be loaded.
library(tidyr)
library(dplyr)
library(MASS)
library(ggpubr)
library(PairedData)
library(multcompView)
# transform 'winner' variable in numeric score
dat$score <- recode(dat$winner, human = 1, tie = 0, AI = -1)
# Create a new variable stage.f as a factor for the stages 1,2 ,3 4 in game
dat$stage.f <- factor(dat$stage, labels = c("Stage 1","Stage 2","Stage 3", "Stage 4"),levels=c(1,2,3,4))
# create a new variable "game.f" as a factor variable of games
dat$game.f <- factor(dat$game, labels = c("RPS","FWG","SHOOT"),levels=c("rps","fwg","shootout"))
# overall score to pay bonuses
dat_score <- dat %>%
group_by(prolific_id, condition) %>%
summarize(overall_score = sum(score))
dat_score$avg_bonus <- floor(dat_score$overall_score)*0.02
write.csv(dat_score,row.names=FALSE,file="bonus_payment.csv")
#Average bonus per participant
#bonus_to_be_paid <- mean(dat_score$avg_bonus)
# check num level 1 and level 2 facing players
group_by(dat_score, condition) %>%
summarise(count_conditions = n())
#Group data by human_id and calculate mean score per stage of each game.
dat$interaction_lvl <- recode(dat$stage, "1" = 1, "2" = 1, "3" = 2, "4" = 2) %>% factor(levels = c(1,2), labels = c("first interaction", "second interaction"))
# Create factor variable that determines type of opponent
dat$opp_type <- factor(dat$round_condition, labels=c("Level_1", "Level_2"), levels = c("Level1", "Level2"))
# Create factor variable coding condition (which opponent was faced first)
dat$condition.f <- factor(dat$condition, labels = c("lvl_1 first", "lvl_2 first"), levels = c("Level1","Level2"))
#Adjust shootout score tor eflect easier game
dat$adj_score <- recode(dat$score, ifelse(dat$game.f =="SHOOT", dat$score -0.33,dat$score))
# Create summarised dataset by interaction (all of first/second  opponent interactions by game)
dat_int <- dat %>%
group_by(human_id,game.f,opp_type,interaction_lvl,condition.f) %>%
summarize(int_score = mean(adj_score))
write.csv(dat, file = "dat_exp2.csv")
write.csv(dat_int, file = "dat_int_exp2.csv")
# correlation between score vs levels 1 and 2
dat_opps <- dat_int %>%
group_by(human_id, opp_type) %>%
summarize(opp_score = mean(int_score))
data_opps_wide <- spread(dat_opps,opp_type, opp_score)
ggscatter(data_opps_wide, x = "Level_1", y = "Level_2", add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",
xlab = "scores against Level1", ylab = "scores against Level2")
# Create summarised dataset by stage
dat_stages <- dat %>%
group_by(human_id,game.f,stage.f,opp_type) %>%
summarize(stage_score = mean(adj_score))
# Group data by game and ID
dat_games <- group_by(dat, human_id,game.f) %>% summarise(game_score = mean(adj_score))
# head(dat3,6)
# Subsetting scores data by game
rps <- subset(dat_games,  game.f == "RPS",game_score)
fwg <- subset(dat_games,  game.f == "FWG",game_score)
shoot <- subset(dat_games,  game.f == "SHOOT",game_score)
# head(rps,6)
#looking at TRIALS 2 to 6 to test robustness of evidence for transfer of learning of opponent strategy #########
dat_26 <- subset(dat,(round >1 & round < 7) & (interaction_lvl == "first interaction" ), drop =TRUE)
dat2_6 <- dat_26 %>%
group_by(human_id,condition.f,game.f,opp_type,confidence,difficulty) %>%
summarise(early_score = mean(adj_score))
# Check group means and SDs
group_by(dat2_6, game.f) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
group_by(dat2_6, game.f,opp_type) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
# plot scores per game
ggerrorplot(dat2_6, x = "game.f", y = "early_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","SHOOT"), ylab = "Score", xlab = "Games")
# testing differences between early scores across games
library(afex)
aov_early <- aov_car(early_score ~ game.f*opp_type*condition.f + Error(human_id/(game.f*opp_type)),data=dat2_6)
summary(aov_early)
aov_ear_nice <- nice(aov_early, es = attr(aov_early$anova_table, "es"),
observed = attr(aov_early$anova_table, "observed"),
correction = attr(aov_early$anova_table, "correction"), MSE = NULL,
intercept = NULL, p_adjust_method = attr(aov_early$anova_table,
"p_adjust_method"), sig_symbols = attr(aov_early$anova_table, "sig_symbols"))
write.table(aov_ear_nice,file = "aov_ear.txt", sep = ",", quote = FALSE, row.names = F)
# including confidence
#ov_conf_26 <- aov_car(early_score ~ game.f*condition*difficulty + Error(human_id/(game.f)),data=dat2_6)
#summary(aov_conf_26)
# Here we can change the null to 0.33 to check for whether early shoot higher scores are due to random play.
(ls4 <- lsmeans(aov_early, "game.f", by="opp_type"))
(summary(ls4, infer = c(TRUE,TRUE), null = 0,level = 0.95, adjust = "bon"))
lsmip(aov_early,  opp_type ~ game.f )
lsmip(aov_early,  opp_type ~ game.f | condition.f)
# testing differences between early scores across games
library(afex)
aov_early <- aov_car(early_score ~ game.f*opp_type*condition.f + Error(human_id/(game.f*opp_type)),data=dat2_6)
summary(aov_early)
aov_ear_nice <- nice(aov_early, es = attr(aov_early$anova_table, "es"),
observed = attr(aov_early$anova_table, "observed"),
correction = attr(aov_early$anova_table, "correction"), MSE = NULL,
intercept = NULL, p_adjust_method = attr(aov_early$anova_table,
"p_adjust_method"), sig_symbols = attr(aov_early$anova_table, "sig_symbols"))
write.table(aov_ear_nice,file = "aov_ear.txt", sep = ",", quote = FALSE, row.names = F)
# including confidence
#ov_conf_26 <- aov_car(early_score ~ game.f*condition*difficulty + Error(human_id/(game.f)),data=dat2_6)
#summary(aov_conf_26)
# Here we can change the null to 0.33 to check for whether early shoot higher scores are due to random play.
(ls4 <- lsmeans(aov_early, "game.f", by="opp_type"))
(summary(ls4, infer = c(TRUE,TRUE), null = 0,level = 0.95, adjust = "bon"))
#lsmip(aov_early,  opp_type ~ game.f )
#lsmip(aov_early,  opp_type ~ game.f | condition.f)
# AFEX PACKAGE FOR RUNNING RM ANOVA AND POST HOC TESTS ############################
#citation(package = "afex", lib.loc = NULL, auto = NULL)
library(afex)
a1 <- aov_car(int_score ~ game.f*interaction_lvl*condition.f*opp_type + Error(human_id/(game.f*interaction_lvl*opp_type)), dat_int)
summary(a1)
(a1_nice <- nice(a1, es = attr(a1$anova_table, "es"),
observed = attr(a1$anova_table, "observed"),
correction = attr(a1$anova_table, "correction"), MSE = NULL,
intercept = NULL, p_adjust_method = attr(a1$anova_table,
"p_adjust_method"), sig_symbols = attr(a1$anova_table, "sig_symbols")))
write.table(a1_nice,file = "a1.txt", sep = ",", quote = FALSE, row.names = F)
## Note to Self: no need to worry abour the HF warning. You don't have pb with sphericity according to Mauchly tests, and the warning only applies to Huynh-Feldt corrections for violations of sphericity.
####
#a1 <- aov_car(int_score ~ game.f*interaction_lvl*condition.f*opp_type + Error(human_id/(game.f*interaction_lvl*opp_type)), dat_int)
#summary(a1)
#####
# testing differences between early scores across games
library(afex)
aov_early <- aov_car(early_score ~ game.f*opp_type*condition.f + Error(human_id/(game.f*opp_type)),data=dat2_6)
summary(aov_early)
aov_ear_nice <- nice(aov_early, es = attr(aov_early$anova_table, "es"),
observed = attr(aov_early$anova_table, "observed"),
correction = attr(aov_early$anova_table, "correction"), MSE = NULL,
intercept = NULL, p_adjust_method = attr(aov_early$anova_table,
"p_adjust_method"), sig_symbols = attr(aov_early$anova_table, "sig_symbols"))
write.table(aov_ear_nice,file = "aov_ear.txt", sep = ",", quote = FALSE, row.names = F)
# including confidence
#ov_conf_26 <- aov_car(early_score ~ game.f*condition*difficulty + Error(human_id/(game.f)),data=dat2_6)
#summary(aov_conf_26)
# Here we can change the null to 0.33 to check for whether early shoot higher scores are due to random play.
(ls4 <- lsmeans(aov_early, "game.f", by="opp_type"))
(summary(ls4, infer = c(TRUE,TRUE), null = 0,level = 0.95, adjust = "bon"))
#lsmip(aov_early,  opp_type ~ game.f )
#lsmip(aov_early,  opp_type ~ game.f | condition.f)
aov_early <- aov_car(early_score ~ game.f*opp_type*condition.f + Error(human_id/(game.f*opp_type)),data=dat2_6)
summary(aov_early)
a1 <- aov_car(int_score ~ game.f*interaction_lvl*condition.f*opp_type + Error(human_id/(game.f*interaction_lvl*opp_type)), dat_int)
summary(a1)
(a1_nice <- nice(a1, es = attr(a1$anova_table, "es"),
observed = attr(a1$anova_table, "observed"),
correction = attr(a1$anova_table, "correction"), MSE = NULL,
intercept = NULL, p_adjust_method = attr(a1$anova_table,
"p_adjust_method"), sig_symbols = attr(a1$anova_table, "sig_symbols")))
aov_ear_nice <- nice(aov_early, es = attr(aov_early$anova_table, "es"),
observed = attr(aov_early$anova_table, "observed"),
correction = attr(aov_early$anova_table, "correction"), MSE = NULL,
intercept = NULL, p_adjust_method = attr(aov_early$anova_table,
"p_adjust_method"), sig_symbols = attr(aov_early$anova_table, "sig_symbols"))
write.table(aov_ear_nice,file = "aov_ear.txt", sep = ",", quote = FALSE, row.names = F)
(aov_ear_nice <- nice(aov_early, es = attr(aov_early$anova_table, "es"),
observed = attr(aov_early$anova_table, "observed"),
correction = attr(aov_early$anova_table, "correction"), MSE = NULL,
intercept = NULL, p_adjust_method = attr(aov_early$anova_table,
"p_adjust_method"), sig_symbols = attr(aov_early$anova_table, "sig_symbols")))
(ls4 <- lsmeans(aov_early, "game.f", by="opp_type"))
(summary(ls4, infer = c(TRUE,TRUE), null = 0,level = 0.95, adjust = "bon"))
lsmip(aov_early,  opp_type ~ game.f )
lsmip(aov_early,  opp_type ~ game.f | condition.f)
