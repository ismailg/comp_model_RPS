function(object) {
ret <- object@y
return(ret)
}
)
# we need to have "dat" available and lik_by_trial
QLS_lik <- lik_by_trial$QLS_lik
QLS_lik[which(QLS_lik == 0)] <- .001
QLS_lik[is.na(QLS_lik)] <- .33 # this is a hack; there shouldn't be any missing values
Bayes_NT_lik <- lik_by_trial$Bayes_NT_lik
Bayes_Tr_lik <- lik_by_trial$Bayes_Tr_lik
nsubject <- length(unique(dat$human_id)) # number of participants
ngame <- 3 # number of games
ntrial <- c(50,50,50) # numer of trials in each game
rModels <- list(
list(
dummyResponse(QLS_lik)
),
list(
dummyResponse(Bayes_NT_lik)
),
list(
dummyResponse(Bayes_Tr_lik)
)
)
trstart <- matrix(c(0.8,0.1,0.1,0.1,0.8,0.1,.1,.1,.8),ncol=3)
transition <- list()
transition[[1]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[1,],family=multinomial("identity"))
transition[[2]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[2,],family=multinomial("identity"))
transition[[3]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[3,],family=multinomial("identity"))
instart <- c(1/3,1/3,1/3)
inMod <- transInit(~1,nstates=3,pstart=instart,family=multinomial("identity"),data=data.frame(rep(1,nsubject*ngame)))
mod <- makeDepmix(response=rModels,transition=transition,prior=inMod,ntimes=rep(ntrial,nsubject))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
# Get Data for experiment 1, remove unecessary columns
dat <- read.csv("exp1_data.csv")
#####
# dat <- subset(dat, human_id == "38VxtUSv_h6RR5-tAAA2")
####
optim_results <- read.csv("All_results.csv")
#preparing data for functions to claculate likelihood
# dat <- as_tibble(dat) %>% group_by(human_id,game)
dat <- dat %>%
mutate(ai_action_prev = lag(ai_action,1), human_action_prev = lag(human_action,1))
## level 0 predictions
dat <- dat %>% mutate(pred_a1_level0 = case_when(
game == "rps" & ai_action_prev == "rock" ~ 1,
game == "fwg" & ai_action_prev == "fire" ~ 1,
game == "numbers" & ai_action_prev == "one" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a2_level0 = case_when(
game == "rps" & ai_action_prev == "paper" ~ 1,
game == "fwg" & ai_action_prev == "water" ~ 1,
game == "numbers" & ai_action_prev == "two" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a3_level0 = case_when(
game == "rps" & ai_action_prev == "scissors" ~ 1,
game == "fwg" & ai_action_prev == "grass" ~ 1,
game == "numbers" & ai_action_prev == "three" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a4_level0 = case_when(
game == "numbers" & ai_action_prev == "four" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
TRUE ~ 0))
dat <- dat %>% mutate(pred_a5_level0 = case_when(
game == "numbers" & ai_action_prev == "five" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
TRUE ~ 0))
## level 1 predictions
dat <- dat %>% mutate(pred_a1_level1 = case_when(
game == "rps" & human_action_prev == "scissors" ~ 1,
game == "fwg" & human_action_prev == "grass" ~ 1,
game == "numbers" & human_action_prev == "five" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a2_level1 = case_when(
game == "rps" & human_action_prev == "rock" ~ 1,
game == "fwg" & human_action_prev == "fire" ~ 1,
game == "numbers" & human_action_prev == "one" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a3_level1 = case_when(
game == "rps" & human_action_prev == "paper" ~ 1,
game == "fwg" & human_action_prev == "water" ~ 1,
game == "numbers" & ai_action_prev == "two" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a4_level1 = case_when(
game == "numbers" & ai_action_prev == "three" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
TRUE ~ 0))
dat <- dat %>% mutate(pred_a5_level1 = case_when(
game == "numbers" & ai_action_prev == "four" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
TRUE ~ 0))
## level 2 predictions
dat <- dat %>% mutate(pred_a1_level2 = case_when(
game == "rps" & ai_action_prev == "paper" ~ 1,
game == "fwg" & ai_action_prev == "water" ~ 1,
game == "numbers" & ai_action_prev == "four" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a2_level2 = case_when(
game == "rps" & ai_action_prev == "scissors" ~ 1,
game == "fwg" & ai_action_prev == "grass" ~ 1,
game == "numbers" & ai_action_prev == "five" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a3_level2 = case_when(
game == "rps" & ai_action_prev == "rock" ~ 1,
game == "fwg" & ai_action_prev == "fire" ~ 1,
game == "numbers" & ai_action_prev == "one" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a4_level2 = case_when(
game == "numbers" & ai_action_prev == "two" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
TRUE ~ 0))
dat <- dat %>% mutate(pred_a5_level2 = case_when(
game == "numbers" & ai_action_prev == "three" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
TRUE ~ 0))
dat$ai_action_num <- recode(dat$ai_action,"rock" = 1, "paper" = 2, "scissors" = 3, "fire" = 1, "water" = 2, "grass" = 3, "one" = 1, "two" = 2, "three" = 3, "four" = 4 , "five" = 5)
dat$human_action_num <- recode(dat$human_action,"rock" = 1, "paper" = 2, "scissors" = 3, "fire" = 1, "water" = 2, "grass" = 3, "one" = 1, "two" = 2, "three" = 3, "four" = 4 , "five" = 5)
# All_results <- data.frame()
# for(id in unique(dat$human_id)) {
#   All_results <- rbind(All_results,
#                        data.frame(
#                          "ID" = id,
#                          "condition" = dat[dat$human_id==id,"condition"][1],
#                          "Random_BIC" = -2*(100*log(1/3) + 50*log(1/5)),
lik_by_trial <- data.frame()
for(id in unique(dat$human_id)) {
tdat <- dat %>% subset(human_id == id)
# QLS likelihoods
pars_QLS <- unlist(filter(optim_results, ID == id)%>%select(QL_states_alpha,QL_states_Beta))
tdat$QLS_lik <- Q_learn_states(pars_QLS,tdat,"likelihood_by_trial",gamma = 0)
# Bayes model no transfer likelihoods
theta_NT <- unlist(filter(optim_results, ID == id)%>%select(theta_no_transfer))
tdat$Bayes_NT_lik <- exp1_Bayes_model_LL(theta_NT ,data = tdat, generalize = "no", "likelihood_by_trial")
# Bayes model with Transfer likelihood
theta_Tr <- unlist(filter(optim_results, ID == id)%>%select(theta_transfer))
tdat$Bayes_Tr_lik <- exp1_Bayes_model_LL(theta_Tr ,data = tdat, generalize = "game", "likelihood_by_trial")
lik_by_trial <- rbind(lik_by_trial,tdat)
}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
# Get Data for experiment 1, remove unecessary columns
dat <- read.csv("exp1_data.csv")
#####
# dat <- subset(dat, human_id == "38VxtUSv_h6RR5-tAAA2")
####
optim_results <- read.csv("All_results.csv")
#preparing data for functions to claculate likelihood
# dat <- as_tibble(dat) %>% group_by(human_id,game)
dat <- dat %>%
mutate(ai_action_prev = lag(ai_action,1), human_action_prev = lag(human_action,1))
## level 0 predictions
dat <- dat %>% mutate(pred_a1_level0 = case_when(
game == "rps" & ai_action_prev == "rock" ~ 1,
game == "fwg" & ai_action_prev == "fire" ~ 1,
game == "numbers" & ai_action_prev == "one" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a2_level0 = case_when(
game == "rps" & ai_action_prev == "paper" ~ 1,
game == "fwg" & ai_action_prev == "water" ~ 1,
game == "numbers" & ai_action_prev == "two" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a3_level0 = case_when(
game == "rps" & ai_action_prev == "scissors" ~ 1,
game == "fwg" & ai_action_prev == "grass" ~ 1,
game == "numbers" & ai_action_prev == "three" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a4_level0 = case_when(
game == "numbers" & ai_action_prev == "four" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
TRUE ~ 0))
dat <- dat %>% mutate(pred_a5_level0 = case_when(
game == "numbers" & ai_action_prev == "five" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
TRUE ~ 0))
## level 1 predictions
dat <- dat %>% mutate(pred_a1_level1 = case_when(
game == "rps" & human_action_prev == "scissors" ~ 1,
game == "fwg" & human_action_prev == "grass" ~ 1,
game == "numbers" & human_action_prev == "five" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a2_level1 = case_when(
game == "rps" & human_action_prev == "rock" ~ 1,
game == "fwg" & human_action_prev == "fire" ~ 1,
game == "numbers" & human_action_prev == "one" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a3_level1 = case_when(
game == "rps" & human_action_prev == "paper" ~ 1,
game == "fwg" & human_action_prev == "water" ~ 1,
game == "numbers" & ai_action_prev == "two" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a4_level1 = case_when(
game == "numbers" & ai_action_prev == "three" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
TRUE ~ 0))
dat <- dat %>% mutate(pred_a5_level1 = case_when(
game == "numbers" & ai_action_prev == "four" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
TRUE ~ 0))
## level 2 predictions
dat <- dat %>% mutate(pred_a1_level2 = case_when(
game == "rps" & ai_action_prev == "paper" ~ 1,
game == "fwg" & ai_action_prev == "water" ~ 1,
game == "numbers" & ai_action_prev == "four" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a2_level2 = case_when(
game == "rps" & ai_action_prev == "scissors" ~ 1,
game == "fwg" & ai_action_prev == "grass" ~ 1,
game == "numbers" & ai_action_prev == "five" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a3_level2 = case_when(
game == "rps" & ai_action_prev == "rock" ~ 1,
game == "fwg" & ai_action_prev == "fire" ~ 1,
game == "numbers" & ai_action_prev == "one" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a4_level2 = case_when(
game == "numbers" & ai_action_prev == "two" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
TRUE ~ 0))
dat <- dat %>% mutate(pred_a5_level2 = case_when(
game == "numbers" & ai_action_prev == "three" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
TRUE ~ 0))
dat$ai_action_num <- recode(dat$ai_action,"rock" = 1, "paper" = 2, "scissors" = 3, "fire" = 1, "water" = 2, "grass" = 3, "one" = 1, "two" = 2, "three" = 3, "four" = 4 , "five" = 5)
dat$human_action_num <- recode(dat$human_action,"rock" = 1, "paper" = 2, "scissors" = 3, "fire" = 1, "water" = 2, "grass" = 3, "one" = 1, "two" = 2, "three" = 3, "four" = 4 , "five" = 5)
lik_by_trial <- data.frame()
for(id in unique(dat$human_id)) {
tdat <- dat %>% subset(human_id == id)
# QLS likelihoods
pars_QLS <- unlist(filter(optim_results, ID == id)%>%select(QL_states_alpha,QL_states_Beta))
tdat$QLS_lik <- Q_learn_states(pars_QLS,tdat,"likelihood_by_trial",gamma = 0)
# Bayes model no transfer likelihoods
theta_NT <- unlist(filter(optim_results, ID == id)%>%select(theta_no_transfer))
tdat$Bayes_NT_lik <- exp1_Bayes_model_LL(theta_NT ,data = tdat, generalize = "no", "likelihood_by_trial")
# Bayes model with Transfer likelihood
theta_Tr <- unlist(filter(optim_results, ID == id)%>%select(theta_transfer))
tdat$Bayes_Tr_lik <- exp1_Bayes_model_LL(theta_Tr ,data = tdat, generalize = "game", "likelihood_by_trial")
lik_by_trial <- rbind(lik_by_trial,tdat)
}
View(optim_results)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
# Get Data for experiment 1, remove unecessary columns
dat <- read.csv("exp1_data.csv")
#####
# dat <- subset(dat, human_id == "38VxtUSv_h6RR5-tAAA2")
####
optim_results <- read.csv("All_results.csv")
#preparing data for functions to claculate likelihood
# dat <- as_tibble(dat) %>% group_by(human_id,game)
dat <- dat %>%
mutate(ai_action_prev = lag(ai_action,1), human_action_prev = lag(human_action,1))
## level 0 predictions
dat <- dat %>% mutate(pred_a1_level0 = case_when(
game == "rps" & ai_action_prev == "rock" ~ 1,
game == "fwg" & ai_action_prev == "fire" ~ 1,
game == "numbers" & ai_action_prev == "one" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a2_level0 = case_when(
game == "rps" & ai_action_prev == "paper" ~ 1,
game == "fwg" & ai_action_prev == "water" ~ 1,
game == "numbers" & ai_action_prev == "two" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a3_level0 = case_when(
game == "rps" & ai_action_prev == "scissors" ~ 1,
game == "fwg" & ai_action_prev == "grass" ~ 1,
game == "numbers" & ai_action_prev == "three" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a4_level0 = case_when(
game == "numbers" & ai_action_prev == "four" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
TRUE ~ 0))
dat <- dat %>% mutate(pred_a5_level0 = case_when(
game == "numbers" & ai_action_prev == "five" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
TRUE ~ 0))
## level 1 predictions
dat <- dat %>% mutate(pred_a1_level1 = case_when(
game == "rps" & human_action_prev == "scissors" ~ 1,
game == "fwg" & human_action_prev == "grass" ~ 1,
game == "numbers" & human_action_prev == "five" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a2_level1 = case_when(
game == "rps" & human_action_prev == "rock" ~ 1,
game == "fwg" & human_action_prev == "fire" ~ 1,
game == "numbers" & human_action_prev == "one" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a3_level1 = case_when(
game == "rps" & human_action_prev == "paper" ~ 1,
game == "fwg" & human_action_prev == "water" ~ 1,
game == "numbers" & ai_action_prev == "two" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a4_level1 = case_when(
game == "numbers" & ai_action_prev == "three" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
TRUE ~ 0))
dat <- dat %>% mutate(pred_a5_level1 = case_when(
game == "numbers" & ai_action_prev == "four" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
TRUE ~ 0))
## level 2 predictions
dat <- dat %>% mutate(pred_a1_level2 = case_when(
game == "rps" & ai_action_prev == "paper" ~ 1,
game == "fwg" & ai_action_prev == "water" ~ 1,
game == "numbers" & ai_action_prev == "four" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a2_level2 = case_when(
game == "rps" & ai_action_prev == "scissors" ~ 1,
game == "fwg" & ai_action_prev == "grass" ~ 1,
game == "numbers" & ai_action_prev == "five" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a3_level2 = case_when(
game == "rps" & ai_action_prev == "rock" ~ 1,
game == "fwg" & ai_action_prev == "fire" ~ 1,
game == "numbers" & ai_action_prev == "one" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a4_level2 = case_when(
game == "numbers" & ai_action_prev == "two" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
TRUE ~ 0))
dat <- dat %>% mutate(pred_a5_level2 = case_when(
game == "numbers" & ai_action_prev == "three" ~ 1,
game == "numbers" & is.na(ai_action_prev) ~ 1/5,
TRUE ~ 0))
dat$ai_action_num <- recode(dat$ai_action,"rock" = 1, "paper" = 2, "scissors" = 3, "fire" = 1, "water" = 2, "grass" = 3, "one" = 1, "two" = 2, "three" = 3, "four" = 4 , "five" = 5)
dat$human_action_num <- recode(dat$human_action,"rock" = 1, "paper" = 2, "scissors" = 3, "fire" = 1, "water" = 2, "grass" = 3, "one" = 1, "two" = 2, "three" = 3, "four" = 4 , "five" = 5)
lik_by_trial <- data.frame()
for(id in unique(dat$human_id)) {
tdat <- dat %>% subset(human_id == id)
# QLS likelihoods
pars_QLS <- unlist(filter(optim_results, ID == id)%>%select(QL_states_alpha,QL_states_Beta))
tdat$QLS_lik <- Q_learn_states(pars_QLS,tdat,"likelihood_by_trial",gamma = 0)
# Bayes model no transfer likelihoods
theta_NT <- unlist(filter(optim_results, ID == id)%>%select(theta_no_transfer))
tdat$Bayes_NT_lik <- exp1_Bayes_model_LL(theta_NT ,data = tdat, generalize = "no", "likelihood_by_trial")
# Bayes model with Transfer likelihood
theta_Tr <- unlist(filter(optim_results, ID == id)%>%select(theta_transfer))
tdat$Bayes_Tr_lik <- exp1_Bayes_model_LL(theta_Tr ,data = tdat, generalize = "game", "likelihood_by_trial")
lik_by_trial <- rbind(lik_by_trial,tdat)
}
library(ggplot2)
library(dplyr)
library(tidyr)
mean_lik <- lik_by_trial %>%
select(human_id,condition,game, round,QLS_lik,Bayes_NT_lik,Bayes_Tr_lik) %>%
group_by(condition,game,round) %>%
summarise(mean_QLS_lik = mean(QLS_lik, na.rm = TRUE),
mean_NT_lik = mean(Bayes_NT_lik, na.rm = TRUE),
mean_Tr_lik = mean(Bayes_Tr_lik, na.rm = TRUE))
mean_lik$game <- factor(mean_lik$game,levels=c("rps","fwg","numbers"))
data_long <- gather(mean_lik, strategy, probability, mean_QLS_lik:mean_Tr_lik, factor_key=TRUE)
# make sure the different games are ordered in the way they were played
data_long$game <- factor(data_long$game,levels=c("rps","fwg","numbers"))
ggplot(data_long,aes(x=round,y=probability,colour=strategy)) + geom_line() + facet_grid(game~condition)
knitr::opts_chunk$set(echo = TRUE)
library(depmixS4)
setClass("dummyResponse", contains="response")
setGeneric("dummyResponse", function(y, pstart = NULL, fixed = NULL, ...) standardGeneric("dummyResponse"))
setMethod("dummyResponse",
signature(y="ANY"),
function(y,pstart=NULL,fixed=NULL, ...) {
y <- matrix(y,length(y))
x <- matrix(1)
parameters <- list()
npar <- 0
mod <- new("dummyResponse",parameters=parameters,fixed=logical(0),x=x,y=y,npar=npar)
mod
}
)
setMethod("show","dummyResponse",
function(object) {
cat("Dummy for fixed likelihood Model \n")
}
)
setMethod("dens","dummyResponse",
function(object,log=FALSE) {
if(log) log(as.numeric(object@y)) else as.numeric(object@y)
}
)
setMethod("getpars","dummyResponse",
function(object,which="pars",...) {
switch(which,
"pars" = {
pars <- numeric(0)
},
"fixed" = {
pars <- logical(0)
}
)
return(pars)
}
)
setMethod("setpars","dummyResponse",
function(object, values, which="pars", ...) {
npar <- npar(object)
if(length(values)!=npar) stop("length of 'values' must be",npar)
# determine whether parameters or fixed constraints are being set
nms <- ""
switch(which,
"pars"= {
},
"fixed" = {
}
)
names(object@parameters) <- nms
return(object)
}
)
setMethod("fit","dummyResponse",
function(object,w) {
return(object)
}
)
setMethod("predict","dummyResponse",
function(object) {
ret <- object@y
return(ret)
}
)
# we need to have "dat" available and lik_by_trial
QLS_lik <- lik_by_trial$QLS_lik
QLS_lik[which(QLS_lik == 0)] <- .001
QLS_lik[is.na(QLS_lik)] <- .33 # this is a hack; there shouldn't be any missing values
Bayes_NT_lik <- lik_by_trial$Bayes_NT_lik
Bayes_Tr_lik <- lik_by_trial$Bayes_Tr_lik
nsubject <- length(unique(dat$human_id)) # number of participants
ngame <- 3 # number of games
ntrial <- c(50,50,50) # numer of trials in each game
rModels <- list(
list(
dummyResponse(QLS_lik)
),
list(
dummyResponse(Bayes_NT_lik)
),
list(
dummyResponse(Bayes_Tr_lik)
)
)
trstart <- matrix(c(0.8,0.1,0.1,0.1,0.8,0.1,.1,.1,.8),ncol=3)
transition <- list()
transition[[1]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[1,],family=multinomial("identity"))
transition[[2]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[2,],family=multinomial("identity"))
transition[[3]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[3,],family=multinomial("identity"))
instart <- c(1/3,1/3,1/3)
inMod <- transInit(~1,nstates=3,pstart=instart,family=multinomial("identity"),data=data.frame(rep(1,nsubject*ngame)))
mod <- makeDepmix(response=rModels,transition=transition,prior=inMod,ntimes=rep(ntrial,nsubject))
fmod <- fit(mod, emcontrol=em.control(random.start=FALSE))
trstart <- matrix(c(1,0,0,0,1,0,0,0,1),ncol=3)
transition <- list()
transition[[1]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[1,],family=multinomial("identity"))
transition[[2]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[2,],family=multinomial("identity"))
transition[[3]] <- transInit(~1,nstates=3,data=data.frame(1),pstart=trstart[3,],family=multinomial("identity"))
mod_noswitch <- makeDepmix(response=rModels,transition=transition,prior=inMod,ntimes=rep(ntrial,nsubject))
fmod_noswitch <- fit(mod_noswitch, emcontrol=em.control(random.start=FALSE))
# p-value for comparison between a model with strategy switches and one without:
1-pchisq(-2*as.numeric(logLik(fmod_noswitch)) - (-2*as.numeric(logLik(fmod))),df=3)
