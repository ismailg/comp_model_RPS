dat <- dat %>%
mutate(ai_action_prev = lag(ai_action,1), human_action_prev = lag(human_action,1))
## level 0 predictions
dat <- dat %>% mutate(pred_a1_level0 = case_when(
game == "rps" & ai_action_prev == "rock" ~ 1,
game == "fwg" & ai_action_prev == "fire" ~ 1,
game == "shootout" & ai_action_prev == "left" ~ 1,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a2_level0 = case_when(
game == "rps" & ai_action_prev == "paper" ~ 1,
game == "fwg" & ai_action_prev == "water" ~ 1,
game == "shootout" & ai_action_prev == "center" ~ 1,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a3_level0 = case_when(
game == "rps" & ai_action_prev == "scissors" ~ 1,
game == "fwg" & ai_action_prev == "grass" ~ 1,
game == "shootout" & ai_action_prev == "right" ~ 1,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
## level 1 predictions
dat <- dat %>% mutate(pred_a1_level1 = case_when(
game == "rps" & human_action_prev == "scissors" ~ 1,
game == "fwg" & human_action_prev == "grass" ~ 1,
game == "shootout" & human_action_prev == "left" ~ 1,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a2_level1 = case_when(
game == "rps" & human_action_prev == "rock" ~ 1,
game == "fwg" & human_action_prev == "fire" ~ 1,
game == "shootout" & human_action_prev == "center" ~ 1,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a3_level1 = case_when(
game == "rps" & human_action_prev == "paper" ~ 1,
game == "fwg" & human_action_prev == "water" ~ 1,
game == "shootout" & ai_action_prev == "right" ~ 1,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
## level 2 predictions
dat <- dat %>% mutate(pred_a1_level2 = case_when(
game == "rps" & ai_action_prev == "paper" ~ 1,
game == "fwg" & ai_action_prev == "water" ~ 1,
game == "shootout" & (ai_action_prev == "center" | ai_action_prev == "right") ~ .5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a2_level2 = case_when(
game == "rps" & ai_action_prev == "scissors" ~ 1,
game == "fwg" & ai_action_prev == "grass" ~ 1,
game == "shootout" & (ai_action_prev == "left" | ai_action_prev == "right") ~ .5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat <- dat %>% mutate(pred_a3_level2 = case_when(
game == "rps" & ai_action_prev == "rock" ~ 1,
game == "fwg" & ai_action_prev == "fire" ~ 1,
game == "shootout" & (ai_action_prev == "left" | ai_action_prev == "center") ~ .5,
is.na(ai_action_prev) ~ 1/3,
!is.na(ai_action_prev) ~ 0))
dat$ai_action_num <- recode(dat$ai_action,"rock" = 1, "paper" = 2, "scissors" = 3, "fire" = 1, "water" = 2, "grass" = 3, "left" = 1, "center" = 2, "right" = 3)
dat$human_action_num <- recode(dat$human_action,"rock" = 1, "paper" = 2, "scissors" = 3, "fire" = 1, "water" = 2, "grass" = 3, "left" = 1, "center" = 2, "right" = 3)
dat <- as.data.frame(dat)
lik_by_trial_2 <- data.frame()
for(id in unique(dat$human_id)) {
tdat <- dat %>% subset(human_id == id)
# QLS likelihoods
pars_QLS <- unlist(filter(exp2_optim_results, ID == id)%>%select(QL_states_Beta, QL_states_alpha))
tdat$QLS_lik <-  exp2_QL_states(pars_QLS,tdat,"likelihood_by_trial",0.0, FALSE)
# QLS within Transfer likelihoods
pars_QLS_within <- unlist(filter(exp2_optim_results, ID == id)%>%select(QLS_within_Tr_Beta,QLS_within_Tr_alpha))
tdat$QLS_lik_within <-  exp2_QL_states(pars_QLS_within,tdat,"likelihood_by_trial",gamma = 0, TRUE)
#
#
# Bayes model no transfer likelihoods
theta_NT <- unlist(filter(exp2_optim_results, ID == id)%>%select(theta_no_tr))
tdat$Bayes_NT_lik <- Bayes_model_LL(theta_NT, tdat, distinct_opponent = TRUE, generalize = "no",return = "likelihood_by_trial")
# Bayes model with Transfer likelihood
theta_Tr <- unlist(filter(exp2_optim_results, ID == id)%>%select(theta_transfer))
tdat$Bayes_Tr_lik <- Bayes_model_LL(theta_Tr, tdat, distinct_opponent = TRUE, generalize = "game",return = "likelihood_by_trial")
lik_by_trial_2 <- rbind(lik_by_trial_2,tdat)
}
write.csv(lik_by_trial_2,file="exp2_lik_by_trial.csv",row.names = FALSE)
exp2_lik_by_trial <- read.csv("../Experiment_2/exp2_lik_by_trial.csv")
mean_lik_2 <- exp2_lik_by_trial %>%
select(human_id,game,stage,round_condition, round, QLS_lik, QLS_lik_within, Bayes_NT_lik, Bayes_Tr_lik) %>%
group_by(game,stage,round) %>%
summarise(mean_QLS_lik = mean(QLS_lik, na.rm = TRUE),
mean_QLS_within_lik = mean(QLS_lik_within, na.rm = TRUE),
mean_NT_lik = mean(Bayes_NT_lik, na.rm = TRUE),
mean_Tr_lik = mean(Bayes_Tr_lik, na.rm = TRUE))
mean_lik$game <- factor(mean_lik$game,levels=c("rps","fwg","shootout"))
data_long <- gather(mean_lik_2, strategy, probability, mean_QLS_lik:mean_Tr_lik, factor_key=TRUE)
# make sure the different games are ordered in the way they were played
data_long$game <- factor(data_long$game,levels=c("rps","fwg","shootout"))
ggplot(data_long,aes(x=round,y=probability,colour=strategy)) + geom_line() + facet_grid(game~stage)
exp1_comp_results <- read.csv(file="../exp1_all_results.csv")
exp1_comp_table <- table(exp1_comp_results[, "condition"],c("Random","ToM_BT","ToM_NBT","QL", "QL_states","EWA","S_EWA","EWA_states", "MBM")[apply(exp1_comp_results[,c("Random_BIC","Bayes_Tr_BIC","Bayes_No_Tr_BIC","QL_BIC","QL_states_BIC","EWA_BIC","EWA_self_BIC","EWA_states_BIC")],1,which.min)])
#write.csv(exp1_comp_table ,file="exp1_comp_table ",row.names = TRUE)
kable(exp1_comp_table)
exp1_dat = read.csv("../exp1_data.csv")
# exp1_model_comp = read.csv("../exp1_model_comp.csv")
exp1_model_comp <- data.frame()
for(id in unique(exp1_dat$human_id)) {
tdat <- subset(exp1_dat,human_id == id)
tot_score <- sum(tdat$score)
tot_time <- sum(tdat$human_rt)
early_dat <- subset(tdat,between(tdat$round,2,6) & (game =="fwg"))
#early_dat <- subset(tdat,between(tdat$round,2,6) & (game =="fwg" | game =="numbers") )
tr_score <- sum(early_dat$score)
id_results <- subset(exp1_comp_results, ID == id)
min_BIC <- apply(id_results[,c("Random_BIC","Bayes_Tr_BIC","Bayes_No_Tr_BIC","QL_BIC","QL_states_BIC","EWA_BIC","EWA_self_BIC")],1,min)
best_model <- c("Random","ToM_BT","ToM_NBT","QL", "QL_states","EWA","S_EWA")[apply(id_results[,c("Random_BIC","Bayes_Tr_BIC","Bayes_No_Tr_BIC","QL_BIC","QL_states_BIC","EWA_BIC","EWA_self_BIC")],1,which.min)]
#
exp1_model_comp <- rbind(exp1_model_comp,
data.frame(
"human_id" = id,
"condition" = exp1_dat[exp1_dat$human_id==id,"condition"][1],
"Early_game_score" = tr_score,
"Total_score" = tot_score,
"Best_model" = best_model,
"Total_time" = sum(tdat$human_rt),
"TR_minus_NT_BIC" = id_results[,"Bayes_Tr_BIC"] - id_results[,"Bayes_No_Tr_BIC"],
"Rand_minus_best_BIC" =  id_results[,"Random_BIC"] - min_BIC
))
}
datalist = list()
i = 0
new_dat <- setNames(data.frame(matrix(ncol = ncol(exp1_dat), nrow = 0)), colnames(exp1_dat))
for(id in unique(exp1_dat$human_id)) {
i <- i+1
tdat <- subset(exp1_dat,human_id == id)
tdat$part_num <- i
tdat <- within(tdat, acc_sum <- cumsum(tdat$score))
datalist[[i]] <- tdat
}
# Merge all datasets into one
new_dat <- dplyr::bind_rows(datalist)
# or new_dat <- data.table::rbindlist(datalist)
# Add column for time t
new_dat <- new_dat %>% group_by(exp1_dat$human_id) %>% mutate(t = row_number())
# Add best fitting model per participant
new_dat <- merge(new_dat, exp1_model_comp[, c("human_id", "Best_model")], by="human_id")
temp <- new_dat[,c("t","acc_sum","Best_model","condition","part_num")]
dat_by_model <- temp %>% group_by(Best_model,t) %>%
summarize(model_acc_sum = mean(acc_sum))
#knitr::include_graphics("../Report/images/exp1_comp_models.png", dpi = 108)
par(las=2) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(exp1_comp_table,
horiz =TRUE, # rotate barplot for better visibility
las=1, # change orientation x axis labels
cex.names=0.8, # text label size
legend = rownames(exp1_comp_table),
beside =TRUE,
xlab="Number of participants",
args.legend=list( # positioning of legend box
x=ncol(exp1_comp_table) + 4,
y=max(colSums(exp1_comp_table)) + 4,
bty = "n")
)
p5 <- ggplot(data = dat_by_model, aes(x = t, y=model_acc_sum, group = Best_model)) +
geom_line(aes(color= Best_model))
p5+ labs(color = "Best fitting model", x = "Round Number", y="Accumulated score")
exp1_lik_by_trial.csv  <- read.csv("../exp1_lik_by_trial.csv")
mean_lik <- exp1_lik_by_trial %>%
select(human_id,condition,game, round,QLS_lik,Bayes_NT_lik,Bayes_Tr_lik) %>%
group_by(condition,game,round) %>%
summarise(mean_QLS_lik = mean(QLS_lik, na.rm = TRUE),
mean_NT_lik = mean(Bayes_NT_lik, na.rm = TRUE),
mean_Tr_lik = mean(Bayes_Tr_lik, na.rm = TRUE))
mean_lik$game <- factor(mean_lik$game,levels=c("rps","fwg","numbers"))
data_long <- gather(mean_lik, strategy, probability, mean_QLS_lik:mean_Tr_lik, factor_key=TRUE)
# make sure the different games are ordered in the way they were played
data_long$game <- factor(data_long$game,levels=c("rps","fwg","numbers"))
ggplot(data_long,aes(x=round,y=probability,colour=strategy)) + geom_line() + facet_grid(game~condition)
exp2_comp_results <- read.csv(file="../Experiment_2/exp2_results.csv")
# exp2_comp_table <- table(exp2_comp_results[, "condition"],c("Random","ToM_BT","ToM_NBT", "ToM_NT", "ToM_Naive","QL_states", "QLS_within","S_EWA","MBM")[apply(exp2_comp_results[,c("Random_BIC","Btwn_TR_BIC","No_Btwn_Tr_BIC","No_Tr_BIC","Naive_BIC","QL_states_BIC","QLS_within_Tr_BIC","EWA_self_BIC","MBM2_BIC")],1,which.min)])
exp2_comp_table <- table(exp2_comp_results[, "condition"],c("Random","ToM_BT","ToM_NBT", "ToM_NT", "ToM_Naive","QL_states", "QLS_within","S_EWA","MBM")[apply(exp2_comp_results[,c("Random_BIC","Distinct_game_BIC","Distinct_stage_BIC","Bayes_distinct_no","Bayes_same_game","QL_states_BIC","QLS_within_Tr_BIC","EWA_self_BIC","MBM2_BIC")],1,which.min)])
# write.csv(exp2_table_results,file="exp2_table_results.csv",row.names = TRUE)
kable(exp2_comp_table)
#knitr::include_graphics("../Report/images/exp1_comp_models.png", dpi = 108)
par(las=2) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(exp2_comp_table,
horiz =TRUE, # rotate barplot for better visibility
las=1, # change orientation x axis labels
cex.names=0.8, # text label size
beside =TRUE,
xlab="Number of participants",
# legend = c("level-1 opp first","level-2 opp first"),
legend = paste0(rownames(exp2_comp_table) , " faced first"),
args.legend=list( # positioning of legend box
x=ncol(exp2_comp_table) + 6,
y=max(colSums(exp2_comp_table)) +1,
bty = "n")
)
dat_exp2 = read.csv("../Experiment_2/data_exp2.csv")
#Adjust shootout score tor eflect easier game
dat_exp2$adj_score <- ifelse(as.character(dat_exp2$game) == "shootout", dat_exp2$score - 0.333, dat_exp2$score)
# Load data comparing models BIC for each participant
model_comp_2 = read.csv("../Experiment_2/exp2_model_comp.csv")
datalist2 = list()
i = 0
#Build empty dataframe with same names as original data
exp2_cum_score <- setNames(data.frame(matrix(ncol = ncol(dat_exp2), nrow = 0)), colnames(dat_exp2))
for(id in unique(dat_exp2$human_id)) {
i <- i+1
tdat <- subset(dat_exp2,human_id == id)
tdat$part_num <- i
# NB : USE ADJUSTED SCORE IN SHOOTOUT
tdat <- within(tdat, acc_sum <- cumsum(tdat$adj_score))
datalist2[[i]] <- tdat
}
# Merge all datasets into one
exp2_cum_score <- dplyr::bind_rows(datalist2)
# or exp2_cum_score <- data.table::rbindlist(datalist)
# Add column for time t
exp2_cum_score <- exp2_cum_score %>% group_by(human_id) %>% mutate(t = row_number())
# Participant number as a factor
# tdat$part_num <- as.factor(tdat$part_num)
# Add best fitting model per participant
exp2_cum_score <- merge(exp2_cum_score, model_comp_2[, c("human_id", "Best_model_2")], by="human_id")
temp2 <- exp2_cum_score[,c("t","acc_sum","Best_model_2","condition","part_num")]
dat_by_model_2 <- temp2 %>% group_by(Best_model_2,t) %>%
summarize(avg_acc_sum = mean(acc_sum))
p8 <- ggplot(data = dat_by_model_2, aes(x = t, y=avg_acc_sum, group = Best_model_2)) +
geom_line(aes(color= Best_model_2)) +
scale_x_continuous(minor_breaks = seq(0 , 180, 10), breaks = seq(0, 180, 60))
p8 + labs(color = "Best fitting model", x = "Round Number", y="Accumulated score")
exp2_lik_by_trial <- read.csv("../Experiment_2/exp2_lik_by_trial.csv")
mean_lik_2 <- exp2_lik_by_trial %>%
select(human_id,game,stage,round_condition, round, QLS_lik, QLS_lik_within, Bayes_NT_lik, Bayes_Tr_lik) %>%
group_by(game,stage,round) %>%
summarise(mean_QLS_lik = mean(QLS_lik, na.rm = TRUE),
mean_QLS_within_lik = mean(QLS_lik_within, na.rm = TRUE),
mean_NT_lik = mean(Bayes_NT_lik, na.rm = TRUE),
mean_Tr_lik = mean(Bayes_Tr_lik, na.rm = TRUE))
mean_lik$game <- factor(mean_lik$game,levels=c("rps","fwg","shootout"))
data_long <- gather(mean_lik_2, strategy, probability, mean_QLS_lik:mean_Tr_lik, factor_key=TRUE)
# make sure the different games are ordered in the way they were played
data_long$game <- factor(data_long$game,levels=c("rps","fwg","shootout"))
ggplot(data_long,aes(x=round,y=probability,colour=strategy)) + geom_line() + facet_grid(game~stage)
exp1_lik_by_trial  <- read.csv("../exp1_lik_by_trial.csv")
mean_lik <- exp1_lik_by_trial %>%
select(human_id,condition,game, round,QLS_lik,Bayes_NT_lik,Bayes_Tr_lik) %>%
group_by(condition,game,round) %>%
summarise(mean_QLS_lik = mean(QLS_lik, na.rm = TRUE),
mean_NT_lik = mean(Bayes_NT_lik, na.rm = TRUE),
mean_Tr_lik = mean(Bayes_Tr_lik, na.rm = TRUE))
mean_lik$game <- factor(mean_lik$game,levels=c("rps","fwg","numbers"))
data_long <- gather(mean_lik, strategy, probability, mean_QLS_lik:mean_Tr_lik, factor_key=TRUE)
# make sure the different games are ordered in the way they were played
data_long$game <- factor(data_long$game,levels=c("rps","fwg","numbers"))
ggplot(data_long,aes(x=round,y=probability,colour=strategy)) + geom_line() + facet_grid(game~condition)
exp1_lik_by_trial  <- read.csv("../exp1_lik_by_trial.csv")
mean_lik <- exp1_lik_by_trial %>%
select(human_id,condition,game, round,QLS_lik,Bayes_NT_lik,Bayes_Tr_lik) %>%
group_by(condition,game,round) %>%
summarise(mean_QLS_lik = mean(QLS_lik, na.rm = TRUE),
mean_NT_lik = mean(Bayes_NT_lik, na.rm = TRUE),
mean_Tr_lik = mean(Bayes_Tr_lik, na.rm = TRUE))
mean_lik$game <- factor(mean_lik$game,levels=c("rps","fwg","numbers"))
data_long <- gather(mean_lik, strategy, probability, mean_QLS_lik:mean_Tr_lik, factor_key=TRUE)
# make sure the different games are ordered in the way they were played
data_long$game <- factor(data_long$game,levels=c("rps","fwg","numbers"))
ggplot(data_long,aes(x=round,y=probability,colour=strategy)) + geom_line() + facet_grid(game~condition)
exp2_lik_by_trial <- read.csv("../Experiment_2/exp2_lik_by_trial.csv")
mean_lik_2 <- exp2_lik_by_trial %>%
select(human_id,game,stage,round_condition, round, QLS_lik, QLS_lik_within, Bayes_NT_lik, Bayes_Tr_lik) %>%
group_by(game,stage,round) %>%
summarise(mean_QLS_lik = mean(QLS_lik, na.rm = TRUE),
mean_QLS_within_lik = mean(QLS_lik_within, na.rm = TRUE),
mean_NT_lik = mean(Bayes_NT_lik, na.rm = TRUE),
mean_Tr_lik = mean(Bayes_Tr_lik, na.rm = TRUE))
mean_lik$game <- factor(mean_lik$game,levels=c("rps","fwg","shootout"))
data_long <- gather(mean_lik_2, strategy, probability, mean_QLS_lik:mean_Tr_lik, factor_key=TRUE)
# make sure the different games are ordered in the way they were played
data_long$game <- factor(data_long$game,levels=c("rps","fwg","shootout"))
ggplot(data_long,aes(x=round,y=probability,colour=strategy)) + geom_line() + facet_grid(game~stage)
# Seed for random number generation
set.seed(42)
options(tinytex.verbose = TRUE)
dat1 <- read.csv("../data20180719.csv")
# transform 'winner' variable in numeric score
dat1$score <- recode(dat1$winner, human = 1, tie = 0, ai = -1)
# create a new variable 'block' with round 1...25 = block 1 and round 26...50 as block 2
dat1$block <- factor(as.numeric(cut(dat1$round,2)),labels =c("first half", "second half"))
# create a new variable "game.f" as a factor variable of games
dat1$game.f <- factor(dat1$game, labels = c("RPS","FWG","NUM"),levels=c("rps","fwg","numbers"))
#Group data by human_id and calculate mean score per block of each game.
dat2 <- dat1 %>%
group_by(human_id,condition,game,block,game.f) %>%
summarize(block_score = mean(score))
# Group data by game and ID
dat3 <- group_by(dat2, human_id,game.f,game) %>% summarise(game_score = mean(block_score))
# head(dat3,6)
# Subsetting scores data by game
rps <- subset(dat3,  game.f == "RPS",game_score)
fwg <- subset(dat3,  game.f == "FWG",game_score)
num <- subset(dat3,  game.f == "NUM",game_score)
# head(rps,6)
# Plot average  scores per game
ggboxplot(dat3, x = "game.f", y = "game_score", group = 1, add =c("mean_ci","jitter"), color="game.f", palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Score", xlab = "Games")
# Plot results by game and block (for all 3 games, learning is happening)
p <- ggboxplot(dat2, x = "game", y = "block_score", palette = c("#00AFBB", "#E7B800"),order = c("rps", "fwg","numbers"), fill="block",ylab = "Percentage score", xlab = "Games")
p + facet_grid(. ~ condition)
dat_26 <- subset(dat1,round >1 & round <7, drop =TRUE)
exp1_dat2_6 <- dat_26 %>%
group_by(human_id,condition,game.f,confidence,difficulty) %>%
summarise(early_score = mean(score))
# Check group means and SDs by game and condition
group_by(exp1_dat2_6, game.f,condition) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
p2 <- ggerrorplot(exp1_dat2_6, x = "game.f", y = "early_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","NUM"), ylab = "Average Score rounds 2-6", xlab = "Games")
p2 + facet_grid(. ~ condition)
exp1_early_anova <- afex :: aov_car(
early_score ~ game.f*condition + Error(human_id/(game.f))
, data=exp1_dat2_6
, type = 3)
apa_lm1 <- apa_print(exp1_early_anova)
exp1_early_anova <- afex :: aov_car(
early_score ~ game.f*condition + Error(human_id/(game.f))
, data=exp1_dat2_6
, type = 3)
#apa_lm1 <- apa_print(exp1_early_anova)
means.int2 <- lsmeans(exp1_early_anova, specs = c("game.f","condition"))
# apa_table(trans26, caption = "Average early round scores by game and condition in first experiment")
dat_int <- read.csv(file = "../Experiment_2/dat_int_exp2.csv")
exp2_anova <- afex::aov_car(
int_score ~ (game.f*interaction_lvl*condition.f*opp_type) + Error(human_id/(game.f*interaction_lvl*opp_type))
, data = dat_int
, type = 3
)
(ls0 <- lsmeans(exp2_anova, "game.f", by = "opp_type"))
# p3 <- ggerrorplot(dat_int, x = "game.f", y = "int_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","SHOOT"), ylab = "Average Scores per game", xlab = "Games")
#
# p3 + facet_grid(. ~ opp_type)
p4 <- ggboxplot(dat_int, x = "game.f", y = "int_score", palette = c("#00AFBB", "#E7B800"),order = c("RPS", "FWG","SHOOT"), fill="interaction_lvl",ylab = "Percentage score", xlab = "Games")
p4 + facet_grid(. ~ opp_type)
dat <- read.csv(file = "../Experiment_2/dat_exp2.csv")
#looking at TRIALS 2 to 6 to test robustness of evidence for transfer of learning of opponent strategy #########
dat_26 <- subset(dat,(round >1 & round < 7) & (interaction_lvl == "first interaction" ), drop =TRUE)
exp2_dat2_6 <- dat_26 %>%
group_by(human_id,condition.f,game.f,opp_type,confidence,difficulty) %>%
summarise(early_score = mean(adj_score))
# Check group means and SDs
group_by(exp2_dat2_6, game.f) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
group_by(exp2_dat2_6, game.f,opp_type) %>%
summarise(
count = n(),
mean = mean(early_score, na.rm = TRUE),
sd = sd(early_score, na.rm = TRUE)
)
# plot scores per game
p2 <- ggerrorplot(exp2_dat2_6, x = "game.f", y = "early_score", group = 1, color="game.f", desc_stat = "mean_ci",palette = c("#00AFBB", "#E7B800", "#FC4E07"), order = c("RPS", "FWG","SHOOT"), ylab = "Average Score rounds 2-6", xlab = "Games")
p2 + facet_grid(. ~ opp_type)
exp1_comp_results <- read.csv(file="../exp1_all_results.csv")
exp1_comp_table <- table(exp1_comp_results[, "condition"],c("Random","ToM_BT","ToM_NBT","QL", "QL_states","EWA","S_EWA","EWA_states", "MBM")[apply(exp1_comp_results[,c("Random_BIC","Bayes_Tr_BIC","Bayes_No_Tr_BIC","QL_BIC","QL_states_BIC","EWA_BIC","EWA_self_BIC","EWA_states_BIC")],1,which.min)])
#write.csv(exp1_comp_table ,file="exp1_comp_table ",row.names = TRUE)
kable(exp1_comp_table)
exp1_dat = read.csv("../exp1_data.csv")
# exp1_model_comp = read.csv("../exp1_model_comp.csv")
exp1_model_comp <- data.frame()
for(id in unique(exp1_dat$human_id)) {
tdat <- subset(exp1_dat,human_id == id)
tot_score <- sum(tdat$score)
tot_time <- sum(tdat$human_rt)
early_dat <- subset(tdat,between(tdat$round,2,6) & (game =="fwg"))
#early_dat <- subset(tdat,between(tdat$round,2,6) & (game =="fwg" | game =="numbers") )
tr_score <- sum(early_dat$score)
id_results <- subset(exp1_comp_results, ID == id)
min_BIC <- apply(id_results[,c("Random_BIC","Bayes_Tr_BIC","Bayes_No_Tr_BIC","QL_BIC","QL_states_BIC","EWA_BIC","EWA_self_BIC")],1,min)
best_model <- c("Random","ToM_BT","ToM_NBT","QL", "QL_states","EWA","S_EWA")[apply(id_results[,c("Random_BIC","Bayes_Tr_BIC","Bayes_No_Tr_BIC","QL_BIC","QL_states_BIC","EWA_BIC","EWA_self_BIC")],1,which.min)]
#
exp1_model_comp <- rbind(exp1_model_comp,
data.frame(
"human_id" = id,
"condition" = exp1_dat[exp1_dat$human_id==id,"condition"][1],
"Early_game_score" = tr_score,
"Total_score" = tot_score,
"Best_model" = best_model,
"Total_time" = sum(tdat$human_rt),
"TR_minus_NT_BIC" = id_results[,"Bayes_Tr_BIC"] - id_results[,"Bayes_No_Tr_BIC"],
"Rand_minus_best_BIC" =  id_results[,"Random_BIC"] - min_BIC
))
}
datalist = list()
i = 0
new_dat <- setNames(data.frame(matrix(ncol = ncol(exp1_dat), nrow = 0)), colnames(exp1_dat))
for(id in unique(exp1_dat$human_id)) {
i <- i+1
tdat <- subset(exp1_dat,human_id == id)
tdat$part_num <- i
tdat <- within(tdat, acc_sum <- cumsum(tdat$score))
datalist[[i]] <- tdat
}
# Merge all datasets into one
new_dat <- dplyr::bind_rows(datalist)
# or new_dat <- data.table::rbindlist(datalist)
# Add column for time t
new_dat <- new_dat %>% group_by(exp1_dat$human_id) %>% mutate(t = row_number())
# Add best fitting model per participant
new_dat <- merge(new_dat, exp1_model_comp[, c("human_id", "Best_model")], by="human_id")
temp <- new_dat[,c("t","acc_sum","Best_model","condition","part_num")]
dat_by_model <- temp %>% group_by(Best_model,t) %>%
summarize(model_acc_sum = mean(acc_sum))
#knitr::include_graphics("../Report/images/exp1_comp_models.png", dpi = 108)
par(las=2) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(exp1_comp_table,
horiz =TRUE, # rotate barplot for better visibility
las=1, # change orientation x axis labels
cex.names=0.8, # text label size
legend = rownames(exp1_comp_table),
beside =TRUE,
xlab="Number of participants",
args.legend=list( # positioning of legend box
x=ncol(exp1_comp_table) + 4,
y=max(colSums(exp1_comp_table)) + 4,
bty = "n")
)
p5 <- ggplot(data = dat_by_model, aes(x = t, y=model_acc_sum, group = Best_model)) +
geom_line(aes(color= Best_model))
p5+ labs(color = "Best fitting model", x = "Round Number", y="Accumulated score")
exp1_lik_by_trial  <- read.csv("../exp1_lik_by_trial.csv")
mean_lik <- exp1_lik_by_trial %>%
select(human_id,condition,game, round,QLS_lik,Bayes_NT_lik,Bayes_Tr_lik) %>%
group_by(condition,game,round) %>%
summarise(mean_QLS_lik = mean(QLS_lik, na.rm = TRUE),
mean_NT_lik = mean(Bayes_NT_lik, na.rm = TRUE),
mean_Tr_lik = mean(Bayes_Tr_lik, na.rm = TRUE))
mean_lik$game <- factor(mean_lik$game,levels=c("rps","fwg","numbers"))
data_long <- gather(mean_lik, strategy, probability, mean_QLS_lik:mean_Tr_lik, factor_key=TRUE)
# make sure the different games are ordered in the way they were played
data_long$game <- factor(data_long$game,levels=c("rps","fwg","numbers"))
ggplot(data_long,aes(x=round,y=probability,colour=strategy)) + geom_line() + facet_grid(game~condition)
exp2_comp_results <- read.csv(file="../Experiment_2/exp2_results.csv")
# exp2_comp_table <- table(exp2_comp_results[, "condition"],c("Random","ToM_BT","ToM_NBT", "ToM_NT", "ToM_Naive","QL_states", "QLS_within","S_EWA","MBM")[apply(exp2_comp_results[,c("Random_BIC","Btwn_TR_BIC","No_Btwn_Tr_BIC","No_Tr_BIC","Naive_BIC","QL_states_BIC","QLS_within_Tr_BIC","EWA_self_BIC","MBM2_BIC")],1,which.min)])
exp2_comp_table <- table(exp2_comp_results[, "condition"],c("Random","ToM_BT","ToM_NBT", "ToM_NT", "ToM_Naive","QL_states", "QLS_within","S_EWA","MBM")[apply(exp2_comp_results[,c("Random_BIC","Distinct_game_BIC","Distinct_stage_BIC","Bayes_distinct_no","Bayes_same_game","QL_states_BIC","QLS_within_Tr_BIC","EWA_self_BIC","MBM2_BIC")],1,which.min)])
# write.csv(exp2_table_results,file="exp2_table_results.csv",row.names = TRUE)
kable(exp2_comp_table)
#knitr::include_graphics("../Report/images/exp1_comp_models.png", dpi = 108)
par(las=2) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(exp2_comp_table,
horiz =TRUE, # rotate barplot for better visibility
las=1, # change orientation x axis labels
cex.names=0.8, # text label size
beside =TRUE,
xlab="Number of participants",
# legend = c("level-1 opp first","level-2 opp first"),
legend = paste0(rownames(exp2_comp_table) , " faced first"),
args.legend=list( # positioning of legend box
x=ncol(exp2_comp_table) + 6,
y=max(colSums(exp2_comp_table)) +1,
bty = "n")
)
dat_exp2 = read.csv("../Experiment_2/data_exp2.csv")
#Adjust shootout score tor eflect easier game
dat_exp2$adj_score <- ifelse(as.character(dat_exp2$game) == "shootout", dat_exp2$score - 0.333, dat_exp2$score)
# Load data comparing models BIC for each participant
model_comp_2 = read.csv("../Experiment_2/exp2_model_comp.csv")
datalist2 = list()
i = 0
#Build empty dataframe with same names as original data
exp2_cum_score <- setNames(data.frame(matrix(ncol = ncol(dat_exp2), nrow = 0)), colnames(dat_exp2))
for(id in unique(dat_exp2$human_id)) {
i <- i+1
tdat <- subset(dat_exp2,human_id == id)
tdat$part_num <- i
# NB : USE ADJUSTED SCORE IN SHOOTOUT
tdat <- within(tdat, acc_sum <- cumsum(tdat$adj_score))
datalist2[[i]] <- tdat
}
# Merge all datasets into one
exp2_cum_score <- dplyr::bind_rows(datalist2)
# or exp2_cum_score <- data.table::rbindlist(datalist)
# Add column for time t
exp2_cum_score <- exp2_cum_score %>% group_by(human_id) %>% mutate(t = row_number())
# Participant number as a factor
# tdat$part_num <- as.factor(tdat$part_num)
# Add best fitting model per participant
exp2_cum_score <- merge(exp2_cum_score, model_comp_2[, c("human_id", "Best_model_2")], by="human_id")
temp2 <- exp2_cum_score[,c("t","acc_sum","Best_model_2","condition","part_num")]
dat_by_model_2 <- temp2 %>% group_by(Best_model_2,t) %>%
summarize(avg_acc_sum = mean(acc_sum))
p8 <- ggplot(data = dat_by_model_2, aes(x = t, y=avg_acc_sum, group = Best_model_2)) +
geom_line(aes(color= Best_model_2)) +
scale_x_continuous(minor_breaks = seq(0 , 180, 10), breaks = seq(0, 180, 60))
p8 + labs(color = "Best fitting model", x = "Round Number", y="Accumulated score")
exp2_lik_by_trial <- read.csv("../Experiment_2/exp2_lik_by_trial.csv")
mean_lik_2 <- exp2_lik_by_trial %>%
select(human_id,game,stage,round_condition, round, QLS_lik, QLS_lik_within, Bayes_NT_lik, Bayes_Tr_lik) %>%
group_by(game,stage,round) %>%
summarise(mean_QLS_lik = mean(QLS_lik, na.rm = TRUE),
mean_QLS_within_lik = mean(QLS_lik_within, na.rm = TRUE),
mean_NT_lik = mean(Bayes_NT_lik, na.rm = TRUE),
mean_Tr_lik = mean(Bayes_Tr_lik, na.rm = TRUE))
mean_lik$game <- factor(mean_lik$game,levels=c("rps","fwg","shootout"))
data_long <- gather(mean_lik_2, strategy, probability, mean_QLS_lik:mean_Tr_lik, factor_key=TRUE)
# make sure the different games are ordered in the way they were played
data_long$game <- factor(data_long$game,levels=c("rps","fwg","shootout"))
ggplot(data_long,aes(x=round,y=probability,colour=strategy)) + geom_line() + facet_grid(game~stage)
